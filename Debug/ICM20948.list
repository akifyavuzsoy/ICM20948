
ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a464  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a5ec  0800a5ec  0000b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a60c  0800a60c  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a60c  0800a60c  0000b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a614  0800a614  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a614  0800a614  0000b614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a618  0800a618  0000b618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a61c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000ac4  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b40  20000b40  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016712  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfc  00000000  00000000  000227be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  000264c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2c  00000000  00000000  00027760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a5a  00000000  00000000  0002858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001940b  00000000  00000000  0004bfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4cc  00000000  00000000  000653f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001318bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  00131900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00136960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a5d4 	.word	0x0800a5d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a5d4 	.word	0x0800a5d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <icm20948_init>:
*       and sensor calibration.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_init(I2C_HandleTypeDef *hi2c)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t device_id = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73bb      	strb	r3, [r7, #14]
	status = icm20948_who_am_i(hi2c, &device_id);
 80004c4:	f107 030e 	add.w	r3, r7, #14
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f928 	bl	8000720 <icm20948_who_am_i>
 80004d0:	4603      	mov	r3, r0
 80004d2:	73fb      	strb	r3, [r7, #15]
    // Wait until the device is properly identified
    if(status == HAL_OK)
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d133      	bne.n	8000542 <icm20948_init+0x8a>
    {
    	if (device_id == ICM20948_ID)
 80004da:	7bbb      	ldrb	r3, [r7, #14]
 80004dc:	2bea      	cmp	r3, #234	@ 0xea
 80004de:	d12e      	bne.n	800053e <icm20948_init+0x86>
    	{
    		// Reset and wake up the device
			icm20948_device_reset(hi2c);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f000 f93d 	bl	8000760 <icm20948_device_reset>
			icm20948_wakeup(hi2c);
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 f958 	bl	800079c <icm20948_wakeup>

			// Configure clock source
			icm20948_clock_source(hi2c, 1);
 80004ec:	2101      	movs	r1, #1
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f9b6 	bl	8000860 <icm20948_clock_source>

			// Enable Output Data Rate alignment
			icm20948_odr_align_enable(hi2c);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 f9f8 	bl	80008ea <icm20948_odr_align_enable>

			// Enable SPI slave mode
			icm20948_spi_slave_enable(hi2c);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 f97f 	bl	80007fe <icm20948_spi_slave_enable>

			// Configure low-pass filters for gyroscope and accelerometer
			icm20948_gyro_low_pass_filter(hi2c, 0);
 8000500:	2100      	movs	r1, #0
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 fa22 	bl	800094c <icm20948_gyro_low_pass_filter>
			icm20948_accel_low_pass_filter(hi2c, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f000 fa61 	bl	80009d2 <icm20948_accel_low_pass_filter>

			// Configure sample rate dividers
			icm20948_gyro_sample_rate_divider(hi2c, 0);
 8000510:	2100      	movs	r1, #0
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f000 faa0 	bl	8000a58 <icm20948_gyro_sample_rate_divider>
			icm20948_accel_sample_rate_divider(hi2c, 0);
 8000518:	2100      	movs	r1, #0
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fab6 	bl	8000a8c <icm20948_accel_sample_rate_divider>

			// Calibrate gyroscope and accelerometer
			icm20948_gyro_calibration(hi2c);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 faed 	bl	8000b00 <icm20948_gyro_calibration>
			icm20948_accel_calibration(hi2c);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 fb94 	bl	8000c54 <icm20948_accel_calibration>

			// Set full-scale ranges for gyroscope and accelerometer
			icm20948_gyro_full_scale_select(hi2c, _2000dps);
 800052c:	2103      	movs	r1, #3
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 fcd2 	bl	8000ed8 <icm20948_gyro_full_scale_select>
			icm20948_accel_full_scale_select(hi2c, _16g);
 8000534:	2103      	movs	r1, #3
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fd32 	bl	8000fa0 <icm20948_accel_full_scale_select>
 800053c:	e001      	b.n	8000542 <icm20948_init+0x8a>
    	}
    	else
    	{
    		status = HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	73fb      	strb	r3, [r7, #15]
    	}
    }

    return status;
 8000542:	7bfb      	ldrb	r3, [r7, #15]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <icm20948_gyro_read>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param data: Pointer to an axises struct where the gyroscope data will be stored.
* @retval None
*/
void icm20948_gyro_read(I2C_HandleTypeDef *hi2c, axises* data)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af04      	add	r7, sp, #16
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[6];

    // Read 6 bytes from the gyroscope data registers
    HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, raw_data, 6, HAL_MAX_DELAY);
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800055a:	9302      	str	r3, [sp, #8]
 800055c:	2306      	movs	r3, #6
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	2233      	movs	r2, #51	@ 0x33
 800056a:	21d0      	movs	r1, #208	@ 0xd0
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f004 f919 	bl	80047a4 <HAL_I2C_Mem_Read>

    // Convert raw data to signed 16-bit integers and scale to floating-point
    data->x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8000572:	7a3b      	ldrb	r3, [r7, #8]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	b21a      	sxth	r2, r3
 8000578:	7a7b      	ldrb	r3, [r7, #9]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	ee07 3a90 	vmov	s15, r3
 8000584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	edc3 7a00 	vstr	s15, [r3]
    data->y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 800058e:	7abb      	ldrb	r3, [r7, #10]
 8000590:	021b      	lsls	r3, r3, #8
 8000592:	b21a      	sxth	r2, r3
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	b21b      	sxth	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 80005aa:	7b3b      	ldrb	r3, [r7, #12]
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	7b7b      	ldrb	r3, [r7, #13]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	ee07 3a90 	vmov	s15, r3
 80005bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <icm20948_accel_read>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param data: Pointer to an axises struct where the accelerometer data will be stored.
* @retval None
*/
void icm20948_accel_read(I2C_HandleTypeDef *hi2c, axises* data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af04      	add	r7, sp, #16
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[6];

    // Read 6 bytes from the accelerometer data registers
    HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, raw_data, 6, HAL_MAX_DELAY);
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	2306      	movs	r3, #6
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	222d      	movs	r2, #45	@ 0x2d
 80005ee:	21d0      	movs	r1, #208	@ 0xd0
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f004 f8d7 	bl	80047a4 <HAL_I2C_Mem_Read>

    // Convert raw data to signed 16-bit integers and scale to floating-point
    data->x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 80005f6:	7a3b      	ldrb	r3, [r7, #8]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	7a7b      	ldrb	r3, [r7, #9]
 80005fe:	b21b      	sxth	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	b21b      	sxth	r3, r3
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	edc3 7a00 	vstr	s15, [r3]
    data->y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8000612:	7abb      	ldrb	r3, [r7, #10]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	b21a      	sxth	r2, r3
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	b21b      	sxth	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b21b      	sxth	r3, r3
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z = (int16_t)((raw_data[4] << 8) | raw_data[5]) + accel_scale_factor;
 800062e:	7b3b      	ldrb	r3, [r7, #12]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7b7b      	ldrb	r3, [r7, #13]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <icm20948_accel_read+0x8c>)
 8000646:	edd3 7a00 	vldr	s15, [r3]
 800064a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	edc3 7a02 	vstr	s15, [r3, #8]
    // Add scale factor because calibration function offset gravity acceleration.
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000009c 	.word	0x2000009c

08000660 <icm20948_gyro_read_dps>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param data: Pointer to an axises struct where the gyroscope data will be stored.
* @retval None
*/
void icm20948_gyro_read_dps(I2C_HandleTypeDef *hi2c, axises* data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    icm20948_gyro_read(hi2c, data);
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff6d 	bl	800054c <icm20948_gyro_read>

    // Apply the scale factor to convert to dps
    data->x /= gyro_scale_factor;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	edd3 6a00 	vldr	s13, [r3]
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <icm20948_gyro_read_dps+0x5c>)
 800067a:	ed93 7a00 	vldr	s14, [r3]
 800067e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	edc3 7a00 	vstr	s15, [r3]
    data->y /= gyro_scale_factor;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	edd3 6a01 	vldr	s13, [r3, #4]
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <icm20948_gyro_read_dps+0x5c>)
 8000690:	ed93 7a00 	vldr	s14, [r3]
 8000694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z /= gyro_scale_factor;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <icm20948_gyro_read_dps+0x5c>)
 80006a6:	ed93 7a00 	vldr	s14, [r3]
 80006aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000098 	.word	0x20000098

080006c0 <icm20948_accel_read_g>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param data: Pointer to an axises struct where the accelerometer data will be stored.
* @retval None
*/
void icm20948_accel_read_g(I2C_HandleTypeDef *hi2c, axises* data)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
    icm20948_accel_read(hi2c, data);
 80006ca:	6839      	ldr	r1, [r7, #0]
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff7f 	bl	80005d0 <icm20948_accel_read>

    // Apply the scale factor to convert to g
    data->x /= accel_scale_factor;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	edd3 6a00 	vldr	s13, [r3]
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <icm20948_accel_read_g+0x5c>)
 80006da:	ed93 7a00 	vldr	s14, [r3]
 80006de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	edc3 7a00 	vstr	s15, [r3]
    data->y /= accel_scale_factor;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <icm20948_accel_read_g+0x5c>)
 80006f0:	ed93 7a00 	vldr	s14, [r3]
 80006f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z /= accel_scale_factor;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	edd3 6a02 	vldr	s13, [r3, #8]
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <icm20948_accel_read_g+0x5c>)
 8000706:	ed93 7a00 	vldr	s14, [r3]
 800070a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000009c 	.word	0x2000009c

08000720 <icm20948_who_am_i>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param device_id: Pointer to a variable where the read device ID will be stored.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_who_am_i(I2C_HandleTypeDef *hi2c, uint8_t *device_id)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af04      	add	r7, sp, #16
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    //uint8_t reg = B0_WHO_AM_I;
    uint8_t id;

    // WHO_AM_I register'ını okuma
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2301      	movs	r3, #1
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	f107 030e 	add.w	r3, r7, #14
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2200      	movs	r2, #0
 800073e:	21d0      	movs	r1, #208	@ 0xd0
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f004 f82f 	bl	80047a4 <HAL_I2C_Mem_Read>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <icm20948_who_am_i+0x36>
        *device_id = id; // Okunan değeri döndür
 8000750:	7bba      	ldrb	r2, [r7, #14]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <icm20948_device_reset>:
* @note Writes 0x80 to the PWR_MGMT_1 register to reset and configure the device.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_device_reset(I2C_HandleTypeDef *hi2c)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af04      	add	r7, sp, #16
 8000766:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	//uint8_t reg_value = DEVICE_RESET_BIT;

	status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B0_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t*)DEVICE_RESET_BIT, 1, HAL_MAX_DELAY);
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076c:	9302      	str	r3, [sp, #8]
 800076e:	2301      	movs	r3, #1
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	2301      	movs	r3, #1
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2206      	movs	r2, #6
 800077a:	21d0      	movs	r1, #208	@ 0xd0
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f003 ff17 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000782:	4603      	mov	r3, r0
 8000784:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK) {
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <icm20948_device_reset+0x32>
		HAL_Delay(100); // Reset işlemi sonrası cihazın yeniden başlatılması için kısa bir gecikme
 800078c:	2064      	movs	r0, #100	@ 0x64
 800078e:	f001 f9ab 	bl	8001ae8 <HAL_Delay>
	}

	return status;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <icm20948_wakeup>:
* @note Clears the SLEEP bit in the PWR_MGMT_1 register.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_wakeup(I2C_HandleTypeDef *hi2c)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t reg_value;

	// Read the current value of PWR_MGMT_1 register
	status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a8:	9302      	str	r3, [sp, #8]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f107 030e 	add.w	r3, r7, #14
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	2206      	movs	r2, #6
 80007b8:	21d0      	movs	r1, #208	@ 0xd0
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f003 fff2 	bl	80047a4 <HAL_I2C_Mem_Read>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK) {
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d114      	bne.n	80007f4 <icm20948_wakeup+0x58>
		reg_value &= ~0x40; // Clear the SLEEP bit (bit 6)
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	73bb      	strb	r3, [r7, #14]
		// Write the updated value back to PWR_MGMT_1 register
		status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B0_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	2301      	movs	r3, #1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	f107 030e 	add.w	r3, r7, #14
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2301      	movs	r3, #1
 80007e6:	2206      	movs	r2, #6
 80007e8:	21d0      	movs	r1, #208	@ 0xd0
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f003 fee0 	bl	80045b0 <HAL_I2C_Mem_Write>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <icm20948_spi_slave_enable>:
* @note Sets the SPI_EN bit in the USER_CTRL register.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_spi_slave_enable(I2C_HandleTypeDef *hi2c)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b088      	sub	sp, #32
 8000802:	af04      	add	r7, sp, #16
 8000804:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint8_t reg_value;

    // Read the current value of USER_CTRL register
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8000806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	2301      	movs	r3, #1
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	f107 030e 	add.w	r3, r7, #14
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2301      	movs	r3, #1
 8000818:	2203      	movs	r2, #3
 800081a:	21d0      	movs	r1, #208	@ 0xd0
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f003 ffc1 	bl	80047a4 <HAL_I2C_Mem_Read>
 8000822:	4603      	mov	r3, r0
 8000824:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <icm20948_spi_slave_enable+0x32>
        return status;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	e013      	b.n	8000858 <icm20948_spi_slave_enable+0x5a>
    }

    // Set the SPI_EN bit (bit 5)
    reg_value |= (1 << 5);	// TODO: ????
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]

    // Write the updated value back to the USER_CTRL register
    return HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B0_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 800083a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2301      	movs	r3, #1
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f107 030e 	add.w	r3, r7, #14
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2203      	movs	r2, #3
 800084e:	21d0      	movs	r1, #208	@ 0xd0
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f003 fead 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000856:	4603      	mov	r3, r0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <icm20948_clock_source>:
*                    - 6: Reserved.
*                    - 7: Stops the clock and keeps timing reset.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_clock_source(I2C_HandleTypeDef *hi2c, uint8_t clk_source)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t reg_value;

    // Ensure clk_source is within valid range (0-7)
    if (clk_source > 7) {
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d901      	bls.n	8000876 <icm20948_clock_source+0x16>
        return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e035      	b.n	80008e2 <icm20948_clock_source+0x82>
    }

    // Read the current value of PWR_MGMT_1 register
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	f107 030e 	add.w	r3, r7, #14
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	2206      	movs	r2, #6
 800088a:	21d0      	movs	r1, #208	@ 0xd0
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f003 ff89 	bl	80047a4 <HAL_I2C_Mem_Read>
 8000892:	4603      	mov	r3, r0
 8000894:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <icm20948_clock_source+0x40>
        return status;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	e020      	b.n	80008e2 <icm20948_clock_source+0x82>
    }

    // Clear the CLKSEL bits (bits 2:0) and set the new clock source
    reg_value &= ~0x07;        // Clear bits 2:0
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	f023 0307 	bic.w	r3, r3, #7
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	73bb      	strb	r3, [r7, #14]
    reg_value |= (clk_source & 0x07); // Set new clock source
 80008aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]

    // Write the updated value back to PWR_MGMT_1 register
    status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B0_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	f107 030e 	add.w	r3, r7, #14
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2206      	movs	r2, #6
 80008d4:	21d0      	movs	r1, #208	@ 0xd0
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f003 fe6a 	bl	80045b0 <HAL_I2C_Mem_Write>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]

    return status;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <icm20948_odr_align_enable>:
* @note Sets the ODR_ALIGN_EN bit in the ODR_ALIGN register.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_odr_align_enable(I2C_HandleTypeDef *hi2c)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b088      	sub	sp, #32
 80008ee:	af04      	add	r7, sp, #16
 80008f0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint8_t reg_value;

    // Read the current value of the ODR_ALIGN register
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B2_ODR_ALIGN_EN, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	2301      	movs	r3, #1
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	f107 030e 	add.w	r3, r7, #14
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	2209      	movs	r2, #9
 8000906:	21d0      	movs	r1, #208	@ 0xd0
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f003 ff4b 	bl	80047a4 <HAL_I2C_Mem_Read>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <icm20948_odr_align_enable+0x32>
        return status;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	e013      	b.n	8000944 <icm20948_odr_align_enable+0x5a>
    }

    // Set the ODR_ALIGN_EN bit (bit 0)
    reg_value |= 0x01;
 800091c:	7bbb      	ldrb	r3, [r7, #14]
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	73bb      	strb	r3, [r7, #14]

    // Write the updated value back to the ODR_ALIGN register
    return HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_ODR_ALIGN_EN, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	f107 030e 	add.w	r3, r7, #14
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2301      	movs	r3, #1
 8000938:	2209      	movs	r2, #9
 800093a:	21d0      	movs	r1, #208	@ 0xd0
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f003 fe37 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <icm20948_gyro_low_pass_filter>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param config: Filter configuration value (0-7). Refer to the datasheet for valid configurations.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_gyro_low_pass_filter(I2C_HandleTypeDef *hi2c, uint8_t config)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af04      	add	r7, sp, #16
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t reg_value;

    // Ensure config value is within the valid range (0-7)
    if (config > 7) {
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b07      	cmp	r3, #7
 800095c:	d901      	bls.n	8000962 <icm20948_gyro_low_pass_filter+0x16>
        return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e033      	b.n	80009ca <icm20948_gyro_low_pass_filter+0x7e>
    }

    // Read the current value of the GYRO_CONFIG_1 register
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B2_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	9302      	str	r3, [sp, #8]
 8000968:	2301      	movs	r3, #1
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	f107 030e 	add.w	r3, r7, #14
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2201      	movs	r2, #1
 8000976:	21d0      	movs	r1, #208	@ 0xd0
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f003 ff13 	bl	80047a4 <HAL_I2C_Mem_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <icm20948_gyro_low_pass_filter+0x40>
        return status;
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	e01e      	b.n	80009ca <icm20948_gyro_low_pass_filter+0x7e>
    }

    // Clear the GYRO_DLPFCFG bits (bits 2:0) and set the new configuration
    reg_value &= ~0x07;        // Clear bits 2:0
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	f023 0307 	bic.w	r3, r3, #7
 8000992:	b2db      	uxtb	r3, r3
 8000994:	73bb      	strb	r3, [r7, #14]
    reg_value |= (config & 0x07); // Set new configuration
 8000996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	b25a      	sxtb	r2, r3
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	73bb      	strb	r3, [r7, #14]

    // Write the updated value back to the GYRO_CONFIG_1 register
    return HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2301      	movs	r3, #1
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	f107 030e 	add.w	r3, r7, #14
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2301      	movs	r3, #1
 80009be:	2201      	movs	r2, #1
 80009c0:	21d0      	movs	r1, #208	@ 0xd0
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f003 fdf4 	bl	80045b0 <HAL_I2C_Mem_Write>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <icm20948_accel_low_pass_filter>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param config: Filter configuration value (0-7). Refer to the datasheet for valid configurations.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_accel_low_pass_filter(I2C_HandleTypeDef *hi2c, uint8_t config)
 {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b088      	sub	sp, #32
 80009d6:	af04      	add	r7, sp, #16
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	460b      	mov	r3, r1
 80009dc:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t reg_value;

    // Ensure config value is within the valid range (0-7)
    if (config > 7) {
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d901      	bls.n	80009e8 <icm20948_accel_low_pass_filter+0x16>
        return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e033      	b.n	8000a50 <icm20948_accel_low_pass_filter+0x7e>
    }

    // Read the current value of the ACCEL_CONFIG_2 register
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B2_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2301      	movs	r3, #1
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	f107 030e 	add.w	r3, r7, #14
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	2214      	movs	r2, #20
 80009fc:	21d0      	movs	r1, #208	@ 0xd0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f003 fed0 	bl	80047a4 <HAL_I2C_Mem_Read>
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <icm20948_accel_low_pass_filter+0x40>
        return status;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	e01e      	b.n	8000a50 <icm20948_accel_low_pass_filter+0x7e>
    }

    // Clear the ACCEL_DLPFCFG bits (bits 2:0) and set the new configuration
    reg_value &= ~0x07;        // Clear bits 2:0
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	f023 0307 	bic.w	r3, r3, #7
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	73bb      	strb	r3, [r7, #14]
    reg_value |= (config & 0x07); // Set new configuration
 8000a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	b25a      	sxtb	r2, r3
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	73bb      	strb	r3, [r7, #14]

    // Write the updated value back to the ACCEL_CONFIG_2 register
    return HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f107 030e 	add.w	r3, r7, #14
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2214      	movs	r2, #20
 8000a46:	21d0      	movs	r1, #208	@ 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f003 fdb1 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000a4e:	4603      	mov	r3, r0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <icm20948_gyro_sample_rate_divider>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param divider: Sample rate divider value (0-255). Refer to the datasheet for valid configurations.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_gyro_sample_rate_divider(I2C_HandleTypeDef *hi2c, uint8_t divider)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af04      	add	r7, sp, #16
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;

    // Write the divider value to the GYRO_SMPLRT_DIV register
    status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_GYRO_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &divider, 1, HAL_MAX_DELAY);
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	1cfb      	adds	r3, r7, #3
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	2200      	movs	r2, #0
 8000a76:	21d0      	movs	r1, #208	@ 0xd0
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f003 fd99 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]

    return status;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <icm20948_accel_sample_rate_divider>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param divider: Sample rate divider value (0-65535). Refer to the datasheet for valid configurations.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_accel_sample_rate_divider(I2C_HandleTypeDef *hi2c, uint16_t divider)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t reg_values[2];

    // Split the 16-bit divider into two 8-bit values
    reg_values[0] = (uint8_t)(divider >> 8); // Higher byte
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	733b      	strb	r3, [r7, #12]
    reg_values[1] = (uint8_t)(divider & 0xFF); // Lower byte
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	737b      	strb	r3, [r7, #13]

    // Write the higher byte to the ACCEL_SMPLRT_DIV_1 register
    status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_ACCEL_SMPLRT_DIV_1, I2C_MEMADD_SIZE_8BIT, &reg_values[0], 1, HAL_MAX_DELAY);
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	2210      	movs	r2, #16
 8000abc:	21d0      	movs	r1, #208	@ 0xd0
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f003 fd76 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <icm20948_accel_sample_rate_divider+0x46>
        return status;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	e011      	b.n	8000af6 <icm20948_accel_sample_rate_divider+0x6a>
    }

    // Write the lower byte to the ACCEL_SMPLRT_DIV_2 register
    status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_ACCEL_SMPLRT_DIV_2, I2C_MEMADD_SIZE_8BIT, &reg_values[1], 1, HAL_MAX_DELAY);
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	2211      	movs	r2, #17
 8000ae8:	21d0      	movs	r1, #208	@ 0xd0
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f003 fd60 	bl	80045b0 <HAL_I2C_Mem_Write>
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]

    return status;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <icm20948_gyro_calibration>:
* @note Computes gyroscope biases by averaging multiple samples and writes these biases
*       to the hardware gyroscope offset registers.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval None
*/
void icm20948_gyro_calibration(I2C_HandleTypeDef *hi2c) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	@ 0x40
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	6078      	str	r0, [r7, #4]
    axises temp;
    int32_t gyro_bias[3] = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
    uint8_t gyro_offset[6] = {0};
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	823b      	strh	r3, [r7, #16]

    // Collect 100 samples to compute the bias
    for (int i = 0; i < 100; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b20:	e035      	b.n	8000b8e <icm20948_gyro_calibration+0x8e>
        icm20948_gyro_read(hi2c, &temp);
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4619      	mov	r1, r3
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fd0f 	bl	800054c <icm20948_gyro_read>
        gyro_bias[0] += temp.x;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b44:	ee17 3a90 	vmov	r3, s15
 8000b48:	617b      	str	r3, [r7, #20]
        gyro_bias[1] += temp.y;
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b54:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b60:	ee17 3a90 	vmov	r3, s15
 8000b64:	61bb      	str	r3, [r7, #24]
        gyro_bias[2] += temp.z;
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	ee07 3a90 	vmov	s15, r3
 8000b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	ee17 3a90 	vmov	r3, s15
 8000b80:	61fb      	str	r3, [r7, #28]
        HAL_Delay(10); // Add small delay between samples
 8000b82:	200a      	movs	r0, #10
 8000b84:	f000 ffb0 	bl	8001ae8 <HAL_Delay>
    for (int i = 0; i < 100; i++) {
 8000b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b90:	2b63      	cmp	r3, #99	@ 0x63
 8000b92:	ddc6      	ble.n	8000b22 <icm20948_gyro_calibration+0x22>
    }

    // Compute the average bias
    gyro_bias[0] /= 100;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4a2e      	ldr	r2, [pc, #184]	@ (8000c50 <icm20948_gyro_calibration+0x150>)
 8000b98:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9c:	1152      	asrs	r2, r2, #5
 8000b9e:	17db      	asrs	r3, r3, #31
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
    gyro_bias[1] /= 100;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c50 <icm20948_gyro_calibration+0x150>)
 8000ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bac:	1152      	asrs	r2, r2, #5
 8000bae:	17db      	asrs	r3, r3, #31
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	61bb      	str	r3, [r7, #24]
    gyro_bias[2] /= 100;
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	4a26      	ldr	r2, [pc, #152]	@ (8000c50 <icm20948_gyro_calibration+0x150>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	1152      	asrs	r2, r2, #5
 8000bbe:	17db      	asrs	r3, r3, #31
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	61fb      	str	r3, [r7, #28]

    // Convert biases to the format required by the hardware (LSB)
    gyro_offset[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da00      	bge.n	8000bce <icm20948_gyro_calibration+0xce>
 8000bcc:	3303      	adds	r3, #3
 8000bce:	109b      	asrs	r3, r3, #2
 8000bd0:	121b      	asrs	r3, r3, #8
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	733b      	strb	r3, [r7, #12]
    gyro_offset[1] = (-gyro_bias[0] / 4) & 0xFF;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	425b      	negs	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da00      	bge.n	8000be0 <icm20948_gyro_calibration+0xe0>
 8000bde:	3303      	adds	r3, #3
 8000be0:	109b      	asrs	r3, r3, #2
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	737b      	strb	r3, [r7, #13]
    gyro_offset[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	425b      	negs	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da00      	bge.n	8000bf0 <icm20948_gyro_calibration+0xf0>
 8000bee:	3303      	adds	r3, #3
 8000bf0:	109b      	asrs	r3, r3, #2
 8000bf2:	121b      	asrs	r3, r3, #8
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	73bb      	strb	r3, [r7, #14]
    gyro_offset[3] = (-gyro_bias[1] / 4) & 0xFF;
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	da00      	bge.n	8000c02 <icm20948_gyro_calibration+0x102>
 8000c00:	3303      	adds	r3, #3
 8000c02:	109b      	asrs	r3, r3, #2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	73fb      	strb	r3, [r7, #15]
    gyro_offset[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da00      	bge.n	8000c12 <icm20948_gyro_calibration+0x112>
 8000c10:	3303      	adds	r3, #3
 8000c12:	109b      	asrs	r3, r3, #2
 8000c14:	121b      	asrs	r3, r3, #8
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	743b      	strb	r3, [r7, #16]
    gyro_offset[5] = (-gyro_bias[2] / 4) & 0xFF;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da00      	bge.n	8000c24 <icm20948_gyro_calibration+0x124>
 8000c22:	3303      	adds	r3, #3
 8000c24:	109b      	asrs	r3, r3, #2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	747b      	strb	r3, [r7, #17]

    // Write biases to gyroscope offset registers
    HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, gyro_offset, 6, HAL_MAX_DELAY);
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	2306      	movs	r3, #6
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	21d0      	movs	r1, #208	@ 0xd0
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f003 fcb5 	bl	80045b0 <HAL_I2C_Mem_Write>
}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	51eb851f 	.word	0x51eb851f

08000c54 <icm20948_accel_calibration>:
* @note Computes accelerometer biases by averaging multiple samples and writes these biases
*       to the hardware accelerometer offset registers.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval None
*/
void icm20948_accel_calibration(I2C_HandleTypeDef *hi2c) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b096      	sub	sp, #88	@ 0x58
 8000c58:	af04      	add	r7, sp, #16
 8000c5a:	6078      	str	r0, [r7, #4]
    axises temp;
    uint8_t* temp2;
    uint8_t* temp3;
    uint8_t* temp4;

    int32_t accel_bias[3] = {0};
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
    int32_t accel_bias_reg[3] = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
    uint8_t accel_offset[6] = {0};
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	823b      	strh	r3, [r7, #16]

    // Collect 100 samples to compute the bias
    for (int i = 0; i < 100; i++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c80:	e035      	b.n	8000cee <icm20948_accel_calibration+0x9a>
        icm20948_accel_read(hi2c, &temp);
 8000c82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c86:	4619      	mov	r1, r3
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fca1 	bl	80005d0 <icm20948_accel_read>
        accel_bias[0] += temp.x;
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c98:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca4:	ee17 3a90 	vmov	r3, s15
 8000ca8:	623b      	str	r3, [r7, #32]
        accel_bias[1] += temp.y;
 8000caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cb4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 3a90 	vmov	r3, s15
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
        accel_bias[2] += temp.z;
 8000cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cdc:	ee17 3a90 	vmov	r3, s15
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
        HAL_Delay(10); // Add small delay between samples
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f000 ff00 	bl	8001ae8 <HAL_Delay>
    for (int i = 0; i < 100; i++) {
 8000ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cea:	3301      	adds	r3, #1
 8000cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8000cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cf0:	2b63      	cmp	r3, #99	@ 0x63
 8000cf2:	ddc6      	ble.n	8000c82 <icm20948_accel_calibration+0x2e>
    }

    // Compute the average bias
    accel_bias[0] /= 100;
 8000cf4:	6a3b      	ldr	r3, [r7, #32]
 8000cf6:	4a76      	ldr	r2, [pc, #472]	@ (8000ed0 <icm20948_accel_calibration+0x27c>)
 8000cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfc:	1152      	asrs	r2, r2, #5
 8000cfe:	17db      	asrs	r3, r3, #31
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= 100;
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	4a72      	ldr	r2, [pc, #456]	@ (8000ed0 <icm20948_accel_calibration+0x27c>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1152      	asrs	r2, r2, #5
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    accel_bias[2] /= 100;
 8000d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d16:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed0 <icm20948_accel_calibration+0x27c>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1152      	asrs	r2, r2, #5
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint8_t mask_bit[3] = {0, 0, 0};
 8000d24:	4a6b      	ldr	r2, [pc, #428]	@ (8000ed4 <icm20948_accel_calibration+0x280>)
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	8019      	strh	r1, [r3, #0]
 8000d30:	3302      	adds	r3, #2
 8000d32:	0c12      	lsrs	r2, r2, #16
 8000d34:	701a      	strb	r2, [r3, #0]

    HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B1_XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &temp2, 2, HAL_MAX_DELAY);
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2214      	movs	r2, #20
 8000d4a:	21d0      	movs	r1, #208	@ 0xd0
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f003 fd29 	bl	80047a4 <HAL_I2C_Mem_Read>
    accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8000d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d5a:	3201      	adds	r2, #1
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
    mask_bit[0] = temp2[1] & 0x01;
 8000d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d64:	3301      	adds	r3, #1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	723b      	strb	r3, [r7, #8]

    HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B1_YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &temp3, 2, HAL_MAX_DELAY);
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2302      	movs	r3, #2
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	2217      	movs	r2, #23
 8000d84:	21d0      	movs	r1, #208	@ 0xd0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f003 fd0c 	bl	80047a4 <HAL_I2C_Mem_Read>
    accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d94:	3201      	adds	r2, #1
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
	mask_bit[1] = temp3[1] & 0x01;
 8000d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d9e:	3301      	adds	r3, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	727b      	strb	r3, [r7, #9]

	HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B1_ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &temp4, 2, HAL_MAX_DELAY);
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	2302      	movs	r3, #2
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	221a      	movs	r2, #26
 8000dbe:	21d0      	movs	r1, #208	@ 0xd0
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f003 fcef 	bl	80047a4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8000dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dce:	3201      	adds	r2, #1
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61fb      	str	r3, [r7, #28]
	mask_bit[2] = temp4[1] & 0x01;
 8000dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd8:	3301      	adds	r3, #1
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	72bb      	strb	r3, [r7, #10]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da00      	bge.n	8000dee <icm20948_accel_calibration+0x19a>
 8000dec:	3307      	adds	r3, #7
 8000dee:	10db      	asrs	r3, r3, #3
 8000df0:	425b      	negs	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	da00      	bge.n	8000e00 <icm20948_accel_calibration+0x1ac>
 8000dfe:	3307      	adds	r3, #7
 8000e00:	10db      	asrs	r3, r3, #3
 8000e02:	425b      	negs	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da00      	bge.n	8000e12 <icm20948_accel_calibration+0x1be>
 8000e10:	3307      	adds	r3, #7
 8000e12:	10db      	asrs	r3, r3, #3
 8000e14:	425b      	negs	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	61fb      	str	r3, [r7, #28]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	121b      	asrs	r3, r3, #8
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	733b      	strb	r3, [r7, #12]
	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f023 0301 	bic.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	737b      	strb	r3, [r7, #13]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8000e2e:	7b7a      	ldrb	r2, [r7, #13]
 8000e30:	7a3b      	ldrb	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	737b      	strb	r3, [r7, #13]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	121b      	asrs	r3, r3, #8
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	73bb      	strb	r3, [r7, #14]
	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	73fb      	strb	r3, [r7, #15]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	7a7b      	ldrb	r3, [r7, #9]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	73fb      	strb	r3, [r7, #15]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	121b      	asrs	r3, r3, #8
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	743b      	strb	r3, [r7, #16]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	747b      	strb	r3, [r7, #17]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8000e6a:	7c7a      	ldrb	r2, [r7, #17]
 8000e6c:	7abb      	ldrb	r3, [r7, #10]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	747b      	strb	r3, [r7, #17]

    // Write biases to accelerometer offset registers
    HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B1_XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, accel_offset[0], 2, HAL_MAX_DELAY);
 8000e74:	7b3b      	ldrb	r3, [r7, #12]
 8000e76:	461a      	mov	r2, r3
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	2214      	movs	r2, #20
 8000e88:	21d0      	movs	r1, #208	@ 0xd0
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f003 fb90 	bl	80045b0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B1_YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, accel_offset[2], 2, HAL_MAX_DELAY);
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	461a      	mov	r2, r3
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e98:	9302      	str	r3, [sp, #8]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	9200      	str	r2, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2217      	movs	r2, #23
 8000ea4:	21d0      	movs	r1, #208	@ 0xd0
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f003 fb82 	bl	80045b0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B1_ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, accel_offset[4], 2, HAL_MAX_DELAY);
 8000eac:	7c3b      	ldrb	r3, [r7, #16]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	221a      	movs	r2, #26
 8000ec0:	21d0      	movs	r1, #208	@ 0xd0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f003 fb74 	bl	80045b0 <HAL_I2C_Mem_Write>
}
 8000ec8:	bf00      	nop
 8000eca:	3748      	adds	r7, #72	@ 0x48
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	51eb851f 	.word	0x51eb851f
 8000ed4:	0800a5ec 	.word	0x0800a5ec

08000ed8 <icm20948_gyro_full_scale_select>:
*                    - _1000dps: ±1000 degrees per second
*                    - _2000dps: ±2000 degrees per second
* @retval None
*/
void icm20948_gyro_full_scale_select(I2C_HandleTypeDef *hi2c, gyro_full_scale full_scale)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_value;

    // Read the current value of the GYRO_CONFIG_1 register
    if (HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B2_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 030f 	add.w	r3, r7, #15
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	21d0      	movs	r1, #208	@ 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f003 fc52 	bl	80047a4 <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d13d      	bne.n	8000f82 <icm20948_gyro_full_scale_select+0xaa>
        // Clear the GYRO_FS_SEL bits (bits 3:2) and set the new full-scale range
        //reg_value &= ~0x0C;           // Clear bits 3:2
        //reg_value |= (full_scale << 2); // Set new full-scale range

        switch (full_scale)
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d82c      	bhi.n	8000f66 <icm20948_gyro_full_scale_select+0x8e>
 8000f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f14 <icm20948_gyro_full_scale_select+0x3c>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f31 	.word	0x08000f31
 8000f1c:	08000f43 	.word	0x08000f43
 8000f20:	08000f55 	.word	0x08000f55
        {
        	case _250dps:
        		reg_value |= 0x00;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	73fb      	strb	r3, [r7, #15]
        		gyro_scale_factor = 131.0;
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <icm20948_gyro_full_scale_select+0xb4>)
 8000f2a:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <icm20948_gyro_full_scale_select+0xb8>)
 8000f2c:	601a      	str	r2, [r3, #0]
        		break;
 8000f2e:	e01a      	b.n	8000f66 <icm20948_gyro_full_scale_select+0x8e>
        	case _500dps:
        		reg_value |= 0x02;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	73fb      	strb	r3, [r7, #15]
				gyro_scale_factor = 65.5;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <icm20948_gyro_full_scale_select+0xb4>)
 8000f3c:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <icm20948_gyro_full_scale_select+0xbc>)
 8000f3e:	601a      	str	r2, [r3, #0]
				break;
 8000f40:	e011      	b.n	8000f66 <icm20948_gyro_full_scale_select+0x8e>
        	case _1000dps:
				reg_value |= 0x04;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	73fb      	strb	r3, [r7, #15]
				gyro_scale_factor = 32.8;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <icm20948_gyro_full_scale_select+0xb4>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <icm20948_gyro_full_scale_select+0xc0>)
 8000f50:	601a      	str	r2, [r3, #0]
				break;
 8000f52:	e008      	b.n	8000f66 <icm20948_gyro_full_scale_select+0x8e>
			case _2000dps:
				reg_value |= 0x06;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 0306 	orr.w	r3, r3, #6
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
				gyro_scale_factor = 16.4;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <icm20948_gyro_full_scale_select+0xb4>)
 8000f60:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <icm20948_gyro_full_scale_select+0xc4>)
 8000f62:	601a      	str	r2, [r3, #0]
				break;
 8000f64:	bf00      	nop
        }

        // Write the updated value back to the GYRO_CONFIG_1 register
        HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2201      	movs	r2, #1
 8000f7a:	21d0      	movs	r1, #208	@ 0xd0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f003 fb17 	bl	80045b0 <HAL_I2C_Mem_Write>
    }
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000098 	.word	0x20000098
 8000f90:	43030000 	.word	0x43030000
 8000f94:	42830000 	.word	0x42830000
 8000f98:	42033333 	.word	0x42033333
 8000f9c:	41833333 	.word	0x41833333

08000fa0 <icm20948_accel_full_scale_select>:
*                    - _8g: ±8g
*                    - _16g: ±16g
* @retval None
*/
void icm20948_accel_full_scale_select(I2C_HandleTypeDef *hi2c, accel_full_scale full_scale)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_value;

    // Read the current value of the ACCEL_CONFIG register
    if (HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B2_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 030f 	add.w	r3, r7, #15
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	21d0      	movs	r1, #208	@ 0xd0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f003 fbee 	bl	80047a4 <HAL_I2C_Mem_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d141      	bne.n	8001052 <icm20948_accel_full_scale_select+0xb2>
        // Clear the ACCEL_FS_SEL bits (bits 3:2) and set the new full-scale range
        //reg_value &= ~0x0C;           // Clear bits 3:2
        //reg_value |= (full_scale << 2); // Set new full-scale range
    	switch (full_scale)
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d830      	bhi.n	8001036 <icm20948_accel_full_scale_select+0x96>
 8000fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fdc <icm20948_accel_full_scale_select+0x3c>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ffb 	.word	0x08000ffb
 8000fe4:	0800100f 	.word	0x0800100f
 8000fe8:	08001023 	.word	0x08001023
    	{
			case _2g:
				reg_value |= 0x00;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	73fb      	strb	r3, [r7, #15]
				accel_scale_factor = 16384;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <icm20948_accel_full_scale_select+0xbc>)
 8000ff2:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000ff6:	601a      	str	r2, [r3, #0]
				break;
 8000ff8:	e01d      	b.n	8001036 <icm20948_accel_full_scale_select+0x96>
			case _4g:
				reg_value |= 0x02;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	73fb      	strb	r3, [r7, #15]
				accel_scale_factor = 8192;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <icm20948_accel_full_scale_select+0xbc>)
 8001006:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800100a:	601a      	str	r2, [r3, #0]
				break;
 800100c:	e013      	b.n	8001036 <icm20948_accel_full_scale_select+0x96>
			case _8g:
				reg_value |= 0x04;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	b2db      	uxtb	r3, r3
 8001016:	73fb      	strb	r3, [r7, #15]
				accel_scale_factor = 4096;
 8001018:	4b10      	ldr	r3, [pc, #64]	@ (800105c <icm20948_accel_full_scale_select+0xbc>)
 800101a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800101e:	601a      	str	r2, [r3, #0]
				break;
 8001020:	e009      	b.n	8001036 <icm20948_accel_full_scale_select+0x96>
			case _16g:
				reg_value |= 0x06;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f043 0306 	orr.w	r3, r3, #6
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
				accel_scale_factor = 2048;
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <icm20948_accel_full_scale_select+0xbc>)
 800102e:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001032:	601a      	str	r2, [r3, #0]
				break;
 8001034:	bf00      	nop
    	}

        // Write the updated value back to the ACCEL_CONFIG register
        HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B2_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &reg_value, 1, HAL_MAX_DELAY);
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	2214      	movs	r2, #20
 800104a:	21d0      	movs	r1, #208	@ 0xd0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f003 faaf 	bl	80045b0 <HAL_I2C_Mem_Write>
    }
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000009c 	.word	0x2000009c

08001060 <check_System_Status_Action>:

// TODO: System Init Fonksiyonu oluştur...
// TODO: System adımlarını oluştur...

void check_System_Status_Action(sysController_t *this)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	switch(this->sys_Status){
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d032      	beq.n	80010d6 <check_System_Status_Action+0x76>
 8001070:	2b02      	cmp	r3, #2
 8001072:	dc46      	bgt.n	8001102 <check_System_Status_Action+0xa2>
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <check_System_Status_Action+0x1e>
 8001078:	2b01      	cmp	r3, #1
 800107a:	d016      	beq.n	80010aa <check_System_Status_Action+0x4a>
 800107c:	e041      	b.n	8001102 <check_System_Status_Action+0xa2>
	case SYS_SUCCESS:
		LED_OFF(LD3_GPIO_Port, LD3_Pin);	// Turn off for Orange Led (PD13)
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001084:	482a      	ldr	r0, [pc, #168]	@ (8001130 <check_System_Status_Action+0xd0>)
 8001086:	f001 f801 	bl	800208c <HAL_GPIO_WritePin>
		LED_OFF(LD5_GPIO_Port, LD5_Pin);	// Turn off for Red Led (PD14)
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001090:	4827      	ldr	r0, [pc, #156]	@ (8001130 <check_System_Status_Action+0xd0>)
 8001092:	f000 fffb 	bl	800208c <HAL_GPIO_WritePin>
		LED_ON(LD4_GPIO_Port, LD4_Pin);		// Turn On for Green Led (PD12)
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109c:	4824      	ldr	r0, [pc, #144]	@ (8001130 <check_System_Status_Action+0xd0>)
 800109e:	f000 fff5 	bl	800208c <HAL_GPIO_WritePin>
		this-> ErrorCode = 0x00;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	771a      	strb	r2, [r3, #28]
		break;
 80010a8:	e03e      	b.n	8001128 <check_System_Status_Action+0xc8>

	case SYS_FAULT:
		LED_ON(LD3_GPIO_Port, LD3_Pin);		// Turn on for Orange Led (PD13)
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <check_System_Status_Action+0xd0>)
 80010b2:	f000 ffeb 	bl	800208c <HAL_GPIO_WritePin>
		LED_OFF(LD5_GPIO_Port, LD5_Pin);	// Turn off for Red Led (PD14)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010bc:	481c      	ldr	r0, [pc, #112]	@ (8001130 <check_System_Status_Action+0xd0>)
 80010be:	f000 ffe5 	bl	800208c <HAL_GPIO_WritePin>
		LED_OFF(LD4_GPIO_Port, LD4_Pin);	// Turn off for Green Led (PD12)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010c8:	4819      	ldr	r0, [pc, #100]	@ (8001130 <check_System_Status_Action+0xd0>)
 80010ca:	f000 ffdf 	bl	800208c <HAL_GPIO_WritePin>
		this-> ErrorCode = 0x0F;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	220f      	movs	r2, #15
 80010d2:	771a      	strb	r2, [r3, #28]
		break;
 80010d4:	e028      	b.n	8001128 <check_System_Status_Action+0xc8>

	case SYS_ERROR:
		LED_OFF(LD3_GPIO_Port, LD3_Pin);		// Turn off for Orange Led (PD13)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010dc:	4814      	ldr	r0, [pc, #80]	@ (8001130 <check_System_Status_Action+0xd0>)
 80010de:	f000 ffd5 	bl	800208c <HAL_GPIO_WritePin>
		LED_ON(LD5_GPIO_Port, LD5_Pin);			// Turn on for Red Led (PD14)
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010e8:	4811      	ldr	r0, [pc, #68]	@ (8001130 <check_System_Status_Action+0xd0>)
 80010ea:	f000 ffcf 	bl	800208c <HAL_GPIO_WritePin>
		LED_OFF(LD4_GPIO_Port, LD4_Pin);		// Turn off for Green Led (PD12)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f4:	480e      	ldr	r0, [pc, #56]	@ (8001130 <check_System_Status_Action+0xd0>)
 80010f6:	f000 ffc9 	bl	800208c <HAL_GPIO_WritePin>
		this-> ErrorCode = 0xFF;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	22ff      	movs	r2, #255	@ 0xff
 80010fe:	771a      	strb	r2, [r3, #28]
		// TODO: Kırmızı led blinkleyebilir...
		break;
 8001100:	e012      	b.n	8001128 <check_System_Status_Action+0xc8>

	default:
		LED_OFF(LD3_GPIO_Port, LD3_Pin);		// Turn off for Orange Led (PD13)
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <check_System_Status_Action+0xd0>)
 800110a:	f000 ffbf 	bl	800208c <HAL_GPIO_WritePin>
		LED_OFF(LD5_GPIO_Port, LD5_Pin);		// Turn off for Red Led (PD14)
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <check_System_Status_Action+0xd0>)
 8001116:	f000 ffb9 	bl	800208c <HAL_GPIO_WritePin>
		LED_OFF(LD4_GPIO_Port, LD4_Pin);		// Turn off for Green Led (PD12)
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <check_System_Status_Action+0xd0>)
 8001122:	f000 ffb3 	bl	800208c <HAL_GPIO_WritePin>
		break;
 8001126:	bf00      	nop
	}
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40020c00 	.word	0x40020c00

08001134 <system_Init>:
*       Based on the initialization status, it updates the system status and moves to the next step.
* @param this: Pointer to the system controller structure.
* @retval None
*/
void system_Init(sysController_t *this)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	this->init_Step = IMU_INIT;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	709a      	strb	r2, [r3, #2]

	switch(this->init_Step)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	789b      	ldrb	r3, [r3, #2]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d11d      	bne.n	8001186 <system_Init+0x52>
	{
		case IMU_INIT:
			this->status = icm20948_init(ICM20948_I2C_CH);
 800114a:	4811      	ldr	r0, [pc, #68]	@ (8001190 <system_Init+0x5c>)
 800114c:	f7ff f9b4 	bl	80004b8 <icm20948_init>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	70da      	strb	r2, [r3, #3]
			if(this->status == HAL_OK){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <system_Init+0x3a>
				this->sys_Status = SYS_SUCCESS;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
				this->sys_Step = IMU_READ;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	705a      	strb	r2, [r3, #1]
				this->sys_Status = SYS_ERROR;
			}
			else{
				this->sys_Status = SYS_FAULT;
			}
			break;
 800116c:	e00a      	b.n	8001184 <system_Init+0x50>
			else if (this->status == HAL_ERROR) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	78db      	ldrb	r3, [r3, #3]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <system_Init+0x4a>
				this->sys_Status = SYS_ERROR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	701a      	strb	r2, [r3, #0]
			break;
 800117c:	e002      	b.n	8001184 <system_Init+0x50>
				this->sys_Status = SYS_FAULT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
			break;
 8001184:	bf00      	nop


	}
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000a0 	.word	0x200000a0

08001194 <system_Controller>:
* @note This function performs IMU data reading and dataset preparation steps.
* @param this: Pointer to the system controller structure.
* @retval None
*/
void system_Controller(sysController_t *this)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

	switch(this->sys_Step)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <system_Controller+0x16>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d013      	beq.n	80011d0 <system_Controller+0x3c>

		//case default:
			//this->sys_Step = SYS_WAIT;

	}
}
 80011a8:	e019      	b.n	80011de <system_Controller+0x4a>
			icm20948_gyro_read_dps(ICM20948_I2C_CH, &this->gyro_datas);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <system_Controller+0x54>)
 80011b2:	f7ff fa55 	bl	8000660 <icm20948_gyro_read_dps>
			icm20948_accel_read_g(ICM20948_I2C_CH, &this->accel_datas);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3310      	adds	r3, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <system_Controller+0x54>)
 80011be:	f7ff fa7f 	bl	80006c0 <icm20948_accel_read_g>
			this->sys_Status = SYS_SUCCESS;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
			this->sys_Step = SET_DATASET;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	705a      	strb	r2, [r3, #1]
			break;
 80011ce:	e006      	b.n	80011de <system_Controller+0x4a>
			this->sys_Status = SYS_SUCCESS;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
			this->sys_Step = IMU_READ;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	705a      	strb	r2, [r3, #1]
			break;
 80011dc:	bf00      	nop
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200000a0 	.word	0x200000a0

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f000 fc08 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f820 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 f91c 	bl	8001434 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011fc:	f000 f886 	bl	800130c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001200:	f000 f8b2 	bl	8001368 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001204:	f000 f8e0 	bl	80013c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001208:	f008 fd8e 	bl	8009d28 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  //bool id_ok = icm20948_who_am_i();
  system_Init(&controller);
 800120c:	4809      	ldr	r0, [pc, #36]	@ (8001234 <main+0x48>)
 800120e:	f7ff ff91 	bl	8001134 <system_Init>
  check_System_Status_Action(&controller);
 8001212:	4808      	ldr	r0, [pc, #32]	@ (8001234 <main+0x48>)
 8001214:	f7ff ff24 	bl	8001060 <check_System_Status_Action>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001218:	f008 fdac 	bl	8009d74 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    system_Controller(&controller);
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <main+0x48>)
 800121e:	f7ff ffb9 	bl	8001194 <system_Controller>
    check_System_Status_Action(&controller);	// TODO: Yeni bir task oluşturup eş zamanlı sürekli kontrol etmesi lazım örn RTOS
 8001222:	4804      	ldr	r0, [pc, #16]	@ (8001234 <main+0x48>)
 8001224:	f7ff ff1c 	bl	8001060 <check_System_Status_Action>

    //check_icm20948(&controller);		// Bu sonktionu başka bir fonskiyonda case içinde adım adım çağıracak şekilde yapabilirsin...
    //check_ak09916(&controller);
    //reset_icm20948(&controller);
    HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122c:	f000 fc5c 	bl	8001ae8 <HAL_Delay>
    MX_USB_HOST_Process();
 8001230:	bf00      	nop
 8001232:	e7f1      	b.n	8001218 <main+0x2c>
 8001234:	20000194 	.word	0x20000194

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f009 f936 	bl	800a4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <SystemClock_Config+0xcc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <SystemClock_Config+0xcc>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <SystemClock_Config+0xd0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <SystemClock_Config+0xd0>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <SystemClock_Config+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a8:	2308      	movs	r3, #8
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b6:	2307      	movs	r3, #7
 80012b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fcf6 	bl	8005cb0 <HAL_RCC_OscConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ca:	f000 f9b1 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2105      	movs	r1, #5
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 ff57 	bl	80061a0 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012f8:	f000 f99a 	bl	8001630 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	@ 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_I2C1_Init+0x50>)
 800134a:	f002 ffed 	bl	8004328 <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f96c 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000a0 	.word	0x200000a0
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <MX_I2S3_Init+0x54>)
 800136e:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <MX_I2S3_Init+0x58>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_I2S3_Init+0x54>)
 8001374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001378:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <MX_I2S3_Init+0x54>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_I2S3_Init+0x54>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <MX_I2S3_Init+0x54>)
 8001388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800138c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_I2S3_Init+0x54>)
 8001390:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <MX_I2S3_Init+0x5c>)
 8001392:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_I2S3_Init+0x54>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_I2S3_Init+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_I2S3_Init+0x54>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_I2S3_Init+0x54>)
 80013a8:	f003 ffe2 	bl	8005370 <HAL_I2S_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80013b2:	f000 f93d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000f4 	.word	0x200000f4
 80013c0:	40003c00 	.word	0x40003c00
 80013c4:	00017700 	.word	0x00017700

080013c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_SPI1_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <MX_SPI1_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_SPI1_Init+0x64>)
 80013d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_SPI1_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_SPI1_Init+0x64>)
 80013f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_SPI1_Init+0x64>)
 8001414:	220a      	movs	r2, #10
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_SPI1_Init+0x64>)
 800141a:	f005 fa0f 	bl	800683c <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001424:	f000 f904 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000013c 	.word	0x2000013c
 8001430:	40013000 	.word	0x40013000

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	@ 0x30
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a71      	ldr	r2, [pc, #452]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b6f      	ldr	r3, [pc, #444]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	4b6b      	ldr	r3, [pc, #428]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a6a      	ldr	r2, [pc, #424]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b64      	ldr	r3, [pc, #400]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a63      	ldr	r2, [pc, #396]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b61      	ldr	r3, [pc, #388]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a55      	ldr	r2, [pc, #340]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a4e      	ldr	r2, [pc, #312]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <MX_GPIO_Init+0x1e4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2108      	movs	r1, #8
 80014f6:	4849      	ldr	r0, [pc, #292]	@ (800161c <MX_GPIO_Init+0x1e8>)
 80014f8:	f000 fdc8 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2101      	movs	r1, #1
 8001500:	4847      	ldr	r0, [pc, #284]	@ (8001620 <MX_GPIO_Init+0x1ec>)
 8001502:	f000 fdc3 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001506:	2200      	movs	r2, #0
 8001508:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800150c:	4845      	ldr	r0, [pc, #276]	@ (8001624 <MX_GPIO_Init+0x1f0>)
 800150e:	f000 fdbd 	bl	800208c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001512:	2308      	movs	r3, #8
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	483c      	ldr	r0, [pc, #240]	@ (800161c <MX_GPIO_Init+0x1e8>)
 800152a:	f000 fc13 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4836      	ldr	r0, [pc, #216]	@ (8001620 <MX_GPIO_Init+0x1ec>)
 8001546:	f000 fc05 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800154a:	2308      	movs	r3, #8
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155a:	2305      	movs	r3, #5
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	482e      	ldr	r0, [pc, #184]	@ (8001620 <MX_GPIO_Init+0x1ec>)
 8001566:	f000 fbf5 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800156e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	482a      	ldr	r0, [pc, #168]	@ (8001628 <MX_GPIO_Init+0x1f4>)
 8001580:	f000 fbe8 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001584:	2304      	movs	r3, #4
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4825      	ldr	r0, [pc, #148]	@ (800162c <MX_GPIO_Init+0x1f8>)
 8001598:	f000 fbdc 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800159c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ae:	2305      	movs	r3, #5
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	481c      	ldr	r0, [pc, #112]	@ (800162c <MX_GPIO_Init+0x1f8>)
 80015ba:	f000 fbcb 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015be:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4813      	ldr	r0, [pc, #76]	@ (8001624 <MX_GPIO_Init+0x1f0>)
 80015d8:	f000 fbbc 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015dc:	2320      	movs	r3, #32
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <MX_GPIO_Init+0x1f0>)
 80015f0:	f000 fbb0 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015f8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_GPIO_Init+0x1e8>)
 800160a:	f000 fba3 	bl	8001d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	@ 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40021000 	.word	0x40021000
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167a:	2007      	movs	r0, #7
 800167c:	f000 fb28 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_I2C_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a17      	ldr	r2, [pc, #92]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016dc:	2304      	movs	r3, #4
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	@ (8001718 <HAL_I2C_MspInit+0x8c>)
 80016e8:	f000 fb34 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40005400 	.word	0x40005400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	@ 0x38
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a31      	ldr	r2, [pc, #196]	@ (800180c <HAL_I2S_MspInit+0xf0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d15a      	bne.n	8001802 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001750:	23c0      	movs	r3, #192	@ 0xc0
 8001752:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4618      	mov	r0, r3
 800175e:	f004 ff2b 	bl	80065b8 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001768:	f7ff ff62 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a26      	ldr	r2, [pc, #152]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 8001776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001790:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6313      	str	r3, [r2, #48]	@ 0x30
 8001798:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_I2S_MspInit+0xf4>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017c0:	2310      	movs	r3, #16
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d0:	2306      	movs	r3, #6
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	480e      	ldr	r0, [pc, #56]	@ (8001814 <HAL_I2S_MspInit+0xf8>)
 80017dc:	f000 faba 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017e0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f2:	2306      	movs	r3, #6
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4806      	ldr	r0, [pc, #24]	@ (8001818 <HAL_I2S_MspInit+0xfc>)
 80017fe:	f000 faa9 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	@ 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40003c00 	.word	0x40003c00
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020800 	.word	0x40020800

0800181c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <HAL_SPI_MspInit+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12b      	bne.n	8001896 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a10      	ldr	r2, [pc, #64]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001876:	23e0      	movs	r3, #224	@ 0xe0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <HAL_SPI_MspInit+0x8c>)
 8001892:	f000 fa5f 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40013000 	.word	0x40013000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <NMI_Handler+0x4>

080018b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <MemManage_Handler+0x4>

080018c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001902:	f000 f8d1 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <OTG_FS_IRQHandler+0x10>)
 8001912:	f000 feb5 	bl	8002680 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000618 	.word	0x20000618

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	@ (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f008 fdca 	bl	800a4e8 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20020000 	.word	0x20020000
 8001980:	00000400 	.word	0x00000400
 8001984:	20000234 	.word	0x20000234
 8001988:	20000b40 	.word	0x20000b40

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019b4:	f7ff ffea 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	@ (80019f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	@ (80019fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019de:	f008 fd89 	bl	800a4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fc03 	bl	80011ec <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019f4:	0800a61c 	.word	0x0800a61c
  ldr r2, =_sbss
 80019f8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019fc:	20000b40 	.word	0x20000b40

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f94f 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fe00 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f967 	bl	8001d3a <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a84:	f000 f92f 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000238 	.word	0x20000238

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000238 	.word	0x20000238

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e16b      	b.n	8002048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 815a 	bne.w	8002042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80b4 	beq.w	8002042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b60      	ldr	r3, [pc, #384]	@ (8002060 <HAL_GPIO_Init+0x30c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8002060 <HAL_GPIO_Init+0x30c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b5d      	ldr	r3, [pc, #372]	@ (8002060 <HAL_GPIO_Init+0x30c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8002064 <HAL_GPIO_Init+0x310>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	@ (8002068 <HAL_GPIO_Init+0x314>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a51      	ldr	r2, [pc, #324]	@ (800206c <HAL_GPIO_Init+0x318>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	@ (8002070 <HAL_GPIO_Init+0x31c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	@ (8002074 <HAL_GPIO_Init+0x320>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	@ (800207c <HAL_GPIO_Init+0x328>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_GPIO_Init+0x32c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x20e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <HAL_GPIO_Init+0x330>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x20a>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00e      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f5e:	2308      	movs	r3, #8
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4935      	ldr	r1, [pc, #212]	@ (8002064 <HAL_GPIO_Init+0x310>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002088 <HAL_GPIO_Init+0x334>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a32      	ldr	r2, [pc, #200]	@ (8002088 <HAL_GPIO_Init+0x334>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_GPIO_Init+0x334>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <HAL_GPIO_Init+0x334>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fee:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <HAL_GPIO_Init+0x334>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002012:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_GPIO_Init+0x334>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_GPIO_Init+0x334>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203c:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <HAL_GPIO_Init+0x334>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae90 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800
 8002084:	40021c00 	.word	0x40021c00
 8002088:	40013c00 	.word	0x40013c00

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e059      	b.n	8002184 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f007 fe7a 	bl	8009de4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020fe:	d102      	bne.n	8002106 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fc94 	bl	8006a38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7c1a      	ldrb	r2, [r3, #16]
 8002118:	f88d 2000 	strb.w	r2, [sp]
 800211c:	3304      	adds	r3, #4
 800211e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002120:	f004 fc15 	bl	800694e <USB_CoreInit>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e026      	b.n	8002184 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fc8c 	bl	8006a5a <USB_SetCurrentMode>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e017      	b.n	8002184 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7c1a      	ldrb	r2, [r3, #16]
 800215c:	f88d 2000 	strb.w	r2, [sp]
 8002160:	3304      	adds	r3, #4
 8002162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002164:	f004 fe2e 	bl	8006dc4 <USB_HostInit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e004      	b.n	8002184 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b08b      	sub	sp, #44	@ 0x2c
 8002190:	af04      	add	r7, sp, #16
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	4608      	mov	r0, r1
 8002196:	4611      	mov	r1, r2
 8002198:	461a      	mov	r2, r3
 800219a:	4603      	mov	r3, r0
 800219c:	70fb      	strb	r3, [r7, #3]
 800219e:	460b      	mov	r3, r1
 80021a0:	70bb      	strb	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80021a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_HCD_HC_Init+0x2c>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e09d      	b.n	80022f4 <HAL_HCD_HC_Init+0x168>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3319      	adds	r3, #25
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3314      	adds	r3, #20
 80021e4:	787a      	ldrb	r2, [r7, #1]
 80021e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3315      	adds	r3, #21
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3326      	adds	r3, #38	@ 0x26
 800220c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002210:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	78bb      	ldrb	r3, [r7, #2]
 8002216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800221a:	b2d8      	uxtb	r0, r3
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3316      	adds	r3, #22
 800222a:	4602      	mov	r2, r0
 800222c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fbc8 	bl	80029c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da0a      	bge.n	8002256 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3317      	adds	r3, #23
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e009      	b.n	800226a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3317      	adds	r3, #23
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 ff0c 	bl	800708c <USB_GetHostSpeed>
 8002274:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002276:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10b      	bne.n	8002296 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800227e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_HCD_HC_Init+0x10a>
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002290:	d901      	bls.n	8002296 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002292:	23bc      	movs	r3, #188	@ 0xbc
 8002294:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3318      	adds	r3, #24
 80022a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80022aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	b298      	uxth	r0, r3
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3328      	adds	r3, #40	@ 0x28
 80022c0:	4602      	mov	r2, r0
 80022c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	787c      	ldrb	r4, [r7, #1]
 80022ce:	78ba      	ldrb	r2, [r7, #2]
 80022d0:	78f9      	ldrb	r1, [r7, #3]
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4623      	mov	r3, r4
 80022e2:	f004 fefb 	bl	80070dc <USB_HC_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_HCD_HC_Halt+0x1e>
 8002316:	2302      	movs	r3, #2
 8002318:	e00f      	b.n	800233a <HAL_HCD_HC_Halt+0x3e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f005 fa8d 	bl	800784a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4603      	mov	r3, r0
 8002354:	70fb      	strb	r3, [r7, #3]
 8002356:	460b      	mov	r3, r1
 8002358:	70bb      	strb	r3, [r7, #2]
 800235a:	4613      	mov	r3, r2
 800235c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3317      	adds	r3, #23
 800236e:	78ba      	ldrb	r2, [r7, #2]
 8002370:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3326      	adds	r3, #38	@ 0x26
 8002382:	787a      	ldrb	r2, [r7, #1]
 8002384:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002386:	7c3b      	ldrb	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d114      	bne.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	332a      	adds	r3, #42	@ 0x2a
 800239c:	2203      	movs	r2, #3
 800239e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3319      	adds	r3, #25
 80023b0:	7f3a      	ldrb	r2, [r7, #28]
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e009      	b.n	80023ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	332a      	adds	r3, #42	@ 0x2a
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023ca:	787b      	ldrb	r3, [r7, #1]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	f200 8102 	bhi.w	80025d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80023d2:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080025c1 	.word	0x080025c1
 80023e0:	080024ad 	.word	0x080024ad
 80023e4:	08002537 	.word	0x08002537
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80023e8:	7c3b      	ldrb	r3, [r7, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	f040 80f5 	bne.w	80025da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80023f0:	78bb      	ldrb	r3, [r7, #2]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d12d      	bne.n	8002452 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80023f6:	8b3b      	ldrh	r3, [r7, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	333d      	adds	r3, #61	@ 0x3d
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	333d      	adds	r3, #61	@ 0x3d
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	332a      	adds	r3, #42	@ 0x2a
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800243a:	e0ce      	b.n	80025da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	332a      	adds	r3, #42	@ 0x2a
 800244c:	2202      	movs	r2, #2
 800244e:	701a      	strb	r2, [r3, #0]
      break;
 8002450:	e0c3      	b.n	80025da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	331a      	adds	r3, #26
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 80b8 	bne.w	80025da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	333c      	adds	r3, #60	@ 0x3c
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	332a      	adds	r3, #42	@ 0x2a
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
      break;
 8002494:	e0a1      	b.n	80025da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	332a      	adds	r3, #42	@ 0x2a
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
      break;
 80024aa:	e096      	b.n	80025da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024ac:	78bb      	ldrb	r3, [r7, #2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d120      	bne.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	333d      	adds	r3, #61	@ 0x3d
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	332a      	adds	r3, #42	@ 0x2a
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024dc:	e07e      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	332a      	adds	r3, #42	@ 0x2a
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]
      break;
 80024f2:	e073      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	333c      	adds	r3, #60	@ 0x3c
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	332a      	adds	r3, #42	@ 0x2a
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
      break;
 800251e:	e05d      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	332a      	adds	r3, #42	@ 0x2a
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
      break;
 8002534:	e052      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002536:	78bb      	ldrb	r3, [r7, #2]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d120      	bne.n	800257e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	333d      	adds	r3, #61	@ 0x3d
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	332a      	adds	r3, #42	@ 0x2a
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002566:	e039      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	332a      	adds	r3, #42	@ 0x2a
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
      break;
 800257c:	e02e      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	333c      	adds	r3, #60	@ 0x3c
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	332a      	adds	r3, #42	@ 0x2a
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
      break;
 80025a8:	e018      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	332a      	adds	r3, #42	@ 0x2a
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
      break;
 80025be:	e00d      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	332a      	adds	r3, #42	@ 0x2a
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
      break;
 80025d4:	e002      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025d6:	bf00      	nop
 80025d8:	e000      	b.n	80025dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	332c      	adds	r3, #44	@ 0x2c
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	8b39      	ldrh	r1, [r7, #24]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	3334      	adds	r3, #52	@ 0x34
 8002602:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	334c      	adds	r3, #76	@ 0x4c
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3338      	adds	r3, #56	@ 0x38
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3315      	adds	r3, #21
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	334d      	adds	r3, #77	@ 0x4d
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3310      	adds	r3, #16
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	1d19      	adds	r1, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	799b      	ldrb	r3, [r3, #6]
 800266e:	461a      	mov	r2, r3
 8002670:	f004 fe60 	bl	8007334 <USB_HC_StartXfer>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop

08002680 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fb55 	bl	8006d46 <USB_GetMode>
 800269c:	4603      	mov	r3, r0
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 80fb 	bne.w	800289a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fb18 	bl	8006cde <USB_ReadInterrupts>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80f1 	beq.w	8002898 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fb0f 	bl	8006cde <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ca:	d104      	bne.n	80026d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 faff 	bl	8006cde <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026ea:	d104      	bne.n	80026f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 faef 	bl	8006cde <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002706:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800270a:	d104      	bne.n	8002716 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002714:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fadf 	bl	8006cde <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d103      	bne.n	8002732 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2202      	movs	r2, #2
 8002730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fad1 	bl	8006cde <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002746:	d120      	bne.n	800278a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002750:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002762:	2110      	movs	r1, #16
 8002764:	6938      	ldr	r0, [r7, #16]
 8002766:	f004 f9c4 	bl	8006af2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800276a:	6938      	ldr	r0, [r7, #16]
 800276c:	f004 f9f3 	bl	8006b56 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7a5b      	ldrb	r3, [r3, #9]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d105      	bne.n	8002784 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fbe4 	bl	8006f4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f007 fbab 	bl	8009ee0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 faa5 	bl	8006cde <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800279a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800279e:	d102      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 fd4d 	bl	8004240 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fa97 	bl	8006cde <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d106      	bne.n	80027c8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f007 fb74 	bl	8009ea8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2208      	movs	r2, #8
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 fa86 	bl	8006cde <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027dc:	d139      	bne.n	8002852 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 f820 	bl	8007828 <USB_HC_ReadInterrupt>
 80027e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e025      	b.n	800283c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800281a:	d106      	bne.n	800282a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f905 	bl	8002a32 <HCD_HC_IN_IRQHandler>
 8002828:	e005      	b.n	8002836 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 ff67 	bl	8003704 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	795b      	ldrb	r3, [r3, #5]
 8002840:	461a      	mov	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4293      	cmp	r3, r2
 8002846:	d3d3      	bcc.n	80027f0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 fa41 	bl	8006cde <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b10      	cmp	r3, #16
 8002864:	d101      	bne.n	800286a <HAL_HCD_IRQHandler+0x1ea>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_HCD_IRQHandler+0x1ec>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d014      	beq.n	800289a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0210 	bic.w	r2, r2, #16
 800287e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 fbfe 	bl	8004082 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0210 	orr.w	r2, r2, #16
 8002894:	619a      	str	r2, [r3, #24]
 8002896:	e000      	b.n	800289a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002898:	bf00      	nop
    }
  }
}
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_HCD_Start+0x16>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e013      	b.n	80028de <HAL_HCD_Start+0x3e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2101      	movs	r1, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fba8 	bl	800701a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 f8a1 	bl	8006a16 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_HCD_Stop+0x16>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e00d      	b.n	8002918 <HAL_HCD_Stop+0x32>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 f8fb 	bl	8007b04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fb4a 	bl	8006fc6 <USB_ResetPort>
 8002932:	4603      	mov	r3, r0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	334c      	adds	r3, #76	@ 0x4c
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3338      	adds	r3, #56	@ 0x38
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fb8c 	bl	80070ba <USB_GetCurrentFrame>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 fb67 	bl	800708c <USB_GetHostSpeed>
 80029be:	4603      	mov	r3, r0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	331a      	adds	r3, #26
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331b      	adds	r3, #27
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3325      	adds	r3, #37	@ 0x25
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3324      	adds	r3, #36	@ 0x24
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 f957 	bl	8006d04 <USB_ReadChInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d11a      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2304      	movs	r3, #4
 8002a70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	334d      	adds	r3, #77	@ 0x4d
 8002a82:	2207      	movs	r2, #7
 8002a84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fedb 	bl	800784a <USB_HC_Halt>
 8002a94:	e09e      	b.n	8002bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 f930 	bl	8006d04 <USB_ReadChInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aae:	d11b      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334d      	adds	r3, #77	@ 0x4d
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 feb2 	bl	800784a <USB_HC_Halt>
 8002ae6:	e075      	b.n	8002bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 f907 	bl	8006d04 <USB_ReadChInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d11a      	bne.n	8002b36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2308      	movs	r3, #8
 8002b10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	334d      	adds	r3, #77	@ 0x4d
 8002b22:	2206      	movs	r2, #6
 8002b24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fe8b 	bl	800784a <USB_HC_Halt>
 8002b34:	e04e      	b.n	8002bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 f8e0 	bl	8006d04 <USB_ReadChInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4e:	d11b      	bne.n	8002b88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334d      	adds	r3, #77	@ 0x4d
 8002b74:	2209      	movs	r2, #9
 8002b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 fe62 	bl	800784a <USB_HC_Halt>
 8002b86:	e025      	b.n	8002bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 f8b7 	bl	8006d04 <USB_ReadChInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9c:	2b80      	cmp	r3, #128	@ 0x80
 8002b9e:	d119      	bne.n	8002bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	334d      	adds	r3, #77	@ 0x4d
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fe3b 	bl	800784a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 f891 	bl	8006d04 <USB_ReadChInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bec:	d112      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 fe27 	bl	800784a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c0e:	6093      	str	r3, [r2, #8]
 8002c10:	f000 bd75 	b.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 f871 	bl	8006d04 <USB_ReadChInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	f040 8128 	bne.w	8002e7e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331b      	adds	r3, #27
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d119      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	331b      	adds	r3, #27
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	0151      	lsls	r1, r2, #5
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	440a      	add	r2, r1
 8002c80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c88:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3330      	adds	r3, #48	@ 0x30
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	1ac9      	subs	r1, r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4403      	add	r3, r0
 8002cc6:	3338      	adds	r3, #56	@ 0x38
 8002cc8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	334d      	adds	r3, #77	@ 0x4d
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3344      	adds	r3, #68	@ 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3326      	adds	r3, #38	@ 0x26
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	3326      	adds	r3, #38	@ 0x26
 8002d2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d110      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 fd86 	bl	800784a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	e03d      	b.n	8002dce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3326      	adds	r3, #38	@ 0x26
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d00a      	beq.n	8002d7e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3326      	adds	r3, #38	@ 0x26
 8002d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d127      	bne.n	8002dce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	0151      	lsls	r1, r2, #5
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	440a      	add	r2, r1
 8002d94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d9c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	334c      	adds	r3, #76	@ 0x4c
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	334c      	adds	r3, #76	@ 0x4c
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f007 f897 	bl	8009efc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	799b      	ldrb	r3, [r3, #6]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d13b      	bne.n	8002e4e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	3338      	adds	r3, #56	@ 0x38
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4403      	add	r3, r0
 8002df6:	3328      	adds	r3, #40	@ 0x28
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	440b      	add	r3, r1
 8002dfc:	1e59      	subs	r1, r3, #1
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4403      	add	r3, r0
 8002e0c:	3328      	adds	r3, #40	@ 0x28
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8470 	beq.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	333c      	adds	r3, #60	@ 0x3c
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2d8      	uxtb	r0, r3
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	333c      	adds	r3, #60	@ 0x3c
 8002e46:	4602      	mov	r2, r0
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	f000 bc58 	b.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	333c      	adds	r3, #60	@ 0x3c
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	333c      	adds	r3, #60	@ 0x3c
 8002e76:	4602      	mov	r2, r0
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	f000 bc40 	b.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 ff3c 	bl	8006d04 <USB_ReadChInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d131      	bne.n	8002efa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	331a      	adds	r3, #26
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	f040 841f 	bne.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	331b      	adds	r3, #27
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334d      	adds	r3, #77	@ 0x4d
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f004 fcaa 	bl	800784a <USB_HC_Halt>
 8002ef6:	f000 bc02 	b.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fefe 	bl	8006d04 <USB_ReadChInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	f040 8305 	bne.w	800351e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2302      	movs	r3, #2
 8002f24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334d      	adds	r3, #77	@ 0x4d
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d114      	bne.n	8002f66 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334d      	adds	r3, #77	@ 0x4d
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	@ 0x4c
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e2cc      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334d      	adds	r3, #77	@ 0x4d
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d114      	bne.n	8002fa6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	334d      	adds	r3, #77	@ 0x4d
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334c      	adds	r3, #76	@ 0x4c
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e2ac      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	334d      	adds	r3, #77	@ 0x4d
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b07      	cmp	r3, #7
 8002fba:	d00b      	beq.n	8002fd4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	334d      	adds	r3, #77	@ 0x4d
 8002fcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fce:	2b09      	cmp	r3, #9
 8002fd0:	f040 80a6 	bne.w	8003120 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	334d      	adds	r3, #77	@ 0x4d
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3344      	adds	r3, #68	@ 0x44
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4403      	add	r3, r0
 8003008:	3344      	adds	r3, #68	@ 0x44
 800300a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3344      	adds	r3, #68	@ 0x44
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d943      	bls.n	80030aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3344      	adds	r3, #68	@ 0x44
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	331a      	adds	r3, #26
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d123      	bne.n	8003094 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	331b      	adds	r3, #27
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	331c      	adds	r3, #28
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	440a      	add	r2, r1
 800308a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	334c      	adds	r3, #76	@ 0x4c
 80030a4:	2204      	movs	r2, #4
 80030a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030a8:	e229      	b.n	80034fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334c      	adds	r3, #76	@ 0x4c
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3326      	adds	r3, #38	@ 0x26
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3326      	adds	r3, #38	@ 0x26
 80030e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 8209 	bne.w	80034fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003102:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800310a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800311e:	e1ee      	b.n	80034fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	334d      	adds	r3, #77	@ 0x4d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b05      	cmp	r3, #5
 8003134:	f040 80c8 	bne.w	80032c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	@ 0x4d
 8003148:	2202      	movs	r2, #2
 800314a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	331b      	adds	r3, #27
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 81ce 	bne.w	8003500 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3326      	adds	r3, #38	@ 0x26
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d16b      	bne.n	8003252 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3348      	adds	r3, #72	@ 0x48
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4403      	add	r3, r0
 800319a:	3348      	adds	r3, #72	@ 0x48
 800319c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3348      	adds	r3, #72	@ 0x48
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d943      	bls.n	800323c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3348      	adds	r3, #72	@ 0x48
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	331b      	adds	r3, #27
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3344      	adds	r3, #68	@ 0x44
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d809      	bhi.n	8003206 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	331c      	adds	r3, #28
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	0151      	lsls	r1, r2, #5
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	440a      	add	r2, r1
 800321c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003224:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	334c      	adds	r3, #76	@ 0x4c
 8003236:	2204      	movs	r2, #4
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e014      	b.n	8003266 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	334c      	adds	r3, #76	@ 0x4c
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e009      	b.n	8003266 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334c      	adds	r3, #76	@ 0x4c
 8003262:	2202      	movs	r2, #2
 8003264:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3326      	adds	r3, #38	@ 0x26
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3326      	adds	r3, #38	@ 0x26
 800328c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800328e:	2b02      	cmp	r3, #2
 8003290:	f040 8136 	bne.w	8003500 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c0:	461a      	mov	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e11b      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	334d      	adds	r3, #77	@ 0x4d
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	f040 8081 	bne.w	80033e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334d      	adds	r3, #77	@ 0x4d
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	331b      	adds	r3, #27
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	f040 80fa 	bne.w	8003500 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	334c      	adds	r3, #76	@ 0x4c
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	440a      	add	r2, r1
 8003336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800333a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	0151      	lsls	r1, r2, #5
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	440a      	add	r2, r1
 8003356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800335a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800335e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	0151      	lsls	r1, r2, #5
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	440a      	add	r2, r1
 8003376:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800337a:	f023 0320 	bic.w	r3, r3, #32
 800337e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3326      	adds	r3, #38	@ 0x26
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3326      	adds	r3, #38	@ 0x26
 80033a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	f040 80a9 	bne.w	8003500 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e08e      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334d      	adds	r3, #77	@ 0x4d
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d143      	bne.n	8003480 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334d      	adds	r3, #77	@ 0x4d
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334c      	adds	r3, #76	@ 0x4c
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3326      	adds	r3, #38	@ 0x26
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3326      	adds	r3, #38	@ 0x26
 8003446:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003448:	2b02      	cmp	r3, #2
 800344a:	d159      	bne.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003462:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800346a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e03f      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	334d      	adds	r3, #77	@ 0x4d
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d126      	bne.n	80034e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334d      	adds	r3, #77	@ 0x4d
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	@ 0x44
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1c59      	adds	r1, r3, #1
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4403      	add	r3, r0
 80034ca:	3344      	adds	r3, #68	@ 0x44
 80034cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	334c      	adds	r3, #76	@ 0x4c
 80034de:	2204      	movs	r2, #4
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e00d      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	334d      	adds	r3, #77	@ 0x4d
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f000 8100 	beq.w	80036fc <HCD_HC_IN_IRQHandler+0xcca>
 80034fc:	e000      	b.n	8003500 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334c      	adds	r3, #76	@ 0x4c
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f006 fcf0 	bl	8009efc <HAL_HCD_HC_NotifyURBChange_Callback>
 800351c:	e0ef      	b.n	80036fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fbec 	bl	8006d04 <USB_ReadChInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d12f      	bne.n	8003596 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	2340      	movs	r3, #64	@ 0x40
 8003546:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334d      	adds	r3, #77	@ 0x4d
 8003558:	2205      	movs	r2, #5
 800355a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	331a      	adds	r3, #26
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3344      	adds	r3, #68	@ 0x44
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f004 f95b 	bl	800784a <USB_HC_Halt>
 8003594:	e0b3      	b.n	80036fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fbb0 	bl	8006d04 <USB_ReadChInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	f040 80a7 	bne.w	80036fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3326      	adds	r3, #38	@ 0x26
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d11b      	bne.n	80035fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	3344      	adds	r3, #68	@ 0x44
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334d      	adds	r3, #77	@ 0x4d
 80035ea:	2204      	movs	r2, #4
 80035ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f927 	bl	800784a <USB_HC_Halt>
 80035fc:	e03f      	b.n	800367e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3326      	adds	r3, #38	@ 0x26
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3326      	adds	r3, #38	@ 0x26
 8003624:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003626:	2b02      	cmp	r3, #2
 8003628:	d129      	bne.n	800367e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3344      	adds	r3, #68	@ 0x44
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	799b      	ldrb	r3, [r3, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HCD_HC_IN_IRQHandler+0xc2a>
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	331b      	adds	r3, #27
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d110      	bne.n	800367e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	334d      	adds	r3, #77	@ 0x4d
 800366c:	2204      	movs	r2, #4
 800366e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f004 f8e6 	bl	800784a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	331b      	adds	r3, #27
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d129      	bne.n	80036e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	331b      	adds	r3, #27
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	0151      	lsls	r1, r2, #5
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	440a      	add	r2, r1
 80036be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2310      	movs	r3, #16
 80036f8:	6093      	str	r3, [r2, #8]
 80036fa:	e000      	b.n	80036fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80036fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f003 faee 	bl	8006d04 <USB_ReadChInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d11b      	bne.n	800376a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800373e:	461a      	mov	r2, r3
 8003740:	2304      	movs	r3, #4
 8003742:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	334d      	adds	r3, #77	@ 0x4d
 8003754:	2207      	movs	r2, #7
 8003756:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f004 f872 	bl	800784a <USB_HC_Halt>
 8003766:	f000 bc89 	b.w	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fac6 	bl	8006d04 <USB_ReadChInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 8082 	bne.w	8003888 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003790:	461a      	mov	r2, r3
 8003792:	2320      	movs	r3, #32
 8003794:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3319      	adds	r3, #25
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d124      	bne.n	80037f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3319      	adds	r3, #25
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	334d      	adds	r3, #77	@ 0x4d
 80037e4:	2203      	movs	r2, #3
 80037e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 f82a 	bl	800784a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	331a      	adds	r3, #26
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8437 	bne.w	800407c <HCD_HC_OUT_IRQHandler+0x978>
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	331b      	adds	r3, #27
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 842b 	bne.w	800407c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3326      	adds	r3, #38	@ 0x26
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d009      	beq.n	8003850 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	331b      	adds	r3, #27
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	334d      	adds	r3, #77	@ 0x4d
 8003860:	2203      	movs	r2, #3
 8003862:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f003 ffec 	bl	800784a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3344      	adds	r3, #68	@ 0x44
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e3f9      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fa37 	bl	8006d04 <USB_ReadChInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800389c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a0:	d111      	bne.n	80038c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 ffc3 	bl	800784a <USB_HC_Halt>
 80038c4:	e3da      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 fa18 	bl	8006d04 <USB_ReadChInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d168      	bne.n	80039b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3344      	adds	r3, #68	@ 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 fa02 	bl	8006d04 <USB_ReadChInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b40      	cmp	r3, #64	@ 0x40
 8003908:	d112      	bne.n	8003930 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3319      	adds	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392a:	461a      	mov	r2, r3
 800392c:	2340      	movs	r3, #64	@ 0x40
 800392e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	331b      	adds	r3, #27
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	331b      	adds	r3, #27
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	0151      	lsls	r1, r2, #5
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	440a      	add	r2, r1
 8003970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003978:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003986:	461a      	mov	r2, r3
 8003988:	2301      	movs	r3, #1
 800398a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334d      	adds	r3, #77	@ 0x4d
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f003 ff4e 	bl	800784a <USB_HC_Halt>
 80039ae:	e365      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 f9a3 	bl	8006d04 <USB_ReadChInterrupts>
 80039be:	4603      	mov	r3, r0
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	2b40      	cmp	r3, #64	@ 0x40
 80039c6:	d139      	bne.n	8003a3c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	334d      	adds	r3, #77	@ 0x4d
 80039d8:	2205      	movs	r2, #5
 80039da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	331a      	adds	r3, #26
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3319      	adds	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3344      	adds	r3, #68	@ 0x44
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 ff11 	bl	800784a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a34:	461a      	mov	r2, r3
 8003a36:	2340      	movs	r3, #64	@ 0x40
 8003a38:	6093      	str	r3, [r2, #8]
 8003a3a:	e31f      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 f95d 	bl	8006d04 <USB_ReadChInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d11a      	bne.n	8003a8a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	2308      	movs	r3, #8
 8003a64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334d      	adds	r3, #77	@ 0x4d
 8003a76:	2206      	movs	r2, #6
 8003a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fee1 	bl	800784a <USB_HC_Halt>
 8003a88:	e2f8      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 f936 	bl	8006d04 <USB_ReadChInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d144      	bne.n	8003b2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3344      	adds	r3, #68	@ 0x44
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	334d      	adds	r3, #77	@ 0x4d
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3319      	adds	r3, #25
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d114      	bne.n	8003b0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3318      	adds	r3, #24
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3319      	adds	r3, #25
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fe99 	bl	800784a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b24:	461a      	mov	r2, r3
 8003b26:	2310      	movs	r3, #16
 8003b28:	6093      	str	r3, [r2, #8]
 8003b2a:	e2a7      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 f8e5 	bl	8006d04 <USB_ReadChInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b40:	2b80      	cmp	r3, #128	@ 0x80
 8003b42:	f040 8083 	bne.w	8003c4c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	799b      	ldrb	r3, [r3, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d111      	bne.n	8003b72 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	334d      	adds	r3, #77	@ 0x4d
 8003b5e:	2207      	movs	r2, #7
 8003b60:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 fe6d 	bl	800784a <USB_HC_Halt>
 8003b70:	e062      	b.n	8003c38 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3344      	adds	r3, #68	@ 0x44
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4403      	add	r3, r0
 8003b92:	3344      	adds	r3, #68	@ 0x44
 8003b94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3344      	adds	r3, #68	@ 0x44
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d922      	bls.n	8003bf2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3344      	adds	r3, #68	@ 0x44
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334c      	adds	r3, #76	@ 0x4c
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	334c      	adds	r3, #76	@ 0x4c
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f006 f986 	bl	8009efc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bf0:	e022      	b.n	8003c38 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	334c      	adds	r3, #76	@ 0x4c
 8003c02:	2202      	movs	r2, #2
 8003c04:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	6093      	str	r3, [r2, #8]
 8003c4a:	e217      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 f855 	bl	8006d04 <USB_ReadChInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c64:	d11b      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	334d      	adds	r3, #77	@ 0x4d
 8003c76:	2209      	movs	r2, #9
 8003c78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f003 fde1 	bl	800784a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c94:	461a      	mov	r2, r3
 8003c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	e1ee      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 f82c 	bl	8006d04 <USB_ReadChInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	f040 81df 	bne.w	8004076 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	334d      	adds	r3, #77	@ 0x4d
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f040 8093 	bne.w	8003e08 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	334d      	adds	r3, #77	@ 0x4d
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	334c      	adds	r3, #76	@ 0x4c
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3326      	adds	r3, #38	@ 0x26
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d00b      	beq.n	8003d38 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3326      	adds	r3, #38	@ 0x26
 8003d30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	f040 8190 	bne.w	8004058 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	799b      	ldrb	r3, [r3, #6]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d115      	bne.n	8003d6c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	333d      	adds	r3, #61	@ 0x3d
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	f083 0301 	eor.w	r3, r3, #1
 8003d58:	b2d8      	uxtb	r0, r3
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	333d      	adds	r3, #61	@ 0x3d
 8003d68:	4602      	mov	r2, r0
 8003d6a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	799b      	ldrb	r3, [r3, #6]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 8171 	bne.w	8004058 <HCD_HC_OUT_IRQHandler+0x954>
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3334      	adds	r3, #52	@ 0x34
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8165 	beq.w	8004058 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3334      	adds	r3, #52	@ 0x34
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4403      	add	r3, r0
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	440b      	add	r3, r1
 8003db4:	1e59      	subs	r1, r3, #1
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4403      	add	r3, r0
 8003dc4:	3328      	adds	r3, #40	@ 0x28
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dcc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 813f 	beq.w	8004058 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	333d      	adds	r3, #61	@ 0x3d
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	333d      	adds	r3, #61	@ 0x3d
 8003e02:	4602      	mov	r2, r0
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e127      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334d      	adds	r3, #77	@ 0x4d
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d120      	bne.n	8003e60 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334d      	adds	r3, #77	@ 0x4d
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	331b      	adds	r3, #27
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 8107 	bne.w	8004058 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	334c      	adds	r3, #76	@ 0x4c
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e0fb      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334d      	adds	r3, #77	@ 0x4d
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d13a      	bne.n	8003eec <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	334d      	adds	r3, #77	@ 0x4d
 8003e86:	2202      	movs	r2, #2
 8003e88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334c      	adds	r3, #76	@ 0x4c
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	331b      	adds	r3, #27
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f040 80d1 	bne.w	8004058 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	331b      	adds	r3, #27
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6053      	str	r3, [r2, #4]
 8003eea:	e0b5      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	334d      	adds	r3, #77	@ 0x4d
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d114      	bne.n	8003f2c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334d      	adds	r3, #77	@ 0x4d
 8003f12:	2202      	movs	r2, #2
 8003f14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	334c      	adds	r3, #76	@ 0x4c
 8003f26:	2202      	movs	r2, #2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e095      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	334d      	adds	r3, #77	@ 0x4d
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d114      	bne.n	8003f6c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334d      	adds	r3, #77	@ 0x4d
 8003f52:	2202      	movs	r2, #2
 8003f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	334c      	adds	r3, #76	@ 0x4c
 8003f66:	2205      	movs	r2, #5
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e075      	b.n	8004058 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334d      	adds	r3, #77	@ 0x4d
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b07      	cmp	r3, #7
 8003f80:	d00a      	beq.n	8003f98 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	334d      	adds	r3, #77	@ 0x4d
 8003f92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	d170      	bne.n	800407a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334d      	adds	r3, #77	@ 0x4d
 8003fa8:	2202      	movs	r2, #2
 8003faa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3344      	adds	r3, #68	@ 0x44
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4403      	add	r3, r0
 8003fcc:	3344      	adds	r3, #68	@ 0x44
 8003fce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3344      	adds	r3, #68	@ 0x44
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d914      	bls.n	8004010 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3344      	adds	r3, #68	@ 0x44
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334c      	adds	r3, #76	@ 0x4c
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800400e:	e022      	b.n	8004056 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334c      	adds	r3, #76	@ 0x4c
 8004020:	2202      	movs	r2, #2
 8004022:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800403a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004042:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004050:	461a      	mov	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004056:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	334c      	adds	r3, #76	@ 0x4c
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f005 ff44 	bl	8009efc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004074:	e002      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004076:	bf00      	nop
 8004078:	e000      	b.n	800407c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800407a:	bf00      	nop
  }
}
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b08a      	sub	sp, #40	@ 0x28
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	0c5b      	lsrs	r3, r3, #17
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d004      	beq.n	80040c8 <HCD_RXQLVL_IRQHandler+0x46>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	f000 80b6 	beq.w	8004232 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040c6:	e0b7      	b.n	8004238 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80b3 	beq.w	8004236 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	332c      	adds	r3, #44	@ 0x2c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a7 	beq.w	8004236 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3338      	adds	r3, #56	@ 0x38
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	18d1      	adds	r1, r2, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4403      	add	r3, r0
 800410c:	3334      	adds	r3, #52	@ 0x34
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4299      	cmp	r1, r3
 8004112:	f200 8083 	bhi.w	800421c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	332c      	adds	r3, #44	@ 0x2c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	b292      	uxth	r2, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f002 fd7c 	bl	8006c2e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	332c      	adds	r3, #44	@ 0x2c
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	18d1      	adds	r1, r2, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4613      	mov	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4403      	add	r3, r0
 800415a:	332c      	adds	r3, #44	@ 0x2c
 800415c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	3338      	adds	r3, #56	@ 0x38
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	18d1      	adds	r1, r2, r3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4403      	add	r3, r0
 8004182:	3338      	adds	r3, #56	@ 0x38
 8004184:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	0cdb      	lsrs	r3, r3, #19
 8004196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3328      	adds	r3, #40	@ 0x28
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d13f      	bne.n	8004236 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d03c      	beq.n	8004236 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041da:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	333c      	adds	r3, #60	@ 0x3c
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2d8      	uxtb	r0, r3
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	333c      	adds	r3, #60	@ 0x3c
 8004216:	4602      	mov	r2, r0
 8004218:	701a      	strb	r2, [r3, #0]
      break;
 800421a:	e00c      	b.n	8004236 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334c      	adds	r3, #76	@ 0x4c
 800422c:	2204      	movs	r2, #4
 800422e:	701a      	strb	r2, [r3, #0]
      break;
 8004230:	e001      	b.n	8004236 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004236:	bf00      	nop
  }
}
 8004238:	bf00      	nop
 800423a:	3728      	adds	r7, #40	@ 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800426c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d10b      	bne.n	8004290 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f005 fe1e 	bl	8009ec4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b08      	cmp	r3, #8
 8004298:	d132      	bne.n	8004300 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d126      	bne.n	80042fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7a5b      	ldrb	r3, [r3, #9]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d113      	bne.n	80042dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80042ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042be:	d106      	bne.n	80042ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f002 fe40 	bl	8006f4c <USB_InitFSLSPClkSel>
 80042cc:	e011      	b.n	80042f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f002 fe39 	bl	8006f4c <USB_InitFSLSPClkSel>
 80042da:	e00a      	b.n	80042f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	79db      	ldrb	r3, [r3, #7]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d106      	bne.n	80042f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042ea:	461a      	mov	r2, r3
 80042ec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80042f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f005 fe10 	bl	8009f18 <HAL_HCD_PortEnabled_Callback>
 80042f8:	e002      	b.n	8004300 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f005 fe1a 	bl	8009f34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b20      	cmp	r3, #32
 8004308:	d103      	bne.n	8004312 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f043 0320 	orr.w	r3, r3, #32
 8004310:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6013      	str	r3, [r2, #0]
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e12b      	b.n	8004592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd f99c 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	@ 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800438c:	f002 f900 	bl	8006590 <HAL_RCC_GetPCLK1Freq>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a81      	ldr	r2, [pc, #516]	@ (800459c <HAL_I2C_Init+0x274>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d807      	bhi.n	80043ac <HAL_I2C_Init+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a80      	ldr	r2, [pc, #512]	@ (80045a0 <HAL_I2C_Init+0x278>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e006      	b.n	80043ba <HAL_I2C_Init+0x92>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a7d      	ldr	r2, [pc, #500]	@ (80045a4 <HAL_I2C_Init+0x27c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0e7      	b.n	8004592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a78      	ldr	r2, [pc, #480]	@ (80045a8 <HAL_I2C_Init+0x280>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0c9b      	lsrs	r3, r3, #18
 80043cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a6a      	ldr	r2, [pc, #424]	@ (800459c <HAL_I2C_Init+0x274>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d802      	bhi.n	80043fc <HAL_I2C_Init+0xd4>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	e009      	b.n	8004410 <HAL_I2C_Init+0xe8>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <HAL_I2C_Init+0x284>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	3301      	adds	r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	495c      	ldr	r1, [pc, #368]	@ (800459c <HAL_I2C_Init+0x274>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d819      	bhi.n	8004464 <HAL_I2C_Init+0x13c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e59      	subs	r1, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fbb1 f3f3 	udiv	r3, r1, r3
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004444:	400b      	ands	r3, r1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_I2C_Init+0x138>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e59      	subs	r1, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fbb1 f3f3 	udiv	r3, r1, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	e051      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004460:	2304      	movs	r3, #4
 8004462:	e04f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <HAL_I2C_Init+0x168>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	fbb0 f3f3 	udiv	r3, r0, r3
 800447e:	3301      	adds	r3, #1
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e012      	b.n	80044b6 <HAL_I2C_Init+0x18e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Init+0x196>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_I2C_Init+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1e58      	subs	r0, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e2:	e00f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6809      	ldr	r1, [r1, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6911      	ldr	r1, [r2, #16]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	000186a0 	.word	0x000186a0
 80045a0:	001e847f 	.word	0x001e847f
 80045a4:	003d08ff 	.word	0x003d08ff
 80045a8:	431bde83 	.word	0x431bde83
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	817b      	strh	r3, [r7, #10]
 80045c2:	460b      	mov	r3, r1
 80045c4:	813b      	strh	r3, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ca:	f7fd fa81 	bl	8001ad0 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b20      	cmp	r3, #32
 80045da:	f040 80d9 	bne.w	8004790 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2319      	movs	r3, #25
 80045e4:	2201      	movs	r2, #1
 80045e6:	496d      	ldr	r1, [pc, #436]	@ (800479c <HAL_I2C_Mem_Write+0x1ec>)
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fc8b 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0cc      	b.n	8004792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_I2C_Mem_Write+0x56>
 8004602:	2302      	movs	r3, #2
 8004604:	e0c5      	b.n	8004792 <HAL_I2C_Mem_Write+0x1e2>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d007      	beq.n	800462c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2221      	movs	r2, #33	@ 0x21
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2240      	movs	r2, #64	@ 0x40
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a4d      	ldr	r2, [pc, #308]	@ (80047a0 <HAL_I2C_Mem_Write+0x1f0>)
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800466e:	88f8      	ldrh	r0, [r7, #6]
 8004670:	893a      	ldrh	r2, [r7, #8]
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4603      	mov	r3, r0
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fac2 	bl	8004c08 <I2C_RequestMemoryWrite>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d052      	beq.n	8004730 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e081      	b.n	8004792 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fd50 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d107      	bne.n	80046b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e06b      	b.n	8004792 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d11b      	bne.n	8004730 <HAL_I2C_Mem_Write+0x180>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1aa      	bne.n	800468e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fd43 	bl	80051c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	2b04      	cmp	r3, #4
 800474e:	d107      	bne.n	8004760 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e016      	b.n	8004792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	00100002 	.word	0x00100002
 80047a0:	ffff0000 	.word	0xffff0000

080047a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08c      	sub	sp, #48	@ 0x30
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	4608      	mov	r0, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	461a      	mov	r2, r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	817b      	strh	r3, [r7, #10]
 80047b6:	460b      	mov	r3, r1
 80047b8:	813b      	strh	r3, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047be:	f7fd f987 	bl	8001ad0 <HAL_GetTick>
 80047c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	f040 8214 	bne.w	8004bfa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2319      	movs	r3, #25
 80047d8:	2201      	movs	r2, #1
 80047da:	497b      	ldr	r1, [pc, #492]	@ (80049c8 <HAL_I2C_Mem_Read+0x224>)
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fb91 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
 80047ea:	e207      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_I2C_Mem_Read+0x56>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e200      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d007      	beq.n	8004820 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800482e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2222      	movs	r2, #34	@ 0x22
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2240      	movs	r2, #64	@ 0x40
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a5b      	ldr	r2, [pc, #364]	@ (80049cc <HAL_I2C_Mem_Read+0x228>)
 8004860:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004862:	88f8      	ldrh	r0, [r7, #6]
 8004864:	893a      	ldrh	r2, [r7, #8]
 8004866:	8979      	ldrh	r1, [r7, #10]
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	4603      	mov	r3, r0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fa5e 	bl	8004d34 <I2C_RequestMemoryRead>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e1bc      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d113      	bne.n	80048b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e190      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d11b      	bne.n	80048f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e170      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d11b      	bne.n	8004932 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	e150      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004948:	e144      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	2b03      	cmp	r3, #3
 8004950:	f200 80f1 	bhi.w	8004b36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	2b01      	cmp	r3, #1
 800495a:	d123      	bne.n	80049a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fc79 	bl	8005258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e145      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049a2:	e117      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d14e      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b2:	2200      	movs	r2, #0
 80049b4:	4906      	ldr	r1, [pc, #24]	@ (80049d0 <HAL_I2C_Mem_Read+0x22c>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 faa4 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e11a      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
 80049c6:	bf00      	nop
 80049c8:	00100002 	.word	0x00100002
 80049cc:	ffff0000 	.word	0xffff0000
 80049d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a48:	e0c4      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a50:	2200      	movs	r2, #0
 8004a52:	496c      	ldr	r1, [pc, #432]	@ (8004c04 <HAL_I2C_Mem_Read+0x460>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa55 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cb      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aac:	2200      	movs	r2, #0
 8004aae:	4955      	ldr	r1, [pc, #340]	@ (8004c04 <HAL_I2C_Mem_Read+0x460>)
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fa27 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e09d      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b34:	e04e      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb8c 	bl	8005258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e058      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d124      	bne.n	8004bd4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f aeb6 	bne.w	800494a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3728      	adds	r7, #40	@ 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	00010004 	.word	0x00010004

08004c08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	817b      	strh	r3, [r7, #10]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	813b      	strh	r3, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f960 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00d      	beq.n	8004c66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c58:	d103      	bne.n	8004c62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e05f      	b.n	8004d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c66:	897b      	ldrh	r3, [r7, #10]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	6a3a      	ldr	r2, [r7, #32]
 8004c7a:	492d      	ldr	r1, [pc, #180]	@ (8004d30 <I2C_RequestMemoryWrite+0x128>)
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f9bb 	bl	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e04c      	b.n	8004d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca4:	6a39      	ldr	r1, [r7, #32]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fa46 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d107      	bne.n	8004cca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e02b      	b.n	8004d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d105      	bne.n	8004ce0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd4:	893b      	ldrh	r3, [r7, #8]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	611a      	str	r2, [r3, #16]
 8004cde:	e021      	b.n	8004d24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ce0:	893b      	ldrh	r3, [r7, #8]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf0:	6a39      	ldr	r1, [r7, #32]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fa20 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d107      	bne.n	8004d16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e005      	b.n	8004d26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d1a:	893b      	ldrh	r3, [r7, #8]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	00010002 	.word	0x00010002

08004d34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	817b      	strh	r3, [r7, #10]
 8004d46:	460b      	mov	r3, r1
 8004d48:	813b      	strh	r3, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8c2 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d94:	d103      	bne.n	8004d9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e0aa      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004da2:	897b      	ldrh	r3, [r7, #10]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	4952      	ldr	r1, [pc, #328]	@ (8004f00 <I2C_RequestMemoryRead+0x1cc>)
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f91d 	bl	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e097      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de0:	6a39      	ldr	r1, [r7, #32]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f9a8 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00d      	beq.n	8004e0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d107      	bne.n	8004e06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e076      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d105      	bne.n	8004e1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e10:	893b      	ldrh	r3, [r7, #8]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	611a      	str	r2, [r3, #16]
 8004e1a:	e021      	b.n	8004e60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e1c:	893b      	ldrh	r3, [r7, #8]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2c:	6a39      	ldr	r1, [r7, #32]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f982 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00d      	beq.n	8004e56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d107      	bne.n	8004e52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e050      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e56:	893b      	ldrh	r3, [r7, #8]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e62:	6a39      	ldr	r1, [r7, #32]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f967 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d107      	bne.n	8004e88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e035      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f82b 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec2:	d103      	bne.n	8004ecc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e013      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ed0:	897b      	ldrh	r3, [r7, #10]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	4906      	ldr	r1, [pc, #24]	@ (8004f00 <I2C_RequestMemoryRead+0x1cc>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f886 	bl	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	00010002 	.word	0x00010002

08004f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f14:	e048      	b.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f1c:	d044      	beq.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fc fdd7 	bl	8001ad0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d139      	bne.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10d      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	43da      	mvns	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	e00c      	b.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d116      	bne.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	f043 0220 	orr.w	r2, r3, #32
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e023      	b.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10d      	bne.n	8004fce <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	e00c      	b.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d093      	beq.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005006:	e071      	b.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005016:	d123      	bne.n	8005060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005026:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005030:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	f043 0204 	orr.w	r2, r3, #4
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e067      	b.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005066:	d041      	beq.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005068:	f7fc fd32 	bl	8001ad0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d136      	bne.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10c      	bne.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e00b      	b.n	80050ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e021      	b.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10c      	bne.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	43da      	mvns	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e00b      	b.n	8005128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	43da      	mvns	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f af6d 	bne.w	8005008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005144:	e034      	b.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 f8e3 	bl	8005312 <I2C_IsAcknowledgeFailed>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e034      	b.n	80051c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800515c:	d028      	beq.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515e:	f7fc fcb7 	bl	8001ad0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11d      	bne.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517e:	2b80      	cmp	r3, #128	@ 0x80
 8005180:	d016      	beq.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e007      	b.n	80051c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	d1c3      	bne.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d4:	e034      	b.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f89b 	bl	8005312 <I2C_IsAcknowledgeFailed>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e034      	b.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ec:	d028      	beq.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fc fc6f 	bl	8001ad0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11d      	bne.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d016      	beq.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e007      	b.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b04      	cmp	r3, #4
 800524c:	d1c3      	bne.n	80051d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005264:	e049      	b.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b10      	cmp	r3, #16
 8005272:	d119      	bne.n	80052a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0210 	mvn.w	r2, #16
 800527c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e030      	b.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a8:	f7fc fc12 	bl	8001ad0 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d302      	bcc.n	80052be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11d      	bne.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c8:	2b40      	cmp	r3, #64	@ 0x40
 80052ca:	d016      	beq.n	80052fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e007      	b.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005304:	2b40      	cmp	r3, #64	@ 0x40
 8005306:	d1ae      	bne.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005328:	d11b      	bne.n	8005362 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005332:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e128      	b.n	80055d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a90      	ldr	r2, [pc, #576]	@ (80055dc <HAL_I2S_Init+0x26c>)
 800539a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fc f9bd 	bl	800171c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80053b8:	f023 030f 	bic.w	r3, r3, #15
 80053bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2202      	movs	r2, #2
 80053c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d060      	beq.n	8005490 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80053d6:	2310      	movs	r3, #16
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e001      	b.n	80053e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80053dc:	2320      	movs	r3, #32
 80053de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d802      	bhi.n	80053ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80053ee:	2001      	movs	r0, #1
 80053f0:	f001 f9c4 	bl	800677c <HAL_RCCEx_GetPeriphCLKFreq>
 80053f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fe:	d125      	bne.n	800544c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	3305      	adds	r3, #5
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e01f      	b.n	800546a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	fbb2 f2f3 	udiv	r2, r2, r3
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	3305      	adds	r3, #5
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e00e      	b.n	800546a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	fbb2 f2f3 	udiv	r2, r2, r3
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	3305      	adds	r3, #5
 8005468:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4a5c      	ldr	r2, [pc, #368]	@ (80055e0 <HAL_I2S_Init+0x270>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e003      	b.n	8005498 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005490:	2302      	movs	r3, #2
 8005492:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d902      	bls.n	80054a4 <HAL_I2S_Init+0x134>
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2bff      	cmp	r3, #255	@ 0xff
 80054a2:	d907      	bls.n	80054b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	f043 0210 	orr.w	r2, r3, #16
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e08f      	b.n	80055d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	ea42 0103 	orr.w	r1, r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054d2:	f023 030f 	bic.w	r3, r3, #15
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6851      	ldr	r1, [r2, #4]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6892      	ldr	r2, [r2, #8]
 80054de:	4311      	orrs	r1, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68d2      	ldr	r2, [r2, #12]
 80054e4:	4311      	orrs	r1, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6992      	ldr	r2, [r2, #24]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d161      	bne.n	80055c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a38      	ldr	r2, [pc, #224]	@ (80055e4 <HAL_I2S_Init+0x274>)
 8005504:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a37      	ldr	r2, [pc, #220]	@ (80055e8 <HAL_I2S_Init+0x278>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d101      	bne.n	8005514 <HAL_I2S_Init+0x1a4>
 8005510:	4b36      	ldr	r3, [pc, #216]	@ (80055ec <HAL_I2S_Init+0x27c>)
 8005512:	e001      	b.n	8005518 <HAL_I2S_Init+0x1a8>
 8005514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	4932      	ldr	r1, [pc, #200]	@ (80055e8 <HAL_I2S_Init+0x278>)
 8005520:	428a      	cmp	r2, r1
 8005522:	d101      	bne.n	8005528 <HAL_I2S_Init+0x1b8>
 8005524:	4a31      	ldr	r2, [pc, #196]	@ (80055ec <HAL_I2S_Init+0x27c>)
 8005526:	e001      	b.n	800552c <HAL_I2S_Init+0x1bc>
 8005528:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800552c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005530:	f023 030f 	bic.w	r3, r3, #15
 8005534:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2b      	ldr	r2, [pc, #172]	@ (80055e8 <HAL_I2S_Init+0x278>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d101      	bne.n	8005544 <HAL_I2S_Init+0x1d4>
 8005540:	4b2a      	ldr	r3, [pc, #168]	@ (80055ec <HAL_I2S_Init+0x27c>)
 8005542:	e001      	b.n	8005548 <HAL_I2S_Init+0x1d8>
 8005544:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005548:	2202      	movs	r2, #2
 800554a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	@ (80055e8 <HAL_I2S_Init+0x278>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d101      	bne.n	800555a <HAL_I2S_Init+0x1ea>
 8005556:	4b25      	ldr	r3, [pc, #148]	@ (80055ec <HAL_I2S_Init+0x27c>)
 8005558:	e001      	b.n	800555e <HAL_I2S_Init+0x1ee>
 800555a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800556a:	d003      	beq.n	8005574 <HAL_I2S_Init+0x204>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e001      	b.n	8005580 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800558a:	4313      	orrs	r3, r2
 800558c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005594:	4313      	orrs	r3, r2
 8005596:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800559e:	4313      	orrs	r3, r2
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80055ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a0d      	ldr	r2, [pc, #52]	@ (80055e8 <HAL_I2S_Init+0x278>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <HAL_I2S_Init+0x24c>
 80055b8:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <HAL_I2S_Init+0x27c>)
 80055ba:	e001      	b.n	80055c0 <HAL_I2S_Init+0x250>
 80055bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055c0:	897a      	ldrh	r2, [r7, #10]
 80055c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	080056e7 	.word	0x080056e7
 80055e0:	cccccccd 	.word	0xcccccccd
 80055e4:	080057fd 	.word	0x080057fd
 80055e8:	40003800 	.word	0x40003800
 80055ec:	40003400 	.word	0x40003400

080055f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	1c9a      	adds	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10e      	bne.n	8005680 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005670:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ffb8 	bl	80055f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	b292      	uxth	r2, r2
 800569c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a2:	1c9a      	adds	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10e      	bne.n	80056de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff93 	bl	8005604 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b086      	sub	sp, #24
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d13a      	bne.n	8005778 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d109      	bne.n	8005720 <I2S_IRQHandler+0x3a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b40      	cmp	r3, #64	@ 0x40
 8005718:	d102      	bne.n	8005720 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ffb4 	bl	8005688 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005726:	2b40      	cmp	r3, #64	@ 0x40
 8005728:	d126      	bne.n	8005778 <I2S_IRQHandler+0x92>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b20      	cmp	r3, #32
 8005736:	d11f      	bne.n	8005778 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005746:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff50 	bl	8005618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d136      	bne.n	80057f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d109      	bne.n	80057a2 <I2S_IRQHandler+0xbc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005798:	2b80      	cmp	r3, #128	@ 0x80
 800579a:	d102      	bne.n	80057a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff45 	bl	800562c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d122      	bne.n	80057f2 <I2S_IRQHandler+0x10c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d11b      	bne.n	80057f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e4:	f043 0204 	orr.w	r2, r3, #4
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff13 	bl	8005618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a92      	ldr	r2, [pc, #584]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d101      	bne.n	800581a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005816:	4b92      	ldr	r3, [pc, #584]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005818:	e001      	b.n	800581e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800581a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a8b      	ldr	r2, [pc, #556]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d101      	bne.n	8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005834:	4b8a      	ldr	r3, [pc, #552]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005836:	e001      	b.n	800583c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005848:	d004      	beq.n	8005854 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 8099 	bne.w	8005986 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d107      	bne.n	800586e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f925 	bl	8005ab8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9c8 	bl	8005c18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	2b40      	cmp	r3, #64	@ 0x40
 8005890:	d13a      	bne.n	8005908 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d035      	beq.n	8005908 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80058a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058a8:	e001      	b.n	80058ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80058aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4969      	ldr	r1, [pc, #420]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058b6:	428b      	cmp	r3, r1
 80058b8:	d101      	bne.n	80058be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80058ba:	4b69      	ldr	r3, [pc, #420]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058bc:	e001      	b.n	80058c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80058be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	f043 0202 	orr.w	r2, r3, #2
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff fe88 	bl	8005618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b08      	cmp	r3, #8
 8005910:	f040 80c3 	bne.w	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80bd 	beq.w	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800592e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a49      	ldr	r2, [pc, #292]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800593a:	4b49      	ldr	r3, [pc, #292]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800593c:	e001      	b.n	8005942 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800593e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4944      	ldr	r1, [pc, #272]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800594a:	428b      	cmp	r3, r1
 800594c:	d101      	bne.n	8005952 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800594e:	4b44      	ldr	r3, [pc, #272]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005950:	e001      	b.n	8005956 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005952:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005956:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800595a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	f043 0204 	orr.w	r2, r3, #4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fe4a 	bl	8005618 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005984:	e089      	b.n	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d107      	bne.n	80059a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8be 	bl	8005b1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f8fd 	bl	8005bb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b40      	cmp	r3, #64	@ 0x40
 80059c2:	d12f      	bne.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02a      	beq.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80059e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059ea:	e001      	b.n	80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80059ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4919      	ldr	r1, [pc, #100]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059f8:	428b      	cmp	r3, r1
 80059fa:	d101      	bne.n	8005a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80059fc:	4b18      	ldr	r3, [pc, #96]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059fe:	e001      	b.n	8005a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fdfa 	bl	8005618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d136      	bne.n	8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d031      	beq.n	8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a42:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a44:	e001      	b.n	8005a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4902      	ldr	r1, [pc, #8]	@ (8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a52:	428b      	cmp	r3, r1
 8005a54:	d106      	bne.n	8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a56:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a58:	e006      	b.n	8005a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a5a:	bf00      	nop
 8005a5c:	40003800 	.word	0x40003800
 8005a60:	40003400 	.word	0x40003400
 8005a64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a6c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	f043 0204 	orr.w	r2, r3, #4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fdc0 	bl	8005618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a98:	e000      	b.n	8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a9a:	bf00      	nop
}
 8005a9c:	bf00      	nop
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	1c99      	adds	r1, r3, #2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6251      	str	r1, [r2, #36]	@ 0x24
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d113      	bne.n	8005b12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005af8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ffc9 	bl	8005aa4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	1c99      	adds	r1, r3, #2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005b2e:	8819      	ldrh	r1, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	@ (8005bac <I2SEx_TxISR_I2SExt+0x90>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d101      	bne.n	8005b3e <I2SEx_TxISR_I2SExt+0x22>
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b3c:	e001      	b.n	8005b42 <I2SEx_TxISR_I2SExt+0x26>
 8005b3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b42:	460a      	mov	r2, r1
 8005b44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d121      	bne.n	8005ba2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a12      	ldr	r2, [pc, #72]	@ (8005bac <I2SEx_TxISR_I2SExt+0x90>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d101      	bne.n	8005b6c <I2SEx_TxISR_I2SExt+0x50>
 8005b68:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b6a:	e001      	b.n	8005b70 <I2SEx_TxISR_I2SExt+0x54>
 8005b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	490d      	ldr	r1, [pc, #52]	@ (8005bac <I2SEx_TxISR_I2SExt+0x90>)
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	d101      	bne.n	8005b80 <I2SEx_TxISR_I2SExt+0x64>
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b7e:	e001      	b.n	8005b84 <I2SEx_TxISR_I2SExt+0x68>
 8005b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ff81 	bl	8005aa4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40003800 	.word	0x40003800
 8005bb0:	40003400 	.word	0x40003400

08005bb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68d8      	ldr	r0, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	1c99      	adds	r1, r3, #2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005bcc:	b282      	uxth	r2, r0
 8005bce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d113      	bne.n	8005c10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bf6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff ff4a 	bl	8005aa4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d101      	bne.n	8005c2e <I2SEx_RxISR_I2SExt+0x16>
 8005c2a:	4b20      	ldr	r3, [pc, #128]	@ (8005cac <I2SEx_RxISR_I2SExt+0x94>)
 8005c2c:	e001      	b.n	8005c32 <I2SEx_RxISR_I2SExt+0x1a>
 8005c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c32:	68d8      	ldr	r0, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	1c99      	adds	r1, r3, #2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005c3e:	b282      	uxth	r2, r0
 8005c40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d121      	bne.n	8005c9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d101      	bne.n	8005c68 <I2SEx_RxISR_I2SExt+0x50>
 8005c64:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <I2SEx_RxISR_I2SExt+0x94>)
 8005c66:	e001      	b.n	8005c6c <I2SEx_RxISR_I2SExt+0x54>
 8005c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	490d      	ldr	r1, [pc, #52]	@ (8005ca8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c74:	428b      	cmp	r3, r1
 8005c76:	d101      	bne.n	8005c7c <I2SEx_RxISR_I2SExt+0x64>
 8005c78:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <I2SEx_RxISR_I2SExt+0x94>)
 8005c7a:	e001      	b.n	8005c80 <I2SEx_RxISR_I2SExt+0x68>
 8005c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff ff03 	bl	8005aa4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40003800 	.word	0x40003800
 8005cac:	40003400 	.word	0x40003400

08005cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e267      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d075      	beq.n	8005dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005cce:	4b88      	ldr	r3, [pc, #544]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cda:	4b85      	ldr	r3, [pc, #532]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d112      	bne.n	8005d0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce6:	4b82      	ldr	r3, [pc, #520]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf2:	d10b      	bne.n	8005d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05b      	beq.n	8005db8 <HAL_RCC_OscConfig+0x108>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d157      	bne.n	8005db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e242      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d14:	d106      	bne.n	8005d24 <HAL_RCC_OscConfig+0x74>
 8005d16:	4b76      	ldr	r3, [pc, #472]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a75      	ldr	r2, [pc, #468]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e01d      	b.n	8005d60 <HAL_RCC_OscConfig+0xb0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x98>
 8005d2e:	4b70      	ldr	r3, [pc, #448]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6f      	ldr	r2, [pc, #444]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0xb0>
 8005d48:	4b69      	ldr	r3, [pc, #420]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a68      	ldr	r2, [pc, #416]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b66      	ldr	r3, [pc, #408]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a65      	ldr	r2, [pc, #404]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fb feb2 	bl	8001ad0 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fb feae 	bl	8001ad0 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	@ 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e207      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCC_OscConfig+0xc0>
 8005d8e:	e014      	b.n	8005dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fb fe9e 	bl	8001ad0 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d98:	f7fb fe9a 	bl	8001ad0 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b64      	cmp	r3, #100	@ 0x64
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e1f3      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005daa:	4b51      	ldr	r3, [pc, #324]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0xe8>
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d063      	beq.n	8005e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd2:	4b47      	ldr	r3, [pc, #284]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d11c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dde:	4b44      	ldr	r3, [pc, #272]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d116      	bne.n	8005e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dea:	4b41      	ldr	r3, [pc, #260]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCC_OscConfig+0x152>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e1c7      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4937      	ldr	r1, [pc, #220]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e16:	e03a      	b.n	8005e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d020      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e20:	4b34      	ldr	r3, [pc, #208]	@ (8005ef4 <HAL_RCC_OscConfig+0x244>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e26:	f7fb fe53 	bl	8001ad0 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e2e:	f7fb fe4f 	bl	8001ad0 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e1a8      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e40:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4925      	ldr	r1, [pc, #148]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	600b      	str	r3, [r1, #0]
 8005e60:	e015      	b.n	8005e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e62:	4b24      	ldr	r3, [pc, #144]	@ (8005ef4 <HAL_RCC_OscConfig+0x244>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fb fe32 	bl	8001ad0 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e70:	f7fb fe2e 	bl	8001ad0 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e187      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d036      	beq.n	8005f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea2:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <HAL_RCC_OscConfig+0x248>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea8:	f7fb fe12 	bl	8001ad0 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb0:	f7fb fe0e 	bl	8001ad0 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e167      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x200>
 8005ece:	e01b      	b.n	8005f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	@ (8005ef8 <HAL_RCC_OscConfig+0x248>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed6:	f7fb fdfb 	bl	8001ad0 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	e00e      	b.n	8005efc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ede:	f7fb fdf7 	bl	8001ad0 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d907      	bls.n	8005efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e150      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	42470000 	.word	0x42470000
 8005ef8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005efc:	4b88      	ldr	r3, [pc, #544]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1ea      	bne.n	8005ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8097 	beq.w	8006044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f1a:	4b81      	ldr	r3, [pc, #516]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f36:	4b7a      	ldr	r3, [pc, #488]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f46:	4b77      	ldr	r3, [pc, #476]	@ (8006124 <HAL_RCC_OscConfig+0x474>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d118      	bne.n	8005f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f52:	4b74      	ldr	r3, [pc, #464]	@ (8006124 <HAL_RCC_OscConfig+0x474>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a73      	ldr	r2, [pc, #460]	@ (8006124 <HAL_RCC_OscConfig+0x474>)
 8005f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f5e:	f7fb fdb7 	bl	8001ad0 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f66:	f7fb fdb3 	bl	8001ad0 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e10c      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f78:	4b6a      	ldr	r3, [pc, #424]	@ (8006124 <HAL_RCC_OscConfig+0x474>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d106      	bne.n	8005f9a <HAL_RCC_OscConfig+0x2ea>
 8005f8c:	4b64      	ldr	r3, [pc, #400]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	4a63      	ldr	r2, [pc, #396]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f98:	e01c      	b.n	8005fd4 <HAL_RCC_OscConfig+0x324>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCC_OscConfig+0x30c>
 8005fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	f043 0304 	orr.w	r3, r3, #4
 8005fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fae:	4b5c      	ldr	r3, [pc, #368]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fba:	e00b      	b.n	8005fd4 <HAL_RCC_OscConfig+0x324>
 8005fbc:	4b58      	ldr	r3, [pc, #352]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc0:	4a57      	ldr	r2, [pc, #348]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc8:	4b55      	ldr	r3, [pc, #340]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	4a54      	ldr	r2, [pc, #336]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005fce:	f023 0304 	bic.w	r3, r3, #4
 8005fd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d015      	beq.n	8006008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fb fd78 	bl	8001ad0 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fb fd74 	bl	8001ad0 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0cb      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffa:	4b49      	ldr	r3, [pc, #292]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ee      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x334>
 8006006:	e014      	b.n	8006032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006008:	f7fb fd62 	bl	8001ad0 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600e:	e00a      	b.n	8006026 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006010:	f7fb fd5e 	bl	8001ad0 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e0b5      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006026:	4b3e      	ldr	r3, [pc, #248]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1ee      	bne.n	8006010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d105      	bne.n	8006044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006038:	4b39      	ldr	r3, [pc, #228]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	4a38      	ldr	r2, [pc, #224]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 800603e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006042:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80a1 	beq.w	8006190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800604e:	4b34      	ldr	r3, [pc, #208]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	2b08      	cmp	r3, #8
 8006058:	d05c      	beq.n	8006114 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d141      	bne.n	80060e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006062:	4b31      	ldr	r3, [pc, #196]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006068:	f7fb fd32 	bl	8001ad0 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006070:	f7fb fd2e 	bl	8001ad0 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e087      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006082:	4b27      	ldr	r3, [pc, #156]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69da      	ldr	r2, [r3, #28]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	3b01      	subs	r3, #1
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	491b      	ldr	r1, [pc, #108]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060be:	f7fb fd07 	bl	8001ad0 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c6:	f7fb fd03 	bl	8001ad0 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e05c      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d8:	4b11      	ldr	r3, [pc, #68]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f0      	beq.n	80060c6 <HAL_RCC_OscConfig+0x416>
 80060e4:	e054      	b.n	8006190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e6:	4b10      	ldr	r3, [pc, #64]	@ (8006128 <HAL_RCC_OscConfig+0x478>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fb fcf0 	bl	8001ad0 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fb fcec 	bl	8001ad0 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e045      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006106:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <HAL_RCC_OscConfig+0x470>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x444>
 8006112:	e03d      	b.n	8006190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d107      	bne.n	800612c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e038      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
 8006120:	40023800 	.word	0x40023800
 8006124:	40007000 	.word	0x40007000
 8006128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800612c:	4b1b      	ldr	r3, [pc, #108]	@ (800619c <HAL_RCC_OscConfig+0x4ec>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d028      	beq.n	800618c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006144:	429a      	cmp	r2, r3
 8006146:	d121      	bne.n	800618c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d11a      	bne.n	800618c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006164:	4293      	cmp	r3, r2
 8006166:	d111      	bne.n	800618c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	3b01      	subs	r3, #1
 8006176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006178:	429a      	cmp	r2, r3
 800617a:	d107      	bne.n	800618c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40023800 	.word	0x40023800

080061a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0cc      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061b4:	4b68      	ldr	r3, [pc, #416]	@ (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d90c      	bls.n	80061dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c2:	4b65      	ldr	r3, [pc, #404]	@ (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b63      	ldr	r3, [pc, #396]	@ (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0b8      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d020      	beq.n	800622a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f4:	4b59      	ldr	r3, [pc, #356]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a58      	ldr	r2, [pc, #352]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800620c:	4b53      	ldr	r3, [pc, #332]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a52      	ldr	r2, [pc, #328]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006218:	4b50      	ldr	r3, [pc, #320]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	494d      	ldr	r1, [pc, #308]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	4313      	orrs	r3, r2
 8006228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d044      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	4b47      	ldr	r3, [pc, #284]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d119      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e07f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d003      	beq.n	800625e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625a:	2b03      	cmp	r3, #3
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625e:	4b3f      	ldr	r3, [pc, #252]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626e:	4b3b      	ldr	r3, [pc, #236]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e067      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800627e:	4b37      	ldr	r3, [pc, #220]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 0203 	bic.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4934      	ldr	r1, [pc, #208]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006290:	f7fb fc1e 	bl	8001ad0 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	e00a      	b.n	80062ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006298:	f7fb fc1a 	bl	8001ad0 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e04f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 020c 	and.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1eb      	bne.n	8006298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062c0:	4b25      	ldr	r3, [pc, #148]	@ (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d20c      	bcs.n	80062e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ce:	4b22      	ldr	r3, [pc, #136]	@ (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b20      	ldr	r3, [pc, #128]	@ (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d001      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e032      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f4:	4b19      	ldr	r3, [pc, #100]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4916      	ldr	r1, [pc, #88]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	490e      	ldr	r1, [pc, #56]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006326:	f000 f821 	bl	800636c <HAL_RCC_GetSysClockFreq>
 800632a:	4602      	mov	r2, r0
 800632c:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	490a      	ldr	r1, [pc, #40]	@ (8006360 <HAL_RCC_ClockConfig+0x1c0>)
 8006338:	5ccb      	ldrb	r3, [r1, r3]
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	4a09      	ldr	r2, [pc, #36]	@ (8006364 <HAL_RCC_ClockConfig+0x1c4>)
 8006340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006342:	4b09      	ldr	r3, [pc, #36]	@ (8006368 <HAL_RCC_ClockConfig+0x1c8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fb fb7e 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40023c00 	.word	0x40023c00
 800635c:	40023800 	.word	0x40023800
 8006360:	0800a5f4 	.word	0x0800a5f4
 8006364:	20000000 	.word	0x20000000
 8006368:	20000004 	.word	0x20000004

0800636c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800636c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006370:	b094      	sub	sp, #80	@ 0x50
 8006372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006384:	4b79      	ldr	r3, [pc, #484]	@ (800656c <HAL_RCC_GetSysClockFreq+0x200>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	2b08      	cmp	r3, #8
 800638e:	d00d      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0x40>
 8006390:	2b08      	cmp	r3, #8
 8006392:	f200 80e1 	bhi.w	8006558 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x34>
 800639a:	2b04      	cmp	r3, #4
 800639c:	d003      	beq.n	80063a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800639e:	e0db      	b.n	8006558 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063a0:	4b73      	ldr	r3, [pc, #460]	@ (8006570 <HAL_RCC_GetSysClockFreq+0x204>)
 80063a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063a4:	e0db      	b.n	800655e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063a6:	4b73      	ldr	r3, [pc, #460]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x208>)
 80063a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063aa:	e0d8      	b.n	800655e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ac:	4b6f      	ldr	r3, [pc, #444]	@ (800656c <HAL_RCC_GetSysClockFreq+0x200>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063b6:	4b6d      	ldr	r3, [pc, #436]	@ (800656c <HAL_RCC_GetSysClockFreq+0x200>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d063      	beq.n	800648a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c2:	4b6a      	ldr	r3, [pc, #424]	@ (800656c <HAL_RCC_GetSysClockFreq+0x200>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	2200      	movs	r2, #0
 80063ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063d6:	2300      	movs	r3, #0
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80063de:	4622      	mov	r2, r4
 80063e0:	462b      	mov	r3, r5
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	0159      	lsls	r1, r3, #5
 80063ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063f0:	0150      	lsls	r0, r2, #5
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4621      	mov	r1, r4
 80063f8:	1a51      	subs	r1, r2, r1
 80063fa:	6139      	str	r1, [r7, #16]
 80063fc:	4629      	mov	r1, r5
 80063fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006410:	4659      	mov	r1, fp
 8006412:	018b      	lsls	r3, r1, #6
 8006414:	4651      	mov	r1, sl
 8006416:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800641a:	4651      	mov	r1, sl
 800641c:	018a      	lsls	r2, r1, #6
 800641e:	4651      	mov	r1, sl
 8006420:	ebb2 0801 	subs.w	r8, r2, r1
 8006424:	4659      	mov	r1, fp
 8006426:	eb63 0901 	sbc.w	r9, r3, r1
 800642a:	f04f 0200 	mov.w	r2, #0
 800642e:	f04f 0300 	mov.w	r3, #0
 8006432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800643a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800643e:	4690      	mov	r8, r2
 8006440:	4699      	mov	r9, r3
 8006442:	4623      	mov	r3, r4
 8006444:	eb18 0303 	adds.w	r3, r8, r3
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	462b      	mov	r3, r5
 800644c:	eb49 0303 	adc.w	r3, r9, r3
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800645e:	4629      	mov	r1, r5
 8006460:	024b      	lsls	r3, r1, #9
 8006462:	4621      	mov	r1, r4
 8006464:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006468:	4621      	mov	r1, r4
 800646a:	024a      	lsls	r2, r1, #9
 800646c:	4610      	mov	r0, r2
 800646e:	4619      	mov	r1, r3
 8006470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006472:	2200      	movs	r2, #0
 8006474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800647c:	f7f9 fea4 	bl	80001c8 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4613      	mov	r3, r2
 8006486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006488:	e058      	b.n	800653c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648a:	4b38      	ldr	r3, [pc, #224]	@ (800656c <HAL_RCC_GetSysClockFreq+0x200>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	099b      	lsrs	r3, r3, #6
 8006490:	2200      	movs	r2, #0
 8006492:	4618      	mov	r0, r3
 8006494:	4611      	mov	r1, r2
 8006496:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064a4:	4642      	mov	r2, r8
 80064a6:	464b      	mov	r3, r9
 80064a8:	f04f 0000 	mov.w	r0, #0
 80064ac:	f04f 0100 	mov.w	r1, #0
 80064b0:	0159      	lsls	r1, r3, #5
 80064b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b6:	0150      	lsls	r0, r2, #5
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4641      	mov	r1, r8
 80064be:	ebb2 0a01 	subs.w	sl, r2, r1
 80064c2:	4649      	mov	r1, r9
 80064c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064dc:	ebb2 040a 	subs.w	r4, r2, sl
 80064e0:	eb63 050b 	sbc.w	r5, r3, fp
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	00eb      	lsls	r3, r5, #3
 80064ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064f2:	00e2      	lsls	r2, r4, #3
 80064f4:	4614      	mov	r4, r2
 80064f6:	461d      	mov	r5, r3
 80064f8:	4643      	mov	r3, r8
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	464b      	mov	r3, r9
 8006500:	eb45 0303 	adc.w	r3, r5, r3
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006512:	4629      	mov	r1, r5
 8006514:	028b      	lsls	r3, r1, #10
 8006516:	4621      	mov	r1, r4
 8006518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800651c:	4621      	mov	r1, r4
 800651e:	028a      	lsls	r2, r1, #10
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006526:	2200      	movs	r2, #0
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	61fa      	str	r2, [r7, #28]
 800652c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006530:	f7f9 fe4a 	bl	80001c8 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4613      	mov	r3, r2
 800653a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800653c:	4b0b      	ldr	r3, [pc, #44]	@ (800656c <HAL_RCC_GetSysClockFreq+0x200>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	3301      	adds	r3, #1
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800654c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800654e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006556:	e002      	b.n	800655e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006558:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <HAL_RCC_GetSysClockFreq+0x204>)
 800655a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800655c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800655e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006560:	4618      	mov	r0, r3
 8006562:	3750      	adds	r7, #80	@ 0x50
 8006564:	46bd      	mov	sp, r7
 8006566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656a:	bf00      	nop
 800656c:	40023800 	.word	0x40023800
 8006570:	00f42400 	.word	0x00f42400
 8006574:	007a1200 	.word	0x007a1200

08006578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800657c:	4b03      	ldr	r3, [pc, #12]	@ (800658c <HAL_RCC_GetHCLKFreq+0x14>)
 800657e:	681b      	ldr	r3, [r3, #0]
}
 8006580:	4618      	mov	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000000 	.word	0x20000000

08006590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006594:	f7ff fff0 	bl	8006578 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	0a9b      	lsrs	r3, r3, #10
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4903      	ldr	r1, [pc, #12]	@ (80065b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	0800a604 	.word	0x0800a604

080065b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d035      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065e0:	4b62      	ldr	r3, [pc, #392]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065e6:	f7fb fa73 	bl	8001ad0 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065ec:	e008      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065ee:	f7fb fa6f 	bl	8001ad0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0b0      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006600:	4b5b      	ldr	r3, [pc, #364]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f0      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	019a      	lsls	r2, r3, #6
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	071b      	lsls	r3, r3, #28
 8006618:	4955      	ldr	r1, [pc, #340]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006620:	4b52      	ldr	r3, [pc, #328]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006626:	f7fb fa53 	bl	8001ad0 <HAL_GetTick>
 800662a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800662e:	f7fb fa4f 	bl	8001ad0 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e090      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006640:	4b4b      	ldr	r3, [pc, #300]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8083 	beq.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b44      	ldr	r3, [pc, #272]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	4a43      	ldr	r2, [pc, #268]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006668:	6413      	str	r3, [r2, #64]	@ 0x40
 800666a:	4b41      	ldr	r3, [pc, #260]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006676:	4b3f      	ldr	r3, [pc, #252]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3e      	ldr	r2, [pc, #248]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800667c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006682:	f7fb fa25 	bl	8001ad0 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668a:	f7fb fa21 	bl	8001ad0 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e062      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800669c:	4b35      	ldr	r3, [pc, #212]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066a8:	4b31      	ldr	r3, [pc, #196]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02f      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d028      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066d0:	4b29      	ldr	r3, [pc, #164]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066d6:	4b28      	ldr	r3, [pc, #160]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066dc:	4a24      	ldr	r2, [pc, #144]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066e2:	4b23      	ldr	r3, [pc, #140]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d114      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066ee:	f7fb f9ef 	bl	8001ad0 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f4:	e00a      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f6:	f7fb f9eb 	bl	8001ad0 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006704:	4293      	cmp	r3, r2
 8006706:	d901      	bls.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e02a      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670c:	4b18      	ldr	r3, [pc, #96]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0ee      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006724:	d10d      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006726:	4b12      	ldr	r3, [pc, #72]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800673a:	490d      	ldr	r1, [pc, #52]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800673c:	4313      	orrs	r3, r2
 800673e:	608b      	str	r3, [r1, #8]
 8006740:	e005      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006742:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	4a0a      	ldr	r2, [pc, #40]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006748:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800674c:	6093      	str	r3, [r2, #8]
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006750:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675a:	4905      	ldr	r1, [pc, #20]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	42470068 	.word	0x42470068
 8006770:	40023800 	.word	0x40023800
 8006774:	40007000 	.word	0x40007000
 8006778:	42470e40 	.word	0x42470e40

0800677c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d13f      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800679a:	4b24      	ldr	r3, [pc, #144]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d006      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b0:	d12f      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80067b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067b4:	617b      	str	r3, [r7, #20]
          break;
 80067b6:	e02f      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067b8:	4b1c      	ldr	r3, [pc, #112]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067c4:	d108      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067c6:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ce:	4a19      	ldr	r2, [pc, #100]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	e007      	b.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067d8:	4b14      	ldr	r3, [pc, #80]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e0:	4a15      	ldr	r2, [pc, #84]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80067e8:	4b10      	ldr	r3, [pc, #64]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ee:	099b      	lsrs	r3, r3, #6
 80067f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
 80067fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006802:	0f1b      	lsrs	r3, r3, #28
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	617b      	str	r3, [r7, #20]
          break;
 8006810:	e002      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
          break;
 8006816:	bf00      	nop
        }
      }
      break;
 8006818:	e000      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800681a:	bf00      	nop
    }
  }
  return frequency;
 800681c:	697b      	ldr	r3, [r7, #20]
}
 800681e:	4618      	mov	r0, r3
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	00bb8000 	.word	0x00bb8000
 8006834:	007a1200 	.word	0x007a1200
 8006838:	00f42400 	.word	0x00f42400

0800683c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e07b      	b.n	8006946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d108      	bne.n	8006868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800685e:	d009      	beq.n	8006874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
 8006866:	e005      	b.n	8006874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fa ffc4 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f8:	ea42 0103 	orr.w	r1, r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	f003 0104 	and.w	r1, r3, #4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	f003 0210 	and.w	r2, r3, #16
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800694e:	b084      	sub	sp, #16
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	f107 001c 	add.w	r0, r7, #28
 800695c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006960:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006964:	2b01      	cmp	r3, #1
 8006966:	d123      	bne.n	80069b0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800697c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006990:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006994:	2b01      	cmp	r3, #1
 8006996:	d105      	bne.n	80069a4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f9dc 	bl	8006d62 <USB_CoreReset>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	e01b      	b.n	80069e8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9d0 	bl	8006d62 <USB_CoreReset>
 80069c2:	4603      	mov	r3, r0
 80069c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80069da:	e005      	b.n	80069e8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069e8:	7fbb      	ldrb	r3, [r7, #30]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d10b      	bne.n	8006a06 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f043 0206 	orr.w	r2, r3, #6
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a12:	b004      	add	sp, #16
 8006a14:	4770      	bx	lr

08006a16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f043 0201 	orr.w	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 0201 	bic.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d115      	bne.n	8006aa8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a88:	200a      	movs	r0, #10
 8006a8a:	f7fb f82d 	bl	8001ae8 <HAL_Delay>
      ms += 10U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	330a      	adds	r3, #10
 8006a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f956 	bl	8006d46 <USB_GetMode>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d01e      	beq.n	8006ade <USB_SetCurrentMode+0x84>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006aa4:	d9f0      	bls.n	8006a88 <USB_SetCurrentMode+0x2e>
 8006aa6:	e01a      	b.n	8006ade <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d115      	bne.n	8006ada <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006aba:	200a      	movs	r0, #10
 8006abc:	f7fb f814 	bl	8001ae8 <HAL_Delay>
      ms += 10U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	330a      	adds	r3, #10
 8006ac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f93d 	bl	8006d46 <USB_GetMode>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <USB_SetCurrentMode+0x84>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ad6:	d9f0      	bls.n	8006aba <USB_SetCurrentMode+0x60>
 8006ad8:	e001      	b.n	8006ade <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e005      	b.n	8006aea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ae2:	d101      	bne.n	8006ae8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b0c:	d901      	bls.n	8006b12 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e01b      	b.n	8006b4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	daf2      	bge.n	8006b00 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	019b      	lsls	r3, r3, #6
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b36:	d901      	bls.n	8006b3c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e006      	b.n	8006b4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d0f0      	beq.n	8006b2a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b6e:	d901      	bls.n	8006b74 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e018      	b.n	8006ba6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	daf2      	bge.n	8006b62 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2210      	movs	r2, #16
 8006b84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b92:	d901      	bls.n	8006b98 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e006      	b.n	8006ba6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d0f0      	beq.n	8006b86 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b089      	sub	sp, #36	@ 0x24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	71fb      	strb	r3, [r7, #7]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d123      	bne.n	8006c20 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
 8006bda:	3303      	adds	r3, #3
 8006bdc:	089b      	lsrs	r3, r3, #2
 8006bde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]
 8006be4:	e018      	b.n	8006c18 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	031a      	lsls	r2, r3, #12
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	3301      	adds	r3, #1
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3e2      	bcc.n	8006be6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3724      	adds	r7, #36	@ 0x24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b08b      	sub	sp, #44	@ 0x2c
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	089b      	lsrs	r3, r3, #2
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	e014      	b.n	8006c84 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	3301      	adds	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	3301      	adds	r3, #1
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	3301      	adds	r3, #1
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	3301      	adds	r3, #1
 8006c82:	623b      	str	r3, [r7, #32]
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d3e6      	bcc.n	8006c5a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c8c:	8bfb      	ldrh	r3, [r7, #30]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01e      	beq.n	8006cd0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f107 0310 	add.w	r3, r7, #16
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	701a      	strb	r2, [r3, #0]
      i++;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	623b      	str	r3, [r7, #32]
      pDest++;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006cc4:	8bfb      	ldrh	r3, [r7, #30]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006cca:	8bfb      	ldrh	r3, [r7, #30]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1ea      	bne.n	8006ca6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	372c      	adds	r7, #44	@ 0x2c
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	4013      	ands	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d38:	68bb      	ldr	r3, [r7, #8]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0301 	and.w	r3, r3, #1
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d7a:	d901      	bls.n	8006d80 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e01b      	b.n	8006db8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	daf2      	bge.n	8006d6e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f043 0201 	orr.w	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006da4:	d901      	bls.n	8006daa <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e006      	b.n	8006db8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d0f0      	beq.n	8006d98 <USB_CoreReset+0x36>

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b086      	sub	sp, #24
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d119      	bne.n	8006e4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10a      	bne.n	8006e38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e30:	f043 0304 	orr.w	r3, r3, #4
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e014      	b.n	8006e62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e46:	f023 0304 	bic.w	r3, r3, #4
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	e009      	b.n	8006e62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e5c:	f023 0304 	bic.w	r3, r3, #4
 8006e60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e62:	2110      	movs	r1, #16
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fe44 	bl	8006af2 <USB_FlushTxFifo>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fe6e 	bl	8006b56 <USB_FlushRxFifo>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	e015      	b.n	8006eb6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e96:	461a      	mov	r2, r3
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006eba:	461a      	mov	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d3e3      	bcc.n	8006e8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ece:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a18      	ldr	r2, [pc, #96]	@ (8006f34 <USB_HostInit+0x170>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10b      	bne.n	8006ef0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ede:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a15      	ldr	r2, [pc, #84]	@ (8006f38 <USB_HostInit+0x174>)
 8006ee4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a14      	ldr	r2, [pc, #80]	@ (8006f3c <USB_HostInit+0x178>)
 8006eea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006eee:	e009      	b.n	8006f04 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2280      	movs	r2, #128	@ 0x80
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a11      	ldr	r2, [pc, #68]	@ (8006f40 <USB_HostInit+0x17c>)
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a11      	ldr	r2, [pc, #68]	@ (8006f44 <USB_HostInit+0x180>)
 8006f00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d105      	bne.n	8006f18 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f043 0210 	orr.w	r2, r3, #16
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <USB_HostInit+0x184>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f30:	b004      	add	sp, #16
 8006f32:	4770      	bx	lr
 8006f34:	40040000 	.word	0x40040000
 8006f38:	01000200 	.word	0x01000200
 8006f3c:	00e00300 	.word	0x00e00300
 8006f40:	00600080 	.word	0x00600080
 8006f44:	004000e0 	.word	0x004000e0
 8006f48:	a3200008 	.word	0xa3200008

08006f4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d107      	bne.n	8006f9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f94:	461a      	mov	r2, r3
 8006f96:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006f9a:	6053      	str	r3, [r2, #4]
 8006f9c:	e00c      	b.n	8006fb8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d107      	bne.n	8006fb4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006faa:	461a      	mov	r2, r3
 8006fac:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006fb0:	6053      	str	r3, [r2, #4]
 8006fb2:	e001      	b.n	8006fb8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006fe6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ff6:	2064      	movs	r0, #100	@ 0x64
 8006ff8:	f7fa fd76 	bl	8001ae8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007008:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800700a:	200a      	movs	r0, #10
 800700c:	f7fa fd6c 	bl	8001ae8 <HAL_Delay>

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800703e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <USB_DriveVbus+0x44>
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d106      	bne.n	800705e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800705c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007068:	d109      	bne.n	800707e <USB_DriveVbus+0x64>
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007078:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800707c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	0c5b      	lsrs	r3, r3, #17
 80070aa:	f003 0303 	and.w	r3, r3, #3
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	b29b      	uxth	r3, r3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	70fb      	strb	r3, [r7, #3]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70bb      	strb	r3, [r7, #2]
 80070f2:	4613      	mov	r3, r2
 80070f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710a:	461a      	mov	r2, r3
 800710c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007110:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007112:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007116:	2b03      	cmp	r3, #3
 8007118:	d87c      	bhi.n	8007214 <USB_HC_Init+0x138>
 800711a:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <USB_HC_Init+0x44>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007131 	.word	0x08007131
 8007124:	080071d7 	.word	0x080071d7
 8007128:	08007131 	.word	0x08007131
 800712c:	08007199 	.word	0x08007199
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713c:	461a      	mov	r2, r3
 800713e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007142:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007144:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007148:	2b00      	cmp	r3, #0
 800714a:	da10      	bge.n	800716e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	440a      	add	r2, r1
 8007162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800716a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800716c:	e055      	b.n	800721a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a6f      	ldr	r2, [pc, #444]	@ (8007330 <USB_HC_Init+0x254>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d151      	bne.n	800721a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	440a      	add	r2, r1
 800718c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007190:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007194:	60d3      	str	r3, [r2, #12]
      break;
 8007196:	e040      	b.n	800721a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a4:	461a      	mov	r2, r3
 80071a6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80071aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da34      	bge.n	800721e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80071d4:	e023      	b.n	800721e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e2:	461a      	mov	r2, r3
 80071e4:	f240 2325 	movw	r3, #549	@ 0x225
 80071e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	da17      	bge.n	8007222 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	440a      	add	r2, r1
 8007208:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800720c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007210:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007212:	e006      	b.n	8007222 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
      break;
 8007218:	e004      	b.n	8007224 <USB_HC_Init+0x148>
      break;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <USB_HC_Init+0x148>
      break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <USB_HC_Init+0x148>
      break;
 8007222:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4413      	add	r3, r2
 800722c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007230:	461a      	mov	r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	440a      	add	r2, r1
 800724c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007250:	f043 0302 	orr.w	r3, r3, #2
 8007254:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	f003 030f 	and.w	r3, r3, #15
 8007264:	2101      	movs	r1, #1
 8007266:	fa01 f303 	lsl.w	r3, r1, r3
 800726a:	6939      	ldr	r1, [r7, #16]
 800726c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007270:	4313      	orrs	r3, r2
 8007272:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007280:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007284:	2b00      	cmp	r3, #0
 8007286:	da03      	bge.n	8007290 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e001      	b.n	8007294 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fef9 	bl	800708c <USB_GetHostSpeed>
 800729a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800729c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d106      	bne.n	80072b2 <USB_HC_Init+0x1d6>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d003      	beq.n	80072b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80072aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e001      	b.n	80072b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072b6:	787b      	ldrb	r3, [r7, #1]
 80072b8:	059b      	lsls	r3, r3, #22
 80072ba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80072be:	78bb      	ldrb	r3, [r7, #2]
 80072c0:	02db      	lsls	r3, r3, #11
 80072c2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80072c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80072cc:	049b      	lsls	r3, r3, #18
 80072ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80072d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80072d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80072d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80072da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	431a      	orrs	r2, r3
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80072f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80072f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d003      	beq.n	8007306 <USB_HC_Init+0x22a>
 80072fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007302:	2b01      	cmp	r3, #1
 8007304:	d10f      	bne.n	8007326 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	440a      	add	r2, r1
 800731c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007320:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007324:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007326:	7ffb      	ldrb	r3, [r7, #31]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40040000 	.word	0x40040000

08007334 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	@ 0x30
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	4613      	mov	r3, r2
 8007340:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800734c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007350:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a5d      	ldr	r2, [pc, #372]	@ (80074cc <USB_HC_StartXfer+0x198>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d12f      	bne.n	80073ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d11c      	bne.n	800739a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	7c9b      	ldrb	r3, [r3, #18]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <USB_HC_StartXfer+0x3c>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	7c9b      	ldrb	r3, [r3, #18]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d124      	bne.n	80073ba <USB_HC_StartXfer+0x86>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	799b      	ldrb	r3, [r3, #6]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d120      	bne.n	80073ba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	4413      	add	r3, r2
 8007380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	6a3a      	ldr	r2, [r7, #32]
 800738c:	440a      	add	r2, r1
 800738e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007396:	60d3      	str	r3, [r2, #12]
 8007398:	e00f      	b.n	80073ba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	791b      	ldrb	r3, [r3, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10b      	bne.n	80073ba <USB_HC_StartXfer+0x86>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	795b      	ldrb	r3, [r3, #5]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	4619      	mov	r1, r3
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fb6b 	bl	8007a8c <USB_DoPing>
        return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e232      	b.n	8007820 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	799b      	ldrb	r3, [r3, #6]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d158      	bne.n	8007474 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80073c2:	2301      	movs	r3, #1
 80073c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	8a92      	ldrh	r2, [r2, #20]
 80073d4:	fb03 f202 	mul.w	r2, r3, r2
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	61da      	str	r2, [r3, #28]
 80073dc:	e07c      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	7c9b      	ldrb	r3, [r3, #18]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d130      	bne.n	8007448 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	2bbc      	cmp	r3, #188	@ 0xbc
 80073ec:	d918      	bls.n	8007420 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	8a9b      	ldrh	r3, [r3, #20]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d003      	beq.n	8007410 <USB_HC_StartXfer+0xdc>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d103      	bne.n	8007418 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2202      	movs	r2, #2
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	e05f      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2201      	movs	r2, #1
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	e05b      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d007      	beq.n	8007440 <USB_HC_StartXfer+0x10c>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d003      	beq.n	8007440 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2204      	movs	r2, #4
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	e04b      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2203      	movs	r2, #3
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	e047      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d10d      	bne.n	800746a <USB_HC_StartXfer+0x136>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	8a92      	ldrh	r2, [r2, #20]
 8007456:	4293      	cmp	r3, r2
 8007458:	d907      	bls.n	800746a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800745a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	8a92      	ldrh	r2, [r2, #20]
 8007460:	fb03 f202 	mul.w	r2, r3, r2
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61da      	str	r2, [r3, #28]
 8007468:	e036      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	61da      	str	r2, [r3, #28]
 8007472:	e031      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d018      	beq.n	80074ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	8a92      	ldrh	r2, [r2, #20]
 8007484:	4413      	add	r3, r2
 8007486:	3b01      	subs	r3, #1
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	8a92      	ldrh	r2, [r2, #20]
 800748c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007490:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007492:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007494:	8b7b      	ldrh	r3, [r7, #26]
 8007496:	429a      	cmp	r2, r3
 8007498:	d90b      	bls.n	80074b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800749a:	8b7b      	ldrh	r3, [r7, #26]
 800749c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800749e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	8a92      	ldrh	r2, [r2, #20]
 80074a4:	fb03 f202 	mul.w	r2, r3, r2
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	61da      	str	r2, [r3, #28]
 80074ac:	e001      	b.n	80074b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80074ae:	2301      	movs	r3, #1
 80074b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	78db      	ldrb	r3, [r3, #3]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	8a92      	ldrh	r2, [r2, #20]
 80074c0:	fb03 f202 	mul.w	r2, r3, r2
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	61da      	str	r2, [r3, #28]
 80074c8:	e006      	b.n	80074d8 <USB_HC_StartXfer+0x1a4>
 80074ca:	bf00      	nop
 80074cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6a1a      	ldr	r2, [r3, #32]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074e2:	04d9      	lsls	r1, r3, #19
 80074e4:	4ba3      	ldr	r3, [pc, #652]	@ (8007774 <USB_HC_StartXfer+0x440>)
 80074e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	7d9b      	ldrb	r3, [r3, #22]
 80074ee:	075b      	lsls	r3, r3, #29
 80074f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	0148      	lsls	r0, r1, #5
 80074f8:	6a39      	ldr	r1, [r7, #32]
 80074fa:	4401      	add	r1, r0
 80074fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007500:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007502:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6999      	ldr	r1, [r3, #24]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751a:	460a      	mov	r2, r1
 800751c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	0151      	lsls	r1, r2, #5
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	440a      	add	r2, r1
 800754c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007550:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007554:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	7e7b      	ldrb	r3, [r7, #25]
 8007566:	075b      	lsls	r3, r3, #29
 8007568:	69f9      	ldr	r1, [r7, #28]
 800756a:	0148      	lsls	r0, r1, #5
 800756c:	6a39      	ldr	r1, [r7, #32]
 800756e:	4401      	add	r1, r0
 8007570:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	799b      	ldrb	r3, [r3, #6]
 800757c:	2b01      	cmp	r3, #1
 800757e:	f040 80c3 	bne.w	8007708 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	7c5b      	ldrb	r3, [r3, #17]
 8007586:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800758c:	4313      	orrs	r3, r2
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	440a      	add	r2, r1
 8007596:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800759a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800759e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	79db      	ldrb	r3, [r3, #7]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d123      	bne.n	8007610 <USB_HC_StartXfer+0x2dc>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	78db      	ldrb	r3, [r3, #3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11f      	bne.n	8007610 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	440a      	add	r2, r1
 8007606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800760a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800760e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	7c9b      	ldrb	r3, [r3, #18]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d003      	beq.n	8007620 <USB_HC_StartXfer+0x2ec>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	7c9b      	ldrb	r3, [r3, #18]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d117      	bne.n	8007650 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007624:	2b01      	cmp	r3, #1
 8007626:	d113      	bne.n	8007650 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	78db      	ldrb	r3, [r3, #3]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10f      	bne.n	8007650 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	440a      	add	r2, r1
 8007646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800764a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800764e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7c9b      	ldrb	r3, [r3, #18]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d162      	bne.n	800771e <USB_HC_StartXfer+0x3ea>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78db      	ldrb	r3, [r3, #3]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d15e      	bne.n	800771e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	3b01      	subs	r3, #1
 8007666:	2b03      	cmp	r3, #3
 8007668:	d858      	bhi.n	800771c <USB_HC_StartXfer+0x3e8>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <USB_HC_StartXfer+0x33c>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007681 	.word	0x08007681
 8007674:	080076a3 	.word	0x080076a3
 8007678:	080076c5 	.word	0x080076c5
 800767c:	080076e7 	.word	0x080076e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	4413      	add	r3, r2
 8007688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	440a      	add	r2, r1
 8007696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800769a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800769e:	6053      	str	r3, [r2, #4]
          break;
 80076a0:	e03d      	b.n	800771e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	0151      	lsls	r1, r2, #5
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	440a      	add	r2, r1
 80076b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076bc:	f043 030e 	orr.w	r3, r3, #14
 80076c0:	6053      	str	r3, [r2, #4]
          break;
 80076c2:	e02c      	b.n	800771e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80076e2:	6053      	str	r3, [r2, #4]
          break;
 80076e4:	e01b      	b.n	800771e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	6a3a      	ldr	r2, [r7, #32]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007704:	6053      	str	r3, [r2, #4]
          break;
 8007706:	e00a      	b.n	800771e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007714:	461a      	mov	r2, r3
 8007716:	2300      	movs	r3, #0
 8007718:	6053      	str	r3, [r2, #4]
 800771a:	e000      	b.n	800771e <USB_HC_StartXfer+0x3ea>
          break;
 800771c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	4413      	add	r3, r2
 8007726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007734:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	78db      	ldrb	r3, [r3, #3]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	e003      	b.n	8007750 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800774e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007756:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007764:	461a      	mov	r2, r3
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e055      	b.n	8007820 <USB_HC_StartXfer+0x4ec>
 8007774:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d14e      	bne.n	800781e <USB_HC_StartXfer+0x4ea>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d04a      	beq.n	800781e <USB_HC_StartXfer+0x4ea>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	79db      	ldrb	r3, [r3, #7]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d146      	bne.n	800781e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	7c9b      	ldrb	r3, [r3, #18]
 8007794:	2b03      	cmp	r3, #3
 8007796:	d831      	bhi.n	80077fc <USB_HC_StartXfer+0x4c8>
 8007798:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <USB_HC_StartXfer+0x46c>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077b1 	.word	0x080077b1
 80077a4:	080077d5 	.word	0x080077d5
 80077a8:	080077b1 	.word	0x080077b1
 80077ac:	080077d5 	.word	0x080077d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	3303      	adds	r3, #3
 80077b6:	089b      	lsrs	r3, r3, #2
 80077b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80077ba:	8afa      	ldrh	r2, [r7, #22]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d91c      	bls.n	8007800 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f043 0220 	orr.w	r2, r3, #32
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80077d2:	e015      	b.n	8007800 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	3303      	adds	r3, #3
 80077da:	089b      	lsrs	r3, r3, #2
 80077dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80077de:	8afa      	ldrh	r2, [r7, #22]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d90a      	bls.n	8007804 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80077fa:	e003      	b.n	8007804 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80077fc:	bf00      	nop
 80077fe:	e002      	b.n	8007806 <USB_HC_StartXfer+0x4d2>
        break;
 8007800:	bf00      	nop
 8007802:	e000      	b.n	8007806 <USB_HC_StartXfer+0x4d2>
        break;
 8007804:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6999      	ldr	r1, [r3, #24]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	785a      	ldrb	r2, [r3, #1]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	b29b      	uxth	r3, r3
 8007814:	2000      	movs	r0, #0
 8007816:	9000      	str	r0, [sp, #0]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff f9ca 	bl	8006bb2 <USB_WritePacket>
  }

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3728      	adds	r7, #40	@ 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	b29b      	uxth	r3, r3
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800784a:	b480      	push	{r7}
 800784c:	b089      	sub	sp, #36	@ 0x24
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	4413      	add	r3, r2
 800786a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	0c9b      	lsrs	r3, r3, #18
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	0fdb      	lsrs	r3, r3, #31
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	0fdb      	lsrs	r3, r3, #31
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d10d      	bne.n	80078cc <USB_HC_Halt+0x82>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <USB_HC_Halt+0x82>
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d002      	beq.n	80078c8 <USB_HC_Halt+0x7e>
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d101      	bne.n	80078cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e0d8      	b.n	8007a7e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <USB_HC_Halt+0x8e>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d173      	bne.n	80079c0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d14a      	bne.n	800799a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007908:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d133      	bne.n	8007978 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	440a      	add	r2, r1
 8007926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800792a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800792e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	440a      	add	r2, r1
 8007946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800794a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800794e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3301      	adds	r3, #1
 8007954:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800795c:	d82e      	bhi.n	80079bc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	4413      	add	r3, r2
 8007966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007974:	d0ec      	beq.n	8007950 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007976:	e081      	b.n	8007a7c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	440a      	add	r2, r1
 800798e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007992:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007996:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007998:	e070      	b.n	8007a7c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079ba:	e05f      	b.n	8007a7c <USB_HC_Halt+0x232>
            break;
 80079bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079be:	e05d      	b.n	8007a7c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d133      	bne.n	8007a58 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a3c:	d81d      	bhi.n	8007a7a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a54:	d0ec      	beq.n	8007a30 <USB_HC_Halt+0x1e6>
 8007a56:	e011      	b.n	8007a7c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e000      	b.n	8007a7c <USB_HC_Halt+0x232>
          break;
 8007a7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3724      	adds	r7, #36	@ 0x24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	04da      	lsls	r2, r3, #19
 8007aa8:	4b15      	ldr	r3, [pc, #84]	@ (8007b00 <USB_DoPing+0x74>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ad4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007adc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aea:	461a      	mov	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	1ff80000 	.word	0x1ff80000

08007b04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe ff8d 	bl	8006a38 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b1e:	2110      	movs	r1, #16
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fe ffe6 	bl	8006af2 <USB_FlushTxFifo>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff f810 	bl	8006b56 <USB_FlushRxFifo>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	e01f      	b.n	8007b86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d9dc      	bls.n	8007b46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e034      	b.n	8007bfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ba8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bd8:	d80c      	bhi.n	8007bf4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bf0:	d0ec      	beq.n	8007bcc <USB_StopHost+0xc8>
 8007bf2:	e000      	b.n	8007bf6 <USB_StopHost+0xf2>
        break;
 8007bf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b0f      	cmp	r3, #15
 8007c00:	d9c7      	bls.n	8007b92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7fe fefc 	bl	8006a16 <USB_EnableGlobalInt>

  return ret;
 8007c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3720      	adds	r7, #32
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b089      	sub	sp, #36	@ 0x24
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007c30:	2301      	movs	r3, #1
 8007c32:	2202      	movs	r2, #2
 8007c34:	2102      	movs	r1, #2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fc85 	bl	8008546 <USBH_FindInterface>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2bff      	cmp	r3, #255	@ 0xff
 8007c44:	d002      	beq.n	8007c4c <USBH_CDC_InterfaceInit+0x24>
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d901      	bls.n	8007c50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e13d      	b.n	8007ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fc5a 	bl	800850e <USBH_SelectInterface>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007c64:	2302      	movs	r3, #2
 8007c66:	e131      	b.n	8007ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007c6e:	2050      	movs	r0, #80	@ 0x50
 8007c70:	f002 fb64 	bl	800a33c <malloc>
 8007c74:	4603      	mov	r3, r0
 8007c76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e11f      	b.n	8007ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007c8c:	2250      	movs	r2, #80	@ 0x50
 8007c8e:	2100      	movs	r1, #0
 8007c90:	68b8      	ldr	r0, [r7, #8]
 8007c92:	f002 fc11 	bl	800a4b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	211a      	movs	r1, #26
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b25b      	sxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da15      	bge.n	8007cda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	211a      	movs	r1, #26
 8007cb4:	fb01 f303 	mul.w	r3, r1, r3
 8007cb8:	4413      	add	r3, r2
 8007cba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007cbe:	781a      	ldrb	r2, [r3, #0]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	211a      	movs	r1, #26
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007cd4:	881a      	ldrh	r2, [r3, #0]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 ffbe 	bl	8009c62 <USBH_AllocPipe>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	7819      	ldrb	r1, [r3, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	7858      	ldrb	r0, [r3, #1]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	8952      	ldrh	r2, [r2, #10]
 8007d06:	9202      	str	r2, [sp, #8]
 8007d08:	2203      	movs	r2, #3
 8007d0a:	9201      	str	r2, [sp, #4]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4623      	mov	r3, r4
 8007d10:	4602      	mov	r2, r0
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 ff76 	bl	8009c04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f002 fa85 	bl	800a230 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007d26:	2300      	movs	r3, #0
 8007d28:	2200      	movs	r2, #0
 8007d2a:	210a      	movs	r1, #10
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fc0a 	bl	8008546 <USBH_FindInterface>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2bff      	cmp	r3, #255	@ 0xff
 8007d3a:	d002      	beq.n	8007d42 <USBH_CDC_InterfaceInit+0x11a>
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d901      	bls.n	8007d46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d42:	2302      	movs	r3, #2
 8007d44:	e0c2      	b.n	8007ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	211a      	movs	r1, #26
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da16      	bge.n	8007d8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	211a      	movs	r1, #26
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	4413      	add	r3, r2
 8007d6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	211a      	movs	r1, #26
 8007d7a:	fb01 f303 	mul.w	r3, r1, r3
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007d84:	881a      	ldrh	r2, [r3, #0]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	835a      	strh	r2, [r3, #26]
 8007d8a:	e015      	b.n	8007db8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	211a      	movs	r1, #26
 8007d92:	fb01 f303 	mul.w	r3, r1, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	211a      	movs	r1, #26
 8007da8:	fb01 f303 	mul.w	r3, r1, r3
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	211a      	movs	r1, #26
 8007dbe:	fb01 f303 	mul.w	r3, r1, r3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da16      	bge.n	8007dfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	211a      	movs	r1, #26
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	211a      	movs	r1, #26
 8007dec:	fb01 f303 	mul.w	r3, r1, r3
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007df6:	881a      	ldrh	r2, [r3, #0]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	835a      	strh	r2, [r3, #26]
 8007dfc:	e015      	b.n	8007e2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	211a      	movs	r1, #26
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	4413      	add	r3, r2
 8007e0a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	211a      	movs	r1, #26
 8007e1a:	fb01 f303 	mul.w	r3, r1, r3
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	7b9b      	ldrb	r3, [r3, #14]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 ff16 	bl	8009c62 <USBH_AllocPipe>
 8007e36:	4603      	mov	r3, r0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	7bdb      	ldrb	r3, [r3, #15]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 ff0c 	bl	8009c62 <USBH_AllocPipe>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	7b59      	ldrb	r1, [r3, #13]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	7b98      	ldrb	r0, [r3, #14]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	8b12      	ldrh	r2, [r2, #24]
 8007e6a:	9202      	str	r2, [sp, #8]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	9201      	str	r2, [sp, #4]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4623      	mov	r3, r4
 8007e74:	4602      	mov	r2, r0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fec4 	bl	8009c04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7b19      	ldrb	r1, [r3, #12]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	7bd8      	ldrb	r0, [r3, #15]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	8b52      	ldrh	r2, [r2, #26]
 8007e94:	9202      	str	r2, [sp, #8]
 8007e96:	2202      	movs	r2, #2
 8007e98:	9201      	str	r2, [sp, #4]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 feaf 	bl	8009c04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	7b5b      	ldrb	r3, [r3, #13]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f002 f9ba 	bl	800a230 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	7b1b      	ldrb	r3, [r3, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f002 f9b3 	bl	800a230 <USBH_LL_SetToggle>

  return USBH_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd90      	pop	{r4, r7, pc}

08007ed4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00e      	beq.n	8007f0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fea4 	bl	8009c42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 fecf 	bl	8009ca4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	7b1b      	ldrb	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	7b1b      	ldrb	r3, [r3, #12]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fe91 	bl	8009c42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	7b1b      	ldrb	r3, [r3, #12]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 febc 	bl	8009ca4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	7b5b      	ldrb	r3, [r3, #13]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00e      	beq.n	8007f58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	7b5b      	ldrb	r3, [r3, #13]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 fe7e 	bl	8009c42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	7b5b      	ldrb	r3, [r3, #13]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fea9 	bl	8009ca4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 f9ed 	bl	800a34c <free>
    phost->pActiveClass->pData = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f78:	2200      	movs	r2, #0
 8007f7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3340      	adds	r3, #64	@ 0x40
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8b1 	bl	8008106 <GetLineCoding>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d877      	bhi.n	80080d8 <USBH_CDC_Process+0x114>
 8007fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <USBH_CDC_Process+0x2c>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008005 	.word	0x08008005
 8007ff4:	0800800b 	.word	0x0800800b
 8007ff8:	0800803b 	.word	0x0800803b
 8007ffc:	080080af 	.word	0x080080af
 8008000:	080080bd 	.word	0x080080bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
      break;
 8008008:	e06d      	b.n	80080e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f897 	bl	8008144 <SetLineCoding>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008028:	e058      	b.n	80080dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d055      	beq.n	80080dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2204      	movs	r2, #4
 8008034:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008038:	e050      	b.n	80080dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3340      	adds	r3, #64	@ 0x40
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f860 	bl	8008106 <GetLineCoding>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d126      	bne.n	800809e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008062:	791b      	ldrb	r3, [r3, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d13b      	bne.n	80080e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008072:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008074:	429a      	cmp	r2, r3
 8008076:	d133      	bne.n	80080e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008082:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008084:	429a      	cmp	r2, r3
 8008086:	d12b      	bne.n	80080e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008090:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008092:	429a      	cmp	r2, r3
 8008094:	d124      	bne.n	80080e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f958 	bl	800834c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800809c:	e020      	b.n	80080e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d01d      	beq.n	80080e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2204      	movs	r2, #4
 80080a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80080ac:	e018      	b.n	80080e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f867 	bl	8008182 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f8da 	bl	800826e <CDC_ProcessReception>
      break;
 80080ba:	e014      	b.n	80080e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80080bc:	2100      	movs	r1, #0
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 f81a 	bl	80090f8 <USBH_ClrFeature>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80080d6:	e005      	b.n	80080e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80080d8:	bf00      	nop
 80080da:	e004      	b.n	80080e6 <USBH_CDC_Process+0x122>
      break;
 80080dc:	bf00      	nop
 80080de:	e002      	b.n	80080e6 <USBH_CDC_Process+0x122>
      break;
 80080e0:	bf00      	nop
 80080e2:	e000      	b.n	80080e6 <USBH_CDC_Process+0x122>
      break;
 80080e4:	bf00      	nop

  }

  return status;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	22a1      	movs	r2, #161	@ 0xa1
 8008114:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2221      	movs	r2, #33	@ 0x21
 800811a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2207      	movs	r2, #7
 800812c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2207      	movs	r2, #7
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fb14 	bl	8009762 <USBH_CtlReq>
 800813a:	4603      	mov	r3, r0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2221      	movs	r2, #33	@ 0x21
 8008152:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2207      	movs	r2, #7
 800816a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2207      	movs	r2, #7
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 faf5 	bl	8009762 <USBH_CtlReq>
 8008178:	4603      	mov	r3, r0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b086      	sub	sp, #24
 8008186:	af02      	add	r7, sp, #8
 8008188:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008194:	2300      	movs	r3, #0
 8008196:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d002      	beq.n	80081a8 <CDC_ProcessTransmission+0x26>
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d023      	beq.n	80081ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80081a6:	e05e      	b.n	8008266 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	8b12      	ldrh	r2, [r2, #24]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d90b      	bls.n	80081cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	69d9      	ldr	r1, [r3, #28]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8b1a      	ldrh	r2, [r3, #24]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	7b5b      	ldrb	r3, [r3, #13]
 80081c0:	2001      	movs	r0, #1
 80081c2:	9000      	str	r0, [sp, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 fcda 	bl	8009b7e <USBH_BulkSendData>
 80081ca:	e00b      	b.n	80081e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	7b5b      	ldrb	r3, [r3, #13]
 80081da:	2001      	movs	r0, #1
 80081dc:	9000      	str	r0, [sp, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 fccd 	bl	8009b7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80081ec:	e03b      	b.n	8008266 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	7b5b      	ldrb	r3, [r3, #13]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fff1 	bl	800a1dc <USBH_LL_GetURBState>
 80081fa:	4603      	mov	r3, r0
 80081fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d128      	bne.n	8008256 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	8b12      	ldrh	r2, [r2, #24]
 800820c:	4293      	cmp	r3, r2
 800820e:	d90e      	bls.n	800822e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	8b12      	ldrh	r2, [r2, #24]
 8008218:	1a9a      	subs	r2, r3, r2
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	8b12      	ldrh	r2, [r2, #24]
 8008226:	441a      	add	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	61da      	str	r2, [r3, #28]
 800822c:	e002      	b.n	8008234 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	d004      	beq.n	8008246 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008244:	e00e      	b.n	8008264 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f868 	bl	8008324 <USBH_CDC_TransmitCallback>
      break;
 8008254:	e006      	b.n	8008264 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008256:	7afb      	ldrb	r3, [r7, #11]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d103      	bne.n	8008264 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008264:	bf00      	nop
  }
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b086      	sub	sp, #24
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008280:	2300      	movs	r3, #0
 8008282:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800828a:	2b03      	cmp	r3, #3
 800828c:	d002      	beq.n	8008294 <CDC_ProcessReception+0x26>
 800828e:	2b04      	cmp	r3, #4
 8008290:	d00e      	beq.n	80082b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008292:	e043      	b.n	800831c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	6a19      	ldr	r1, [r3, #32]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	8b5a      	ldrh	r2, [r3, #26]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	7b1b      	ldrb	r3, [r3, #12]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fc91 	bl	8009bc8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2204      	movs	r2, #4
 80082aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80082ae:	e035      	b.n	800831c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	7b1b      	ldrb	r3, [r3, #12]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 ff90 	bl	800a1dc <USBH_LL_GetURBState>
 80082bc:	4603      	mov	r3, r0
 80082be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80082c0:	7cfb      	ldrb	r3, [r7, #19]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d129      	bne.n	800831a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	7b1b      	ldrb	r3, [r3, #12]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fef3 	bl	800a0b8 <USBH_LL_GetLastXferSize>
 80082d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d016      	beq.n	800830c <CDC_ProcessReception+0x9e>
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	8b5b      	ldrh	r3, [r3, #26]
 80082e2:	461a      	mov	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d110      	bne.n	800830c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	1ad2      	subs	r2, r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	6a1a      	ldr	r2, [r3, #32]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	441a      	add	r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2203      	movs	r2, #3
 8008306:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800830a:	e006      	b.n	800831a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f80f 	bl	8008338 <USBH_CDC_ReceiveCallback>
      break;
 800831a:	bf00      	nop
  }
}
 800831c:	bf00      	nop
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008374:	2302      	movs	r3, #2
 8008376:	e029      	b.n	80083cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	79fa      	ldrb	r2, [r7, #7]
 800837c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f81f 	bl	80083d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f001 fdc3 	bl	8009f50 <USBH_LL_Init>

  return USBH_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e009      	b.n	80083fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	33e0      	adds	r3, #224	@ 0xe0
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	2200      	movs	r2, #0
 80083f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b0f      	cmp	r3, #15
 80083fe:	d9f2      	bls.n	80083e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e009      	b.n	800841a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4413      	add	r3, r2
 800840c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008420:	d3f1      	bcc.n	8008406 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2240      	movs	r2, #64	@ 0x40
 8008446:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	331c      	adds	r3, #28
 8008472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008476:	2100      	movs	r1, #0
 8008478:	4618      	mov	r0, r3
 800847a:	f002 f81d 	bl	800a4b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008488:	2100      	movs	r1, #0
 800848a:	4618      	mov	r0, r3
 800848c:	f002 f814 	bl	800a4b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008496:	2212      	movs	r2, #18
 8008498:	2100      	movs	r1, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f002 f80c 	bl	800a4b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80084a6:	223e      	movs	r2, #62	@ 0x3e
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 f804 	bl	800a4b8 <memset>

  return USBH_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10e      	bne.n	80084f6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80084de:	1c59      	adds	r1, r3, #1
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	33de      	adds	r3, #222	@ 0xde
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e004      	b.n	8008500 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80084f6:	2302      	movs	r3, #2
 80084f8:	73fb      	strb	r3, [r7, #15]
 80084fa:	e001      	b.n	8008500 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80084fc:	2302      	movs	r3, #2
 80084fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	429a      	cmp	r2, r3
 8008528:	d204      	bcs.n	8008534 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008532:	e001      	b.n	8008538 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008534:	2302      	movs	r3, #2
 8008536:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008546:	b480      	push	{r7}
 8008548:	b087      	sub	sp, #28
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	4608      	mov	r0, r1
 8008550:	4611      	mov	r1, r2
 8008552:	461a      	mov	r2, r3
 8008554:	4603      	mov	r3, r0
 8008556:	70fb      	strb	r3, [r7, #3]
 8008558:	460b      	mov	r3, r1
 800855a:	70bb      	strb	r3, [r7, #2]
 800855c:	4613      	mov	r3, r2
 800855e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800856e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008570:	e025      	b.n	80085be <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	221a      	movs	r2, #26
 8008576:	fb02 f303 	mul.w	r3, r2, r3
 800857a:	3308      	adds	r3, #8
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	3302      	adds	r3, #2
 8008582:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	795b      	ldrb	r3, [r3, #5]
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	429a      	cmp	r2, r3
 800858c:	d002      	beq.n	8008594 <USBH_FindInterface+0x4e>
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	2bff      	cmp	r3, #255	@ 0xff
 8008592:	d111      	bne.n	80085b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008598:	78ba      	ldrb	r2, [r7, #2]
 800859a:	429a      	cmp	r2, r3
 800859c:	d002      	beq.n	80085a4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800859e:	78bb      	ldrb	r3, [r7, #2]
 80085a0:	2bff      	cmp	r3, #255	@ 0xff
 80085a2:	d109      	bne.n	80085b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80085a8:	787a      	ldrb	r2, [r7, #1]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d002      	beq.n	80085b4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80085ae:	787b      	ldrb	r3, [r7, #1]
 80085b0:	2bff      	cmp	r3, #255	@ 0xff
 80085b2:	d101      	bne.n	80085b8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	e006      	b.n	80085c6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	3301      	adds	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d9d6      	bls.n	8008572 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80085c4:	23ff      	movs	r3, #255	@ 0xff
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fcf4 	bl	8009fc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80085e0:	2101      	movs	r1, #1
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fe0d 	bl	800a202 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80085fc:	2302      	movs	r3, #2
 80085fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d102      	bne.n	8008616 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2203      	movs	r2, #3
 8008614:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b0b      	cmp	r3, #11
 800861e:	f200 81bb 	bhi.w	8008998 <USBH_Process+0x3a4>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <USBH_Process+0x34>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	08008659 	.word	0x08008659
 800862c:	0800868b 	.word	0x0800868b
 8008630:	080086f3 	.word	0x080086f3
 8008634:	08008933 	.word	0x08008933
 8008638:	08008999 	.word	0x08008999
 800863c:	08008793 	.word	0x08008793
 8008640:	080088d9 	.word	0x080088d9
 8008644:	080087c9 	.word	0x080087c9
 8008648:	080087e9 	.word	0x080087e9
 800864c:	08008807 	.word	0x08008807
 8008650:	0800884b 	.word	0x0800884b
 8008654:	0800891b 	.word	0x0800891b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 819b 	beq.w	800899c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800866c:	20c8      	movs	r0, #200	@ 0xc8
 800866e:	f001 fe12 	bl	800a296 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fd05 	bl	800a082 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008688:	e188      	b.n	800899c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008690:	2b01      	cmp	r3, #1
 8008692:	d107      	bne.n	80086a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086a2:	e18a      	b.n	80089ba <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80086aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086ae:	d914      	bls.n	80086da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80086b6:	3301      	adds	r3, #1
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d903      	bls.n	80086d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220d      	movs	r2, #13
 80086ce:	701a      	strb	r2, [r3, #0]
      break;
 80086d0:	e173      	b.n	80089ba <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	701a      	strb	r2, [r3, #0]
      break;
 80086d8:	e16f      	b.n	80089ba <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80086e0:	f103 020a 	add.w	r2, r3, #10
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80086ea:	200a      	movs	r0, #10
 80086ec:	f001 fdd3 	bl	800a296 <USBH_Delay>
      break;
 80086f0:	e163      	b.n	80089ba <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008702:	2104      	movs	r1, #4
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008708:	2064      	movs	r0, #100	@ 0x64
 800870a:	f001 fdc4 	bl	800a296 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fc90 	bl	800a034 <USBH_LL_GetSpeed>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2205      	movs	r2, #5
 8008722:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008724:	2100      	movs	r1, #0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 fa9b 	bl	8009c62 <USBH_AllocPipe>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008734:	2180      	movs	r1, #128	@ 0x80
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fa93 	bl	8009c62 <USBH_AllocPipe>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7919      	ldrb	r1, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008758:	9202      	str	r2, [sp, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	9201      	str	r2, [sp, #4]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4603      	mov	r3, r0
 8008762:	2280      	movs	r2, #128	@ 0x80
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fa4d 	bl	8009c04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7959      	ldrb	r1, [r3, #5]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800877e:	9202      	str	r2, [sp, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	9201      	str	r2, [sp, #4]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	4603      	mov	r3, r0
 8008788:	2200      	movs	r2, #0
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fa3a 	bl	8009c04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008790:	e113      	b.n	80089ba <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f916 	bl	80089c4 <USBH_HandleEnum>
 8008798:	4603      	mov	r3, r0
 800879a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 80fd 	bne.w	80089a0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d103      	bne.n	80087c0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2208      	movs	r2, #8
 80087bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087be:	e0ef      	b.n	80089a0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2207      	movs	r2, #7
 80087c4:	701a      	strb	r2, [r3, #0]
      break;
 80087c6:	e0eb      	b.n	80089a0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80e8 	beq.w	80089a4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2208      	movs	r2, #8
 80087e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80087e6:	e0dd      	b.n	80089a4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc3a 	bl	800906a <USBH_SetCfg>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f040 80d5 	bne.w	80089a8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2209      	movs	r2, #9
 8008802:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008804:	e0d0      	b.n	80089a8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d016      	beq.n	8008842 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008814:	2101      	movs	r1, #1
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fc4a 	bl	80090b0 <USBH_SetFeature>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	220a      	movs	r2, #10
 800882c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800882e:	e0bd      	b.n	80089ac <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b03      	cmp	r3, #3
 8008836:	f040 80b9 	bne.w	80089ac <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	220a      	movs	r2, #10
 800883e:	701a      	strb	r2, [r3, #0]
      break;
 8008840:	e0b4      	b.n	80089ac <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	220a      	movs	r2, #10
 8008846:	701a      	strb	r2, [r3, #0]
      break;
 8008848:	e0b0      	b.n	80089ac <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80ad 	beq.w	80089b0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
 8008862:	e016      	b.n	8008892 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008864:	7bfa      	ldrb	r2, [r7, #15]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	32de      	adds	r2, #222	@ 0xde
 800886a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886e:	791a      	ldrb	r2, [r3, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008876:	429a      	cmp	r2, r3
 8008878:	d108      	bne.n	800888c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800887a:	7bfa      	ldrb	r2, [r7, #15]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	32de      	adds	r2, #222	@ 0xde
 8008880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800888a:	e005      	b.n	8008898 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	3301      	adds	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0e5      	beq.n	8008864 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d016      	beq.n	80088d0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2206      	movs	r2, #6
 80088b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088c0:	2103      	movs	r1, #3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088c6:	e073      	b.n	80089b0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	220d      	movs	r2, #13
 80088cc:	701a      	strb	r2, [r3, #0]
      break;
 80088ce:	e06f      	b.n	80089b0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	220d      	movs	r2, #13
 80088d4:	701a      	strb	r2, [r3, #0]
      break;
 80088d6:	e06b      	b.n	80089b0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d017      	beq.n	8008912 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
 80088ee:	4603      	mov	r3, r0
 80088f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	220b      	movs	r2, #11
 80088fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008900:	e058      	b.n	80089b4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d154      	bne.n	80089b4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	220d      	movs	r2, #13
 800890e:	701a      	strb	r2, [r3, #0]
      break;
 8008910:	e050      	b.n	80089b4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	220d      	movs	r2, #13
 8008916:	701a      	strb	r2, [r3, #0]
      break;
 8008918:	e04c      	b.n	80089b4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d049      	beq.n	80089b8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	4798      	blx	r3
      }
      break;
 8008930:	e042      	b.n	80089b8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fd4a 	bl	80083d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800896e:	2105      	movs	r1, #5
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b01      	cmp	r3, #1
 800897e:	d107      	bne.n	8008990 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fe22 	bl	80085d2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800898e:	e014      	b.n	80089ba <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fb19 	bl	8009fc8 <USBH_LL_Start>
      break;
 8008996:	e010      	b.n	80089ba <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008998:	bf00      	nop
 800899a:	e00e      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 800899c:	bf00      	nop
 800899e:	e00c      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 80089a0:	bf00      	nop
 80089a2:	e00a      	b.n	80089ba <USBH_Process+0x3c6>
    break;
 80089a4:	bf00      	nop
 80089a6:	e008      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 80089a8:	bf00      	nop
 80089aa:	e006      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 80089ac:	bf00      	nop
 80089ae:	e004      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 80089b0:	bf00      	nop
 80089b2:	e002      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <USBH_Process+0x3c6>
      break;
 80089b8:	bf00      	nop
  }
  return USBH_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	785b      	ldrb	r3, [r3, #1]
 80089d8:	2b07      	cmp	r3, #7
 80089da:	f200 81bd 	bhi.w	8008d58 <USBH_HandleEnum+0x394>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <USBH_HandleEnum+0x20>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008abf 	.word	0x08008abf
 80089ec:	08008b29 	.word	0x08008b29
 80089f0:	08008bb3 	.word	0x08008bb3
 80089f4:	08008c1d 	.word	0x08008c1d
 80089f8:	08008c8d 	.word	0x08008c8d
 80089fc:	08008cd3 	.word	0x08008cd3
 8008a00:	08008d19 	.word	0x08008d19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008a04:	2108      	movs	r1, #8
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa4c 	bl	8008ea4 <USBH_Get_DevDesc>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d12e      	bne.n	8008a74 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7919      	ldrb	r1, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a3a:	9202      	str	r2, [sp, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	9201      	str	r2, [sp, #4]
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	4603      	mov	r3, r0
 8008a44:	2280      	movs	r2, #128	@ 0x80
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 f8dc 	bl	8009c04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7959      	ldrb	r1, [r3, #5]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a60:	9202      	str	r2, [sp, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	9201      	str	r2, [sp, #4]
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f8c9 	bl	8009c04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a72:	e173      	b.n	8008d5c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	f040 8170 	bne.w	8008d5c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a82:	3301      	adds	r3, #1
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d903      	bls.n	8008a9e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	220d      	movs	r2, #13
 8008a9a:	701a      	strb	r2, [r3, #0]
      break;
 8008a9c:	e15e      	b.n	8008d5c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	795b      	ldrb	r3, [r3, #5]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 f8fd 	bl	8009ca4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	791b      	ldrb	r3, [r3, #4]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f8f7 	bl	8009ca4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
      break;
 8008abc:	e14e      	b.n	8008d5c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008abe:	2112      	movs	r1, #18
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9ef 	bl	8008ea4 <USBH_Get_DevDesc>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ad6:	e143      	b.n	8008d60 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	f040 8140 	bne.w	8008d60 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d903      	bls.n	8008b02 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	220d      	movs	r2, #13
 8008afe:	701a      	strb	r2, [r3, #0]
      break;
 8008b00:	e12e      	b.n	8008d60 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	795b      	ldrb	r3, [r3, #5]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f8cb 	bl	8009ca4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	791b      	ldrb	r3, [r3, #4]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f8c5 	bl	8009ca4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]
      break;
 8008b26:	e11b      	b.n	8008d60 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa79 	bl	8009022 <USBH_SetAddress>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d130      	bne.n	8008b9c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008b3a:	2002      	movs	r0, #2
 8008b3c:	f001 fbab 	bl	800a296 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7919      	ldrb	r1, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b62:	9202      	str	r2, [sp, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	9201      	str	r2, [sp, #4]
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2280      	movs	r2, #128	@ 0x80
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 f848 	bl	8009c04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7959      	ldrb	r1, [r3, #5]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b88:	9202      	str	r2, [sp, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	9201      	str	r2, [sp, #4]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	4603      	mov	r3, r0
 8008b92:	2200      	movs	r2, #0
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 f835 	bl	8009c04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b9a:	e0e3      	b.n	8008d64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	f040 80e0 	bne.w	8008d64 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	220d      	movs	r2, #13
 8008ba8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
      break;
 8008bb0:	e0d8      	b.n	8008d64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008bb2:	2109      	movs	r1, #9
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f9a1 	bl	8008efc <USBH_Get_CfgDesc>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bca:	e0cd      	b.n	8008d68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	f040 80ca 	bne.w	8008d68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bda:	3301      	adds	r3, #1
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d903      	bls.n	8008bf6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	220d      	movs	r2, #13
 8008bf2:	701a      	strb	r2, [r3, #0]
      break;
 8008bf4:	e0b8      	b.n	8008d68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	795b      	ldrb	r3, [r3, #5]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 f851 	bl	8009ca4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	791b      	ldrb	r3, [r3, #4]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 f84b 	bl	8009ca4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	701a      	strb	r2, [r3, #0]
      break;
 8008c1a:	e0a5      	b.n	8008d68 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f969 	bl	8008efc <USBH_Get_CfgDesc>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2205      	movs	r2, #5
 8008c38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c3a:	e097      	b.n	8008d6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	f040 8094 	bne.w	8008d6c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d903      	bls.n	8008c66 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	220d      	movs	r2, #13
 8008c62:	701a      	strb	r2, [r3, #0]
      break;
 8008c64:	e082      	b.n	8008d6c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	795b      	ldrb	r3, [r3, #5]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f819 	bl	8009ca4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f813 	bl	8009ca4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
      break;
 8008c8a:	e06f      	b.n	8008d6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d019      	beq.n	8008cca <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ca2:	23ff      	movs	r3, #255	@ 0xff
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f953 	bl	8008f50 <USBH_Get_StringDesc>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2206      	movs	r2, #6
 8008cb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cba:	e059      	b.n	8008d70 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d156      	bne.n	8008d70 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2206      	movs	r2, #6
 8008cc6:	705a      	strb	r2, [r3, #1]
      break;
 8008cc8:	e052      	b.n	8008d70 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2206      	movs	r2, #6
 8008cce:	705a      	strb	r2, [r3, #1]
      break;
 8008cd0:	e04e      	b.n	8008d70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d019      	beq.n	8008d10 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ce8:	23ff      	movs	r3, #255	@ 0xff
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f930 	bl	8008f50 <USBH_Get_StringDesc>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d00:	e038      	b.n	8008d74 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d135      	bne.n	8008d74 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2207      	movs	r2, #7
 8008d0c:	705a      	strb	r2, [r3, #1]
      break;
 8008d0e:	e031      	b.n	8008d74 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2207      	movs	r2, #7
 8008d14:	705a      	strb	r2, [r3, #1]
      break;
 8008d16:	e02d      	b.n	8008d74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d017      	beq.n	8008d52 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d2e:	23ff      	movs	r3, #255	@ 0xff
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f90d 	bl	8008f50 <USBH_Get_StringDesc>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008d44:	e018      	b.n	8008d78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d115      	bne.n	8008d78 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d50:	e012      	b.n	8008d78 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]
      break;
 8008d56:	e00f      	b.n	8008d78 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008d58:	bf00      	nop
 8008d5a:	e00e      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d5c:	bf00      	nop
 8008d5e:	e00c      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d60:	bf00      	nop
 8008d62:	e00a      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d64:	bf00      	nop
 8008d66:	e008      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d68:	bf00      	nop
 8008d6a:	e006      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d6c:	bf00      	nop
 8008d6e:	e004      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d70:	bf00      	nop
 8008d72:	e002      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d74:	bf00      	nop
 8008d76:	e000      	b.n	8008d7a <USBH_HandleEnum+0x3b6>
      break;
 8008d78:	bf00      	nop
  }
  return Status;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f804 	bl	8008dc6 <USBH_HandleSof>
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b0b      	cmp	r3, #11
 8008dd6:	d10a      	bne.n	8008dee <USBH_HandleSof+0x28>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
  }
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008e06:	bf00      	nop
}
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008e22:	bf00      	nop
}
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f8be 	bl	8009ffe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	791b      	ldrb	r3, [r3, #4]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 ff0b 	bl	8009ca4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	795b      	ldrb	r3, [r3, #5]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 ff05 	bl	8009ca4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008eb0:	887b      	ldrh	r3, [r7, #2]
 8008eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eb6:	d901      	bls.n	8008ebc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e01b      	b.n	8008ef4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008ec2:	887b      	ldrh	r3, [r7, #2]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f872 	bl	8008fb8 <USBH_GetDescriptor>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d109      	bne.n	8008ef2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ee4:	887a      	ldrh	r2, [r7, #2]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f929 	bl	8009140 <USBH_ParseDevDesc>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	331c      	adds	r3, #28
 8008f0c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008f0e:	887b      	ldrh	r3, [r7, #2]
 8008f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f14:	d901      	bls.n	8008f1a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e016      	b.n	8008f48 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008f1a:	887b      	ldrh	r3, [r7, #2]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f846 	bl	8008fb8 <USBH_GetDescriptor>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008f36:	887b      	ldrh	r3, [r7, #2]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9af 	bl	80092a0 <USBH_ParseCfgDesc>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	72fb      	strb	r3, [r7, #11]
 8008f60:	4613      	mov	r3, r2
 8008f62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008f64:	893b      	ldrh	r3, [r7, #8]
 8008f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6a:	d802      	bhi.n	8008f72 <USBH_Get_StringDesc+0x22>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e01c      	b.n	8008fb0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008f7e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008f86:	893b      	ldrh	r3, [r7, #8]
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f812 	bl	8008fb8 <USBH_GetDescriptor>
 8008f94:	4603      	mov	r3, r0
 8008f96:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d107      	bne.n	8008fae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008fa4:	893a      	ldrh	r2, [r7, #8]
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fb8d 	bl	80096c8 <USBH_ParseStringDesc>
  }

  return status;
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	607b      	str	r3, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	72fb      	strb	r3, [r7, #11]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	789b      	ldrb	r3, [r3, #2]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d11c      	bne.n	800900c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008fd2:	7afb      	ldrb	r3, [r7, #11]
 8008fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2206      	movs	r2, #6
 8008fe2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	893a      	ldrh	r2, [r7, #8]
 8008fe8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008fea:	893b      	ldrh	r3, [r7, #8]
 8008fec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ff4:	d104      	bne.n	8009000 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f240 4209 	movw	r2, #1033	@ 0x409
 8008ffc:	829a      	strh	r2, [r3, #20]
 8008ffe:	e002      	b.n	8009006 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8b3a      	ldrh	r2, [r7, #24]
 800900a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800900c:	8b3b      	ldrh	r3, [r7, #24]
 800900e:	461a      	mov	r2, r3
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fba5 	bl	8009762 <USBH_CtlReq>
 8009018:	4603      	mov	r3, r0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	789b      	ldrb	r3, [r3, #2]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d10f      	bne.n	8009056 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2205      	movs	r2, #5
 8009040:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	b29a      	uxth	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fb81 	bl	8009762 <USBH_CtlReq>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	789b      	ldrb	r3, [r3, #2]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d10e      	bne.n	800909c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2209      	movs	r2, #9
 8009088:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	887a      	ldrh	r2, [r7, #2]
 800908e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800909c:	2200      	movs	r2, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fb5e 	bl	8009762 <USBH_CtlReq>
 80090a6:	4603      	mov	r3, r0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	789b      	ldrb	r3, [r3, #2]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d10f      	bne.n	80090e4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2203      	movs	r2, #3
 80090ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090e4:	2200      	movs	r2, #0
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fb3a 	bl	8009762 <USBH_CtlReq>
 80090ee:	4603      	mov	r3, r0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	789b      	ldrb	r3, [r3, #2]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d10f      	bne.n	800912c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800912c:	2200      	movs	r2, #0
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fb16 	bl	8009762 <USBH_CtlReq>
 8009136:	4603      	mov	r3, r0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009154:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009160:	2302      	movs	r3, #2
 8009162:	e094      	b.n	800928e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	785a      	ldrb	r2, [r3, #1]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	3302      	adds	r3, #2
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	3303      	adds	r3, #3
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	b29b      	uxth	r3, r3
 8009186:	4313      	orrs	r3, r2
 8009188:	b29a      	uxth	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	791a      	ldrb	r2, [r3, #4]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	795a      	ldrb	r2, [r3, #5]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	799a      	ldrb	r2, [r3, #6]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	79da      	ldrb	r2, [r3, #7]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d11b      	bne.n	80091fa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	79db      	ldrb	r3, [r3, #7]
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	dc0f      	bgt.n	80091ea <USBH_ParseDevDesc+0xaa>
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	db0f      	blt.n	80091ee <USBH_ParseDevDesc+0xae>
 80091ce:	3b08      	subs	r3, #8
 80091d0:	4a32      	ldr	r2, [pc, #200]	@ (800929c <USBH_ParseDevDesc+0x15c>)
 80091d2:	fa22 f303 	lsr.w	r3, r2, r3
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bf14      	ite	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	2300      	moveq	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <USBH_ParseDevDesc+0xb6>
 80091e8:	e001      	b.n	80091ee <USBH_ParseDevDesc+0xae>
 80091ea:	2b40      	cmp	r3, #64	@ 0x40
 80091ec:	d003      	beq.n	80091f6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2208      	movs	r2, #8
 80091f2:	71da      	strb	r2, [r3, #7]
        break;
 80091f4:	e000      	b.n	80091f8 <USBH_ParseDevDesc+0xb8>
        break;
 80091f6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80091f8:	e00e      	b.n	8009218 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009200:	2b02      	cmp	r3, #2
 8009202:	d107      	bne.n	8009214 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	79db      	ldrb	r3, [r3, #7]
 8009208:	2b08      	cmp	r3, #8
 800920a:	d005      	beq.n	8009218 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	2208      	movs	r2, #8
 8009210:	71da      	strb	r2, [r3, #7]
 8009212:	e001      	b.n	8009218 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009214:	2303      	movs	r3, #3
 8009216:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	2b08      	cmp	r3, #8
 800921c:	d936      	bls.n	800928c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	3308      	adds	r3, #8
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	3309      	adds	r3, #9
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	b29b      	uxth	r3, r3
 8009230:	4313      	orrs	r3, r2
 8009232:	b29a      	uxth	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	330a      	adds	r3, #10
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	330b      	adds	r3, #11
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	b29b      	uxth	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b29a      	uxth	r2, r3
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	330c      	adds	r3, #12
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	330d      	adds	r3, #13
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	021b      	lsls	r3, r3, #8
 8009262:	b29b      	uxth	r3, r3
 8009264:	4313      	orrs	r3, r2
 8009266:	b29a      	uxth	r2, r3
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	7b9a      	ldrb	r2, [r3, #14]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	7bda      	ldrb	r2, [r3, #15]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	7c1a      	ldrb	r2, [r3, #16]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	7c5a      	ldrb	r2, [r3, #17]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800928c:	7dfb      	ldrb	r3, [r7, #23]
}
 800928e:	4618      	mov	r0, r3
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	01000101 	.word	0x01000101

080092a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08c      	sub	sp, #48	@ 0x30
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80092b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80092ce:	2302      	movs	r3, #2
 80092d0:	e0da      	b.n	8009488 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d002      	beq.n	80092e4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	2209      	movs	r2, #9
 80092e2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	781a      	ldrb	r2, [r3, #0]
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	785a      	ldrb	r2, [r3, #1]
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	3302      	adds	r3, #2
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	3303      	adds	r3, #3
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	b29b      	uxth	r3, r3
 8009306:	4313      	orrs	r3, r2
 8009308:	b29b      	uxth	r3, r3
 800930a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800930e:	bf28      	it	cs
 8009310:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009314:	b29a      	uxth	r2, r3
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	791a      	ldrb	r2, [r3, #4]
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	795a      	ldrb	r2, [r3, #5]
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	799a      	ldrb	r2, [r3, #6]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	79da      	ldrb	r2, [r3, #7]
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	7a1a      	ldrb	r2, [r3, #8]
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	2b09      	cmp	r3, #9
 8009346:	f240 809d 	bls.w	8009484 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800934a:	2309      	movs	r3, #9
 800934c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009352:	e081      	b.n	8009458 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009354:	f107 0316 	add.w	r3, r7, #22
 8009358:	4619      	mov	r1, r3
 800935a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800935c:	f000 f9e7 	bl	800972e <USBH_GetNextDesc>
 8009360:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009364:	785b      	ldrb	r3, [r3, #1]
 8009366:	2b04      	cmp	r3, #4
 8009368:	d176      	bne.n	8009458 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b09      	cmp	r3, #9
 8009370:	d002      	beq.n	8009378 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	2209      	movs	r2, #9
 8009376:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800937c:	221a      	movs	r2, #26
 800937e:	fb02 f303 	mul.w	r3, r2, r3
 8009382:	3308      	adds	r3, #8
 8009384:	6a3a      	ldr	r2, [r7, #32]
 8009386:	4413      	add	r3, r2
 8009388:	3302      	adds	r3, #2
 800938a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800938c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800938e:	69f8      	ldr	r0, [r7, #28]
 8009390:	f000 f87e 	bl	8009490 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800939a:	2300      	movs	r3, #0
 800939c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800939e:	e043      	b.n	8009428 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093a0:	f107 0316 	add.w	r3, r7, #22
 80093a4:	4619      	mov	r1, r3
 80093a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093a8:	f000 f9c1 	bl	800972e <USBH_GetNextDesc>
 80093ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d138      	bne.n	8009428 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	795b      	ldrb	r3, [r3, #5]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d113      	bne.n	80093e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d003      	beq.n	80093ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	799b      	ldrb	r3, [r3, #6]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d10b      	bne.n	80093e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	79db      	ldrb	r3, [r3, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10b      	bne.n	80093ee <USBH_ParseCfgDesc+0x14e>
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b09      	cmp	r3, #9
 80093dc:	d007      	beq.n	80093ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	2209      	movs	r2, #9
 80093e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80093e4:	e003      	b.n	80093ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	2207      	movs	r2, #7
 80093ea:	701a      	strb	r2, [r3, #0]
 80093ec:	e000      	b.n	80093f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80093ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80093f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80093f8:	3201      	adds	r2, #1
 80093fa:	00d2      	lsls	r2, r2, #3
 80093fc:	211a      	movs	r1, #26
 80093fe:	fb01 f303 	mul.w	r3, r1, r3
 8009402:	4413      	add	r3, r2
 8009404:	3308      	adds	r3, #8
 8009406:	6a3a      	ldr	r2, [r7, #32]
 8009408:	4413      	add	r3, r2
 800940a:	3304      	adds	r3, #4
 800940c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800940e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009410:	69b9      	ldr	r1, [r7, #24]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 f870 	bl	80094f8 <USBH_ParseEPDesc>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800941e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009422:	3301      	adds	r3, #1
 8009424:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009430:	429a      	cmp	r2, r3
 8009432:	d204      	bcs.n	800943e <USBH_ParseCfgDesc+0x19e>
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	885a      	ldrh	r2, [r3, #2]
 8009438:	8afb      	ldrh	r3, [r7, #22]
 800943a:	429a      	cmp	r2, r3
 800943c:	d8b0      	bhi.n	80093a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	791b      	ldrb	r3, [r3, #4]
 8009442:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009446:	429a      	cmp	r2, r3
 8009448:	d201      	bcs.n	800944e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800944a:	2303      	movs	r3, #3
 800944c:	e01c      	b.n	8009488 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800944e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009452:	3301      	adds	r3, #1
 8009454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800945c:	2b01      	cmp	r3, #1
 800945e:	d805      	bhi.n	800946c <USBH_ParseCfgDesc+0x1cc>
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	885a      	ldrh	r2, [r3, #2]
 8009464:	8afb      	ldrh	r3, [r7, #22]
 8009466:	429a      	cmp	r2, r3
 8009468:	f63f af74 	bhi.w	8009354 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	791b      	ldrb	r3, [r3, #4]
 8009470:	2b02      	cmp	r3, #2
 8009472:	bf28      	it	cs
 8009474:	2302      	movcs	r3, #2
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800947c:	429a      	cmp	r2, r3
 800947e:	d201      	bcs.n	8009484 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009480:	2303      	movs	r3, #3
 8009482:	e001      	b.n	8009488 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009488:	4618      	mov	r0, r3
 800948a:	3730      	adds	r7, #48	@ 0x30
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781a      	ldrb	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	785a      	ldrb	r2, [r3, #1]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	789a      	ldrb	r2, [r3, #2]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	78da      	ldrb	r2, [r3, #3]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	3304      	adds	r3, #4
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	bf28      	it	cs
 80094c4:	2302      	movcs	r3, #2
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	795a      	ldrb	r2, [r3, #5]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	799a      	ldrb	r2, [r3, #6]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	79da      	ldrb	r2, [r3, #7]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	7a1a      	ldrb	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	721a      	strb	r2, [r3, #8]
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	785a      	ldrb	r2, [r3, #1]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	789a      	ldrb	r2, [r3, #2]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	78da      	ldrb	r2, [r3, #3]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3304      	adds	r3, #4
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3305      	adds	r3, #5
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	b29b      	uxth	r3, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	799a      	ldrb	r2, [r3, #6]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	889b      	ldrh	r3, [r3, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800955a:	d804      	bhi.n	8009566 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009564:	d901      	bls.n	800956a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009566:	2303      	movs	r3, #3
 8009568:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009570:	2b00      	cmp	r3, #0
 8009572:	d136      	bne.n	80095e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	78db      	ldrb	r3, [r3, #3]
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	2b02      	cmp	r3, #2
 800957e:	d108      	bne.n	8009592 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	889b      	ldrh	r3, [r3, #4]
 8009584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009588:	f240 8097 	bls.w	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800958c:	2303      	movs	r3, #3
 800958e:	75fb      	strb	r3, [r7, #23]
 8009590:	e093      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	78db      	ldrb	r3, [r3, #3]
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d107      	bne.n	80095ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	889b      	ldrh	r3, [r3, #4]
 80095a2:	2b40      	cmp	r3, #64	@ 0x40
 80095a4:	f240 8089 	bls.w	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80095a8:	2303      	movs	r3, #3
 80095aa:	75fb      	strb	r3, [r7, #23]
 80095ac:	e085      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	78db      	ldrb	r3, [r3, #3]
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d005      	beq.n	80095c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	78db      	ldrb	r3, [r3, #3]
 80095be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d10a      	bne.n	80095dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	799b      	ldrb	r3, [r3, #6]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <USBH_ParseEPDesc+0xde>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	799b      	ldrb	r3, [r3, #6]
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d970      	bls.n	80096b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80095d6:	2303      	movs	r3, #3
 80095d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80095da:	e06d      	b.n	80096b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80095dc:	2303      	movs	r3, #3
 80095de:	75fb      	strb	r3, [r7, #23]
 80095e0:	e06b      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d13c      	bne.n	8009666 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	78db      	ldrb	r3, [r3, #3]
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d005      	beq.n	8009604 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	78db      	ldrb	r3, [r3, #3]
 80095fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	889b      	ldrh	r3, [r3, #4]
 8009608:	2b40      	cmp	r3, #64	@ 0x40
 800960a:	d956      	bls.n	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800960c:	2303      	movs	r3, #3
 800960e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009610:	e053      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	78db      	ldrb	r3, [r3, #3]
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	2b01      	cmp	r3, #1
 800961c:	d10e      	bne.n	800963c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	799b      	ldrb	r3, [r3, #6]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800962a:	2b10      	cmp	r3, #16
 800962c:	d803      	bhi.n	8009636 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009632:	2b40      	cmp	r3, #64	@ 0x40
 8009634:	d941      	bls.n	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009636:	2303      	movs	r3, #3
 8009638:	75fb      	strb	r3, [r7, #23]
 800963a:	e03e      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	78db      	ldrb	r3, [r3, #3]
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	2b03      	cmp	r3, #3
 8009646:	d10b      	bne.n	8009660 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	799b      	ldrb	r3, [r3, #6]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <USBH_ParseEPDesc+0x162>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	889b      	ldrh	r3, [r3, #4]
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009658:	d32f      	bcc.n	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800965a:	2303      	movs	r3, #3
 800965c:	75fb      	strb	r3, [r7, #23]
 800965e:	e02c      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009660:	2303      	movs	r3, #3
 8009662:	75fb      	strb	r3, [r7, #23]
 8009664:	e029      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800966c:	2b02      	cmp	r3, #2
 800966e:	d120      	bne.n	80096b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	78db      	ldrb	r3, [r3, #3]
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	889b      	ldrh	r3, [r3, #4]
 8009680:	2b08      	cmp	r3, #8
 8009682:	d01a      	beq.n	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009684:	2303      	movs	r3, #3
 8009686:	75fb      	strb	r3, [r7, #23]
 8009688:	e017      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	78db      	ldrb	r3, [r3, #3]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b03      	cmp	r3, #3
 8009694:	d10a      	bne.n	80096ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	799b      	ldrb	r3, [r3, #6]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <USBH_ParseEPDesc+0x1ae>
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	889b      	ldrh	r3, [r3, #4]
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d909      	bls.n	80096ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096a6:	2303      	movs	r3, #3
 80096a8:	75fb      	strb	r3, [r7, #23]
 80096aa:	e006      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80096ac:	2303      	movs	r3, #3
 80096ae:	75fb      	strb	r3, [r7, #23]
 80096b0:	e003      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80096b2:	2303      	movs	r3, #3
 80096b4:	75fb      	strb	r3, [r7, #23]
 80096b6:	e000      	b.n	80096ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096b8:	bf00      	nop
  }

  return status;
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d120      	bne.n	8009722 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	1e9a      	subs	r2, r3, #2
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	4293      	cmp	r3, r2
 80096ea:	bf28      	it	cs
 80096ec:	4613      	movcs	r3, r2
 80096ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3302      	adds	r3, #2
 80096f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80096f6:	2300      	movs	r3, #0
 80096f8:	82fb      	strh	r3, [r7, #22]
 80096fa:	e00b      	b.n	8009714 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80096fc:	8afb      	ldrh	r3, [r7, #22]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	781a      	ldrb	r2, [r3, #0]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3301      	adds	r3, #1
 800970c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800970e:	8afb      	ldrh	r3, [r7, #22]
 8009710:	3302      	adds	r3, #2
 8009712:	82fb      	strh	r3, [r7, #22]
 8009714:	8afa      	ldrh	r2, [r7, #22]
 8009716:	8abb      	ldrh	r3, [r7, #20]
 8009718:	429a      	cmp	r2, r3
 800971a:	d3ef      	bcc.n	80096fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
  }
}
 8009722:	bf00      	nop
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7812      	ldrb	r2, [r2, #0]
 8009740:	4413      	add	r3, r2
 8009742:	b29a      	uxth	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4413      	add	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009754:	68fb      	ldr	r3, [r7, #12]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	4613      	mov	r3, r2
 800976e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009770:	2301      	movs	r3, #1
 8009772:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	789b      	ldrb	r3, [r3, #2]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d002      	beq.n	8009782 <USBH_CtlReq+0x20>
 800977c:	2b02      	cmp	r3, #2
 800977e:	d00f      	beq.n	80097a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009780:	e027      	b.n	80097d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2202      	movs	r2, #2
 8009798:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800979a:	2301      	movs	r3, #1
 800979c:	75fb      	strb	r3, [r7, #23]
      break;
 800979e:	e018      	b.n	80097d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f81b 	bl	80097dc <USBH_HandleControl>
 80097a6:	4603      	mov	r3, r0
 80097a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <USBH_CtlReq+0x54>
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d106      	bne.n	80097c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	761a      	strb	r2, [r3, #24]
      break;
 80097c2:	e005      	b.n	80097d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d102      	bne.n	80097d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	709a      	strb	r2, [r3, #2]
      break;
 80097d0:	bf00      	nop
  }
  return status;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80097e4:	2301      	movs	r3, #1
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7e1b      	ldrb	r3, [r3, #24]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	2b0a      	cmp	r3, #10
 80097f4:	f200 8156 	bhi.w	8009aa4 <USBH_HandleControl+0x2c8>
 80097f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <USBH_HandleControl+0x24>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	0800982d 	.word	0x0800982d
 8009804:	08009847 	.word	0x08009847
 8009808:	080098b1 	.word	0x080098b1
 800980c:	080098d7 	.word	0x080098d7
 8009810:	0800990f 	.word	0x0800990f
 8009814:	08009939 	.word	0x08009939
 8009818:	0800998b 	.word	0x0800998b
 800981c:	080099ad 	.word	0x080099ad
 8009820:	080099e9 	.word	0x080099e9
 8009824:	08009a0f 	.word	0x08009a0f
 8009828:	08009a4d 	.word	0x08009a4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f103 0110 	add.w	r1, r3, #16
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	795b      	ldrb	r3, [r3, #5]
 8009836:	461a      	mov	r2, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f943 	bl	8009ac4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	761a      	strb	r2, [r3, #24]
      break;
 8009844:	e139      	b.n	8009aba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	795b      	ldrb	r3, [r3, #5]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fcc5 	bl	800a1dc <USBH_LL_GetURBState>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d11e      	bne.n	800989a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7c1b      	ldrb	r3, [r3, #16]
 8009860:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009864:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	8adb      	ldrh	r3, [r3, #22]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800986e:	7b7b      	ldrb	r3, [r7, #13]
 8009870:	2b80      	cmp	r3, #128	@ 0x80
 8009872:	d103      	bne.n	800987c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2203      	movs	r2, #3
 8009878:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800987a:	e115      	b.n	8009aa8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2205      	movs	r2, #5
 8009880:	761a      	strb	r2, [r3, #24]
      break;
 8009882:	e111      	b.n	8009aa8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009884:	7b7b      	ldrb	r3, [r7, #13]
 8009886:	2b80      	cmp	r3, #128	@ 0x80
 8009888:	d103      	bne.n	8009892 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2209      	movs	r2, #9
 800988e:	761a      	strb	r2, [r3, #24]
      break;
 8009890:	e10a      	b.n	8009aa8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2207      	movs	r2, #7
 8009896:	761a      	strb	r2, [r3, #24]
      break;
 8009898:	e106      	b.n	8009aa8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d003      	beq.n	80098a8 <USBH_HandleControl+0xcc>
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	f040 8100 	bne.w	8009aa8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	220b      	movs	r2, #11
 80098ac:	761a      	strb	r2, [r3, #24]
      break;
 80098ae:	e0fb      	b.n	8009aa8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6899      	ldr	r1, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	899a      	ldrh	r2, [r3, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	791b      	ldrb	r3, [r3, #4]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f93a 	bl	8009b42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2204      	movs	r2, #4
 80098d2:	761a      	strb	r2, [r3, #24]
      break;
 80098d4:	e0f1      	b.n	8009aba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	791b      	ldrb	r3, [r3, #4]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fc7d 	bl	800a1dc <USBH_LL_GetURBState>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d102      	bne.n	80098f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2209      	movs	r2, #9
 80098f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b05      	cmp	r3, #5
 80098f6:	d102      	bne.n	80098fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80098f8:	2303      	movs	r3, #3
 80098fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098fc:	e0d6      	b.n	8009aac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b04      	cmp	r3, #4
 8009902:	f040 80d3 	bne.w	8009aac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	220b      	movs	r2, #11
 800990a:	761a      	strb	r2, [r3, #24]
      break;
 800990c:	e0ce      	b.n	8009aac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6899      	ldr	r1, [r3, #8]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	899a      	ldrh	r2, [r3, #12]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	795b      	ldrb	r3, [r3, #5]
 800991a:	2001      	movs	r0, #1
 800991c:	9000      	str	r0, [sp, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f8ea 	bl	8009af8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800992a:	b29a      	uxth	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2206      	movs	r2, #6
 8009934:	761a      	strb	r2, [r3, #24]
      break;
 8009936:	e0c0      	b.n	8009aba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	795b      	ldrb	r3, [r3, #5]
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fc4c 	bl	800a1dc <USBH_LL_GetURBState>
 8009944:	4603      	mov	r3, r0
 8009946:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d103      	bne.n	8009956 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2207      	movs	r2, #7
 8009952:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009954:	e0ac      	b.n	8009ab0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009956:	7bbb      	ldrb	r3, [r7, #14]
 8009958:	2b05      	cmp	r3, #5
 800995a:	d105      	bne.n	8009968 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	220c      	movs	r2, #12
 8009960:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009962:	2303      	movs	r3, #3
 8009964:	73fb      	strb	r3, [r7, #15]
      break;
 8009966:	e0a3      	b.n	8009ab0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	2b02      	cmp	r3, #2
 800996c:	d103      	bne.n	8009976 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2205      	movs	r2, #5
 8009972:	761a      	strb	r2, [r3, #24]
      break;
 8009974:	e09c      	b.n	8009ab0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b04      	cmp	r3, #4
 800997a:	f040 8099 	bne.w	8009ab0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	220b      	movs	r2, #11
 8009982:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009984:	2302      	movs	r3, #2
 8009986:	73fb      	strb	r3, [r7, #15]
      break;
 8009988:	e092      	b.n	8009ab0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	791b      	ldrb	r3, [r3, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	2100      	movs	r1, #0
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8d5 	bl	8009b42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800999e:	b29a      	uxth	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2208      	movs	r2, #8
 80099a8:	761a      	strb	r2, [r3, #24]

      break;
 80099aa:	e086      	b.n	8009aba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	791b      	ldrb	r3, [r3, #4]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fc12 	bl	800a1dc <USBH_LL_GetURBState>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d105      	bne.n	80099ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	220d      	movs	r2, #13
 80099c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099cc:	e072      	b.n	8009ab4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d103      	bne.n	80099dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	220b      	movs	r2, #11
 80099d8:	761a      	strb	r2, [r3, #24]
      break;
 80099da:	e06b      	b.n	8009ab4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	2b05      	cmp	r3, #5
 80099e0:	d168      	bne.n	8009ab4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80099e2:	2303      	movs	r3, #3
 80099e4:	73fb      	strb	r3, [r7, #15]
      break;
 80099e6:	e065      	b.n	8009ab4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	795b      	ldrb	r3, [r3, #5]
 80099ec:	2201      	movs	r2, #1
 80099ee:	9200      	str	r2, [sp, #0]
 80099f0:	2200      	movs	r2, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f87f 	bl	8009af8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	220a      	movs	r2, #10
 8009a0a:	761a      	strb	r2, [r3, #24]
      break;
 8009a0c:	e055      	b.n	8009aba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	795b      	ldrb	r3, [r3, #5]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fbe1 	bl	800a1dc <USBH_LL_GetURBState>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d105      	bne.n	8009a30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	220d      	movs	r2, #13
 8009a2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a2e:	e043      	b.n	8009ab8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d103      	bne.n	8009a3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2209      	movs	r2, #9
 8009a3a:	761a      	strb	r2, [r3, #24]
      break;
 8009a3c:	e03c      	b.n	8009ab8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d139      	bne.n	8009ab8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	220b      	movs	r2, #11
 8009a48:	761a      	strb	r2, [r3, #24]
      break;
 8009a4a:	e035      	b.n	8009ab8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	7e5b      	ldrb	r3, [r3, #25]
 8009a50:	3301      	adds	r3, #1
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	765a      	strb	r2, [r3, #25]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	7e5b      	ldrb	r3, [r3, #25]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d806      	bhi.n	8009a6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a6c:	e025      	b.n	8009aba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a74:	2106      	movs	r1, #6
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	795b      	ldrb	r3, [r3, #5]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f90c 	bl	8009ca4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	791b      	ldrb	r3, [r3, #4]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f906 	bl	8009ca4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa2:	e00a      	b.n	8009aba <USBH_HandleControl+0x2de>

    default:
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e008      	b.n	8009aba <USBH_HandleControl+0x2de>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e006      	b.n	8009aba <USBH_HandleControl+0x2de>
      break;
 8009aac:	bf00      	nop
 8009aae:	e004      	b.n	8009aba <USBH_HandleControl+0x2de>
      break;
 8009ab0:	bf00      	nop
 8009ab2:	e002      	b.n	8009aba <USBH_HandleControl+0x2de>
      break;
 8009ab4:	bf00      	nop
 8009ab6:	e000      	b.n	8009aba <USBH_HandleControl+0x2de>
      break;
 8009ab8:	bf00      	nop
  }

  return status;
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af04      	add	r7, sp, #16
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ad2:	79f9      	ldrb	r1, [r7, #7]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9303      	str	r3, [sp, #12]
 8009ad8:	2308      	movs	r3, #8
 8009ada:	9302      	str	r3, [sp, #8]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 fb46 	bl	800a17a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af04      	add	r7, sp, #16
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	4611      	mov	r1, r2
 8009b04:	461a      	mov	r2, r3
 8009b06:	460b      	mov	r3, r1
 8009b08:	80fb      	strh	r3, [r7, #6]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b1c:	7979      	ldrb	r1, [r7, #5]
 8009b1e:	7e3b      	ldrb	r3, [r7, #24]
 8009b20:	9303      	str	r3, [sp, #12]
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	9302      	str	r3, [sp, #8]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	2200      	movs	r2, #0
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 fb21 	bl	800a17a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b088      	sub	sp, #32
 8009b46:	af04      	add	r7, sp, #16
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	461a      	mov	r2, r3
 8009b50:	460b      	mov	r3, r1
 8009b52:	80fb      	strh	r3, [r7, #6]
 8009b54:	4613      	mov	r3, r2
 8009b56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b58:	7979      	ldrb	r1, [r7, #5]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	9303      	str	r3, [sp, #12]
 8009b5e:	88fb      	ldrh	r3, [r7, #6]
 8009b60:	9302      	str	r3, [sp, #8]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	2301      	movs	r3, #1
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fb03 	bl	800a17a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009b74:	2300      	movs	r3, #0

}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b088      	sub	sp, #32
 8009b82:	af04      	add	r7, sp, #16
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	80fb      	strh	r3, [r7, #6]
 8009b90:	4613      	mov	r3, r2
 8009b92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ba2:	7979      	ldrb	r1, [r7, #5]
 8009ba4:	7e3b      	ldrb	r3, [r7, #24]
 8009ba6:	9303      	str	r3, [sp, #12]
 8009ba8:	88fb      	ldrh	r3, [r7, #6]
 8009baa:	9302      	str	r3, [sp, #8]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fade 	bl	800a17a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af04      	add	r7, sp, #16
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	80fb      	strh	r3, [r7, #6]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bde:	7979      	ldrb	r1, [r7, #5]
 8009be0:	2300      	movs	r3, #0
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	9302      	str	r3, [sp, #8]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	2301      	movs	r3, #1
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 fac0 	bl	800a17a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af04      	add	r7, sp, #16
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	70fb      	strb	r3, [r7, #3]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70bb      	strb	r3, [r7, #2]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009c1e:	7878      	ldrb	r0, [r7, #1]
 8009c20:	78ba      	ldrb	r2, [r7, #2]
 8009c22:	78f9      	ldrb	r1, [r7, #3]
 8009c24:	8b3b      	ldrh	r3, [r7, #24]
 8009c26:	9302      	str	r3, [sp, #8]
 8009c28:	7d3b      	ldrb	r3, [r7, #20]
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	7c3b      	ldrb	r3, [r7, #16]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4603      	mov	r3, r0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa53 	bl	800a0de <USBH_LL_OpenPipe>

  return USBH_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa72 	bl	800a13c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f836 	bl	8009ce0 <USBH_GetFreePipe>
 8009c74:	4603      	mov	r3, r0
 8009c76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c78:	89fb      	ldrh	r3, [r7, #14]
 8009c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00a      	beq.n	8009c98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	89fb      	ldrh	r3, [r7, #14]
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	33e0      	adds	r3, #224	@ 0xe0
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c98:	89fb      	ldrh	r3, [r7, #14]
 8009c9a:	b2db      	uxtb	r3, r3
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	2b0f      	cmp	r3, #15
 8009cb4:	d80d      	bhi.n	8009cd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	33e0      	adds	r3, #224	@ 0xe0
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	33e0      	adds	r3, #224	@ 0xe0
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
 8009cf0:	e00f      	b.n	8009d12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	33e0      	adds	r3, #224	@ 0xe0
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	e007      	b.n	8009d1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	73fb      	strb	r3, [r7, #15]
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	2b0f      	cmp	r3, #15
 8009d16:	d9ec      	bls.n	8009cf2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009d18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	490e      	ldr	r1, [pc, #56]	@ (8009d68 <MX_USB_HOST_Init+0x40>)
 8009d30:	480e      	ldr	r0, [pc, #56]	@ (8009d6c <MX_USB_HOST_Init+0x44>)
 8009d32:	f7fe fb15 	bl	8008360 <USBH_Init>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009d3c:	f7f7 fc78 	bl	8001630 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009d40:	490b      	ldr	r1, [pc, #44]	@ (8009d70 <MX_USB_HOST_Init+0x48>)
 8009d42:	480a      	ldr	r0, [pc, #40]	@ (8009d6c <MX_USB_HOST_Init+0x44>)
 8009d44:	f7fe fbb9 	bl	80084ba <USBH_RegisterClass>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d4e:	f7f7 fc6f 	bl	8001630 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d52:	4806      	ldr	r0, [pc, #24]	@ (8009d6c <MX_USB_HOST_Init+0x44>)
 8009d54:	f7fe fc3d 	bl	80085d2 <USBH_Start>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d5e:	f7f7 fc67 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d62:	bf00      	nop
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	08009d89 	.word	0x08009d89
 8009d6c:	2000023c 	.word	0x2000023c
 8009d70:	2000000c 	.word	0x2000000c

08009d74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009d78:	4802      	ldr	r0, [pc, #8]	@ (8009d84 <MX_USB_HOST_Process+0x10>)
 8009d7a:	f7fe fc3b 	bl	80085f4 <USBH_Process>
}
 8009d7e:	bf00      	nop
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000023c 	.word	0x2000023c

08009d88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	3b01      	subs	r3, #1
 8009d98:	2b04      	cmp	r3, #4
 8009d9a:	d819      	bhi.n	8009dd0 <USBH_UserProcess+0x48>
 8009d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <USBH_UserProcess+0x1c>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	08009dc1 	.word	0x08009dc1
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009db9 	.word	0x08009db9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009db8:	4b09      	ldr	r3, [pc, #36]	@ (8009de0 <USBH_UserProcess+0x58>)
 8009dba:	2203      	movs	r2, #3
 8009dbc:	701a      	strb	r2, [r3, #0]
  break;
 8009dbe:	e008      	b.n	8009dd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009dc0:	4b07      	ldr	r3, [pc, #28]	@ (8009de0 <USBH_UserProcess+0x58>)
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	701a      	strb	r2, [r3, #0]
  break;
 8009dc6:	e004      	b.n	8009dd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009dc8:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <USBH_UserProcess+0x58>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	701a      	strb	r2, [r3, #0]
  break;
 8009dce:	e000      	b.n	8009dd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8009dd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009dd2:	bf00      	nop
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20000614 	.word	0x20000614

08009de4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	@ 0x28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	605a      	str	r2, [r3, #4]
 8009df6:	609a      	str	r2, [r3, #8]
 8009df8:	60da      	str	r2, [r3, #12]
 8009dfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e04:	d147      	bne.n	8009e96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	4b25      	ldr	r3, [pc, #148]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0e:	4a24      	ldr	r2, [pc, #144]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e16:	4b22      	ldr	r3, [pc, #136]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	613b      	str	r3, [r7, #16]
 8009e20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4619      	mov	r1, r3
 8009e36:	481b      	ldr	r0, [pc, #108]	@ (8009ea4 <HAL_HCD_MspInit+0xc0>)
 8009e38:	f7f7 ff8c 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009e3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e42:	2302      	movs	r3, #2
 8009e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e4e:	230a      	movs	r3, #10
 8009e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e52:	f107 0314 	add.w	r3, r7, #20
 8009e56:	4619      	mov	r1, r3
 8009e58:	4812      	ldr	r0, [pc, #72]	@ (8009ea4 <HAL_HCD_MspInit+0xc0>)
 8009e5a:	f7f7 ff7b 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e62:	4a0f      	ldr	r2, [pc, #60]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e68:	6353      	str	r3, [r2, #52]	@ 0x34
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e72:	4a0b      	ldr	r2, [pc, #44]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8009e7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <HAL_HCD_MspInit+0xbc>)
 8009e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e86:	2200      	movs	r2, #0
 8009e88:	2100      	movs	r1, #0
 8009e8a:	2043      	movs	r0, #67	@ 0x43
 8009e8c:	f7f7 ff2b 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e90:	2043      	movs	r0, #67	@ 0x43
 8009e92:	f7f7 ff44 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e96:	bf00      	nop
 8009e98:	3728      	adds	r7, #40	@ 0x28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	40023800 	.word	0x40023800
 8009ea4:	40020000 	.word	0x40020000

08009ea8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe ff73 	bl	8008da2 <USBH_LL_IncTimer>
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe ffab 	bl	8008e2e <USBH_LL_Connect>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe ffb4 	bl	8008e5c <USBH_LL_Disconnect>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe ff65 	bl	8008df6 <USBH_LL_PortEnabled>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe ff65 	bl	8008e12 <USBH_LL_PortDisabled>
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d12a      	bne.n	8009fb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009f62:	4a18      	ldr	r2, [pc, #96]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a15      	ldr	r2, [pc, #84]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f6e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f72:	4b14      	ldr	r3, [pc, #80]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009f78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009f7a:	4b12      	ldr	r3, [pc, #72]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009f80:	4b10      	ldr	r3, [pc, #64]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f82:	2201      	movs	r2, #1
 8009f84:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f86:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f8e:	2202      	movs	r2, #2
 8009f90:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f92:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009f98:	480a      	ldr	r0, [pc, #40]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009f9a:	f7f8 f890 	bl	80020be <HAL_HCD_Init>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009fa4:	f7f7 fb44 	bl	8001630 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009fa8:	4806      	ldr	r0, [pc, #24]	@ (8009fc4 <USBH_LL_Init+0x74>)
 8009faa:	f7f8 fcf1 	bl	8002990 <HAL_HCD_GetCurrentFrame>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7fe fee6 	bl	8008d84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000618 	.word	0x20000618

08009fc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7f8 fc5e 	bl	80028a0 <HAL_HCD_Start>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f95e 	bl	800a2ac <USBH_Get_USB_Status>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a014:	4618      	mov	r0, r3
 800a016:	f7f8 fc66 	bl	80028e6 <HAL_HCD_Stop>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f943 	bl	800a2ac <USBH_Get_USB_Status>
 800a026:	4603      	mov	r3, r0
 800a028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a046:	4618      	mov	r0, r3
 800a048:	f7f8 fcb0 	bl	80029ac <HAL_HCD_GetCurrentSpeed>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d00c      	beq.n	800a06c <USBH_LL_GetSpeed+0x38>
 800a052:	2b02      	cmp	r3, #2
 800a054:	d80d      	bhi.n	800a072 <USBH_LL_GetSpeed+0x3e>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <USBH_LL_GetSpeed+0x2c>
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d003      	beq.n	800a066 <USBH_LL_GetSpeed+0x32>
 800a05e:	e008      	b.n	800a072 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
    break;
 800a064:	e008      	b.n	800a078 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a066:	2301      	movs	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]
    break;
 800a06a:	e005      	b.n	800a078 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a06c:	2302      	movs	r3, #2
 800a06e:	73fb      	strb	r3, [r7, #15]
    break;
 800a070:	e002      	b.n	800a078 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a072:	2301      	movs	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]
    break;
 800a076:	bf00      	nop
  }
  return  speed;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a098:	4618      	mov	r0, r3
 800a09a:	f7f8 fc41 	bl	8002920 <HAL_HCD_ResetPort>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 f901 	bl	800a2ac <USBH_Get_USB_Status>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7f8 fc49 	bl	8002966 <HAL_HCD_HC_GetXferCount>
 800a0d4:	4603      	mov	r3, r0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0de:	b590      	push	{r4, r7, lr}
 800a0e0:	b089      	sub	sp, #36	@ 0x24
 800a0e2:	af04      	add	r7, sp, #16
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	4608      	mov	r0, r1
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	70fb      	strb	r3, [r7, #3]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70bb      	strb	r3, [r7, #2]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a106:	787c      	ldrb	r4, [r7, #1]
 800a108:	78ba      	ldrb	r2, [r7, #2]
 800a10a:	78f9      	ldrb	r1, [r7, #3]
 800a10c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a10e:	9302      	str	r3, [sp, #8]
 800a110:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	4623      	mov	r3, r4
 800a11e:	f7f8 f835 	bl	800218c <HAL_HCD_HC_Init>
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 f8bf 	bl	800a2ac <USBH_Get_USB_Status>
 800a12e:	4603      	mov	r3, r0
 800a130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a132:	7bbb      	ldrb	r3, [r7, #14]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd90      	pop	{r4, r7, pc}

0800a13c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f8 f8ce 	bl	80022fc <HAL_HCD_HC_Halt>
 800a160:	4603      	mov	r3, r0
 800a162:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 f8a0 	bl	800a2ac <USBH_Get_USB_Status>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a170:	7bbb      	ldrb	r3, [r7, #14]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a17a:	b590      	push	{r4, r7, lr}
 800a17c:	b089      	sub	sp, #36	@ 0x24
 800a17e:	af04      	add	r7, sp, #16
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	4608      	mov	r0, r1
 800a184:	4611      	mov	r1, r2
 800a186:	461a      	mov	r2, r3
 800a188:	4603      	mov	r3, r0
 800a18a:	70fb      	strb	r3, [r7, #3]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70bb      	strb	r3, [r7, #2]
 800a190:	4613      	mov	r3, r2
 800a192:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a1a2:	787c      	ldrb	r4, [r7, #1]
 800a1a4:	78ba      	ldrb	r2, [r7, #2]
 800a1a6:	78f9      	ldrb	r1, [r7, #3]
 800a1a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1b0:	9302      	str	r3, [sp, #8]
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	4623      	mov	r3, r4
 800a1be:	f7f8 f8c1 	bl	8002344 <HAL_HCD_HC_SubmitRequest>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f86f 	bl	800a2ac <USBH_Get_USB_Status>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd90      	pop	{r4, r7, pc}

0800a1dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f8 fba2 	bl	800293c <HAL_HCD_HC_GetURBState>
 800a1f8:	4603      	mov	r3, r0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a214:	2b01      	cmp	r3, #1
 800a216:	d103      	bne.n	800a220 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f872 	bl	800a304 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a220:	20c8      	movs	r0, #200	@ 0xc8
 800a222:	f7f7 fc61 	bl	8001ae8 <HAL_Delay>
  return USBH_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
 800a23c:	4613      	mov	r3, r2
 800a23e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a246:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	4613      	mov	r3, r2
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	1a9b      	subs	r3, r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	3317      	adds	r3, #23
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	68f9      	ldr	r1, [r7, #12]
 800a262:	4613      	mov	r3, r2
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	1a9b      	subs	r3, r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	440b      	add	r3, r1
 800a26c:	333c      	adds	r3, #60	@ 0x3c
 800a26e:	78ba      	ldrb	r2, [r7, #2]
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e009      	b.n	800a288 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	4613      	mov	r3, r2
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	440b      	add	r3, r1
 800a282:	333d      	adds	r3, #61	@ 0x3d
 800a284:	78ba      	ldrb	r2, [r7, #2]
 800a286:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7f7 fc22 	bl	8001ae8 <HAL_Delay>
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d817      	bhi.n	800a2f0 <USBH_Get_USB_Status+0x44>
 800a2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c8 <USBH_Get_USB_Status+0x1c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2df 	.word	0x0800a2df
 800a2d0:	0800a2e5 	.word	0x0800a2e5
 800a2d4:	0800a2eb 	.word	0x0800a2eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	e00b      	b.n	800a2f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e2:	e008      	b.n	800a2f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e8:	e005      	b.n	800a2f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ee:	e002      	b.n	800a2f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	bf00      	nop
  }
  return usb_status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	e001      	b.n	800a322 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a31e:	2301      	movs	r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	461a      	mov	r2, r3
 800a326:	2101      	movs	r1, #1
 800a328:	4803      	ldr	r0, [pc, #12]	@ (800a338 <MX_DriverVbusFS+0x34>)
 800a32a:	f7f7 feaf 	bl	800208c <HAL_GPIO_WritePin>
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	40020800 	.word	0x40020800

0800a33c <malloc>:
 800a33c:	4b02      	ldr	r3, [pc, #8]	@ (800a348 <malloc+0xc>)
 800a33e:	4601      	mov	r1, r0
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f000 b82d 	b.w	800a3a0 <_malloc_r>
 800a346:	bf00      	nop
 800a348:	2000002c 	.word	0x2000002c

0800a34c <free>:
 800a34c:	4b02      	ldr	r3, [pc, #8]	@ (800a358 <free+0xc>)
 800a34e:	4601      	mov	r1, r0
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f000 b8f5 	b.w	800a540 <_free_r>
 800a356:	bf00      	nop
 800a358:	2000002c 	.word	0x2000002c

0800a35c <sbrk_aligned>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	4e0f      	ldr	r6, [pc, #60]	@ (800a39c <sbrk_aligned+0x40>)
 800a360:	460c      	mov	r4, r1
 800a362:	6831      	ldr	r1, [r6, #0]
 800a364:	4605      	mov	r5, r0
 800a366:	b911      	cbnz	r1, 800a36e <sbrk_aligned+0x12>
 800a368:	f000 f8ae 	bl	800a4c8 <_sbrk_r>
 800a36c:	6030      	str	r0, [r6, #0]
 800a36e:	4621      	mov	r1, r4
 800a370:	4628      	mov	r0, r5
 800a372:	f000 f8a9 	bl	800a4c8 <_sbrk_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d103      	bne.n	800a382 <sbrk_aligned+0x26>
 800a37a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a37e:	4620      	mov	r0, r4
 800a380:	bd70      	pop	{r4, r5, r6, pc}
 800a382:	1cc4      	adds	r4, r0, #3
 800a384:	f024 0403 	bic.w	r4, r4, #3
 800a388:	42a0      	cmp	r0, r4
 800a38a:	d0f8      	beq.n	800a37e <sbrk_aligned+0x22>
 800a38c:	1a21      	subs	r1, r4, r0
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f89a 	bl	800a4c8 <_sbrk_r>
 800a394:	3001      	adds	r0, #1
 800a396:	d1f2      	bne.n	800a37e <sbrk_aligned+0x22>
 800a398:	e7ef      	b.n	800a37a <sbrk_aligned+0x1e>
 800a39a:	bf00      	nop
 800a39c:	200009f8 	.word	0x200009f8

0800a3a0 <_malloc_r>:
 800a3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a4:	1ccd      	adds	r5, r1, #3
 800a3a6:	f025 0503 	bic.w	r5, r5, #3
 800a3aa:	3508      	adds	r5, #8
 800a3ac:	2d0c      	cmp	r5, #12
 800a3ae:	bf38      	it	cc
 800a3b0:	250c      	movcc	r5, #12
 800a3b2:	2d00      	cmp	r5, #0
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	db01      	blt.n	800a3bc <_malloc_r+0x1c>
 800a3b8:	42a9      	cmp	r1, r5
 800a3ba:	d904      	bls.n	800a3c6 <_malloc_r+0x26>
 800a3bc:	230c      	movs	r3, #12
 800a3be:	6033      	str	r3, [r6, #0]
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a49c <_malloc_r+0xfc>
 800a3ca:	f000 f869 	bl	800a4a0 <__malloc_lock>
 800a3ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a3d2:	461c      	mov	r4, r3
 800a3d4:	bb44      	cbnz	r4, 800a428 <_malloc_r+0x88>
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff ffbf 	bl	800a35c <sbrk_aligned>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	d158      	bne.n	800a496 <_malloc_r+0xf6>
 800a3e4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3e8:	4627      	mov	r7, r4
 800a3ea:	2f00      	cmp	r7, #0
 800a3ec:	d143      	bne.n	800a476 <_malloc_r+0xd6>
 800a3ee:	2c00      	cmp	r4, #0
 800a3f0:	d04b      	beq.n	800a48a <_malloc_r+0xea>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	eb04 0903 	add.w	r9, r4, r3
 800a3fc:	f000 f864 	bl	800a4c8 <_sbrk_r>
 800a400:	4581      	cmp	r9, r0
 800a402:	d142      	bne.n	800a48a <_malloc_r+0xea>
 800a404:	6821      	ldr	r1, [r4, #0]
 800a406:	1a6d      	subs	r5, r5, r1
 800a408:	4629      	mov	r1, r5
 800a40a:	4630      	mov	r0, r6
 800a40c:	f7ff ffa6 	bl	800a35c <sbrk_aligned>
 800a410:	3001      	adds	r0, #1
 800a412:	d03a      	beq.n	800a48a <_malloc_r+0xea>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	442b      	add	r3, r5
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	f8d8 3000 	ldr.w	r3, [r8]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	bb62      	cbnz	r2, 800a47c <_malloc_r+0xdc>
 800a422:	f8c8 7000 	str.w	r7, [r8]
 800a426:	e00f      	b.n	800a448 <_malloc_r+0xa8>
 800a428:	6822      	ldr	r2, [r4, #0]
 800a42a:	1b52      	subs	r2, r2, r5
 800a42c:	d420      	bmi.n	800a470 <_malloc_r+0xd0>
 800a42e:	2a0b      	cmp	r2, #11
 800a430:	d917      	bls.n	800a462 <_malloc_r+0xc2>
 800a432:	1961      	adds	r1, r4, r5
 800a434:	42a3      	cmp	r3, r4
 800a436:	6025      	str	r5, [r4, #0]
 800a438:	bf18      	it	ne
 800a43a:	6059      	strne	r1, [r3, #4]
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	bf08      	it	eq
 800a440:	f8c8 1000 	streq.w	r1, [r8]
 800a444:	5162      	str	r2, [r4, r5]
 800a446:	604b      	str	r3, [r1, #4]
 800a448:	4630      	mov	r0, r6
 800a44a:	f000 f82f 	bl	800a4ac <__malloc_unlock>
 800a44e:	f104 000b 	add.w	r0, r4, #11
 800a452:	1d23      	adds	r3, r4, #4
 800a454:	f020 0007 	bic.w	r0, r0, #7
 800a458:	1ac2      	subs	r2, r0, r3
 800a45a:	bf1c      	itt	ne
 800a45c:	1a1b      	subne	r3, r3, r0
 800a45e:	50a3      	strne	r3, [r4, r2]
 800a460:	e7af      	b.n	800a3c2 <_malloc_r+0x22>
 800a462:	6862      	ldr	r2, [r4, #4]
 800a464:	42a3      	cmp	r3, r4
 800a466:	bf0c      	ite	eq
 800a468:	f8c8 2000 	streq.w	r2, [r8]
 800a46c:	605a      	strne	r2, [r3, #4]
 800a46e:	e7eb      	b.n	800a448 <_malloc_r+0xa8>
 800a470:	4623      	mov	r3, r4
 800a472:	6864      	ldr	r4, [r4, #4]
 800a474:	e7ae      	b.n	800a3d4 <_malloc_r+0x34>
 800a476:	463c      	mov	r4, r7
 800a478:	687f      	ldr	r7, [r7, #4]
 800a47a:	e7b6      	b.n	800a3ea <_malloc_r+0x4a>
 800a47c:	461a      	mov	r2, r3
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	42a3      	cmp	r3, r4
 800a482:	d1fb      	bne.n	800a47c <_malloc_r+0xdc>
 800a484:	2300      	movs	r3, #0
 800a486:	6053      	str	r3, [r2, #4]
 800a488:	e7de      	b.n	800a448 <_malloc_r+0xa8>
 800a48a:	230c      	movs	r3, #12
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	4630      	mov	r0, r6
 800a490:	f000 f80c 	bl	800a4ac <__malloc_unlock>
 800a494:	e794      	b.n	800a3c0 <_malloc_r+0x20>
 800a496:	6005      	str	r5, [r0, #0]
 800a498:	e7d6      	b.n	800a448 <_malloc_r+0xa8>
 800a49a:	bf00      	nop
 800a49c:	200009fc 	.word	0x200009fc

0800a4a0 <__malloc_lock>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	@ (800a4a8 <__malloc_lock+0x8>)
 800a4a2:	f000 b84b 	b.w	800a53c <__retarget_lock_acquire_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	20000b38 	.word	0x20000b38

0800a4ac <__malloc_unlock>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	@ (800a4b4 <__malloc_unlock+0x8>)
 800a4ae:	f000 b846 	b.w	800a53e <__retarget_lock_release_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	20000b38 	.word	0x20000b38

0800a4b8 <memset>:
 800a4b8:	4402      	add	r2, r0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d100      	bne.n	800a4c2 <memset+0xa>
 800a4c0:	4770      	bx	lr
 800a4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c6:	e7f9      	b.n	800a4bc <memset+0x4>

0800a4c8 <_sbrk_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d06      	ldr	r5, [pc, #24]	@ (800a4e4 <_sbrk_r+0x1c>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	f7f7 fa24 	bl	8001920 <_sbrk>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_sbrk_r+0x1a>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_sbrk_r+0x1a>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	20000b3c 	.word	0x20000b3c

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	@ (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	2000002c 	.word	0x2000002c

0800a4f4 <__libc_init_array>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a52c <__libc_init_array+0x38>)
 800a4f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a530 <__libc_init_array+0x3c>)
 800a4fa:	1b64      	subs	r4, r4, r5
 800a4fc:	10a4      	asrs	r4, r4, #2
 800a4fe:	2600      	movs	r6, #0
 800a500:	42a6      	cmp	r6, r4
 800a502:	d109      	bne.n	800a518 <__libc_init_array+0x24>
 800a504:	4d0b      	ldr	r5, [pc, #44]	@ (800a534 <__libc_init_array+0x40>)
 800a506:	4c0c      	ldr	r4, [pc, #48]	@ (800a538 <__libc_init_array+0x44>)
 800a508:	f000 f864 	bl	800a5d4 <_init>
 800a50c:	1b64      	subs	r4, r4, r5
 800a50e:	10a4      	asrs	r4, r4, #2
 800a510:	2600      	movs	r6, #0
 800a512:	42a6      	cmp	r6, r4
 800a514:	d105      	bne.n	800a522 <__libc_init_array+0x2e>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51c:	4798      	blx	r3
 800a51e:	3601      	adds	r6, #1
 800a520:	e7ee      	b.n	800a500 <__libc_init_array+0xc>
 800a522:	f855 3b04 	ldr.w	r3, [r5], #4
 800a526:	4798      	blx	r3
 800a528:	3601      	adds	r6, #1
 800a52a:	e7f2      	b.n	800a512 <__libc_init_array+0x1e>
 800a52c:	0800a614 	.word	0x0800a614
 800a530:	0800a614 	.word	0x0800a614
 800a534:	0800a614 	.word	0x0800a614
 800a538:	0800a618 	.word	0x0800a618

0800a53c <__retarget_lock_acquire_recursive>:
 800a53c:	4770      	bx	lr

0800a53e <__retarget_lock_release_recursive>:
 800a53e:	4770      	bx	lr

0800a540 <_free_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4605      	mov	r5, r0
 800a544:	2900      	cmp	r1, #0
 800a546:	d041      	beq.n	800a5cc <_free_r+0x8c>
 800a548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a54c:	1f0c      	subs	r4, r1, #4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bfb8      	it	lt
 800a552:	18e4      	addlt	r4, r4, r3
 800a554:	f7ff ffa4 	bl	800a4a0 <__malloc_lock>
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <_free_r+0x90>)
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	b933      	cbnz	r3, 800a56c <_free_r+0x2c>
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6014      	str	r4, [r2, #0]
 800a562:	4628      	mov	r0, r5
 800a564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a568:	f7ff bfa0 	b.w	800a4ac <__malloc_unlock>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d908      	bls.n	800a582 <_free_r+0x42>
 800a570:	6820      	ldr	r0, [r4, #0]
 800a572:	1821      	adds	r1, r4, r0
 800a574:	428b      	cmp	r3, r1
 800a576:	bf01      	itttt	eq
 800a578:	6819      	ldreq	r1, [r3, #0]
 800a57a:	685b      	ldreq	r3, [r3, #4]
 800a57c:	1809      	addeq	r1, r1, r0
 800a57e:	6021      	streq	r1, [r4, #0]
 800a580:	e7ed      	b.n	800a55e <_free_r+0x1e>
 800a582:	461a      	mov	r2, r3
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b10b      	cbz	r3, 800a58c <_free_r+0x4c>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d9fa      	bls.n	800a582 <_free_r+0x42>
 800a58c:	6811      	ldr	r1, [r2, #0]
 800a58e:	1850      	adds	r0, r2, r1
 800a590:	42a0      	cmp	r0, r4
 800a592:	d10b      	bne.n	800a5ac <_free_r+0x6c>
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	4401      	add	r1, r0
 800a598:	1850      	adds	r0, r2, r1
 800a59a:	4283      	cmp	r3, r0
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	d1e0      	bne.n	800a562 <_free_r+0x22>
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	6053      	str	r3, [r2, #4]
 800a5a6:	4408      	add	r0, r1
 800a5a8:	6010      	str	r0, [r2, #0]
 800a5aa:	e7da      	b.n	800a562 <_free_r+0x22>
 800a5ac:	d902      	bls.n	800a5b4 <_free_r+0x74>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	e7d6      	b.n	800a562 <_free_r+0x22>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	1821      	adds	r1, r4, r0
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf04      	itt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	bf04      	itt	eq
 800a5c4:	1809      	addeq	r1, r1, r0
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	6054      	str	r4, [r2, #4]
 800a5ca:	e7ca      	b.n	800a562 <_free_r+0x22>
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
 800a5ce:	bf00      	nop
 800a5d0:	200009fc 	.word	0x200009fc

0800a5d4 <_init>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr

0800a5e0 <_fini>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr
