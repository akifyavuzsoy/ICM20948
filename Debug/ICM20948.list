
ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009a74  08009a74  0000aa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a90  08009a90  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a90  08009a90  0000aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a98  08009a98  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  0000aa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009aa0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016223  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c5d  00000000  00000000  000212cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00024f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfd  00000000  00000000  00026198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239e6  00000000  00000000  00026f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fd5  00000000  00000000  0004a97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc1d4  00000000  00000000  00063950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012fb24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f54  00000000  00000000  0012fb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00134abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a5c 	.word	0x08009a5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009a5c 	.word	0x08009a5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <icm20948_who_am_i>:
* @param hi2c: Pointer to the I2C handle used for communication.
* @param device_id: Pointer to a variable where the read device ID will be stored.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_who_am_i(I2C_HandleTypeDef *hi2c, uint8_t *device_id)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af04      	add	r7, sp, #16
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    //uint8_t reg = B0_WHO_AM_I;
    uint8_t id;

    // WHO_AM_I register'ını okuma
    status = HAL_I2C_Mem_Read(hi2c, (ICM20948_I2C_ADDR << 1), B0_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &id, 1, HAL_MAX_DELAY);
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	2301      	movs	r3, #1
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	f107 030e 	add.w	r3, r7, #14
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2301      	movs	r3, #1
 80004d4:	2200      	movs	r2, #0
 80004d6:	21d0      	movs	r1, #208	@ 0xd0
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f003 fba7 	bl	8003c2c <HAL_I2C_Mem_Read>
 80004de:	4603      	mov	r3, r0
 80004e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d102      	bne.n	80004ee <icm20948_who_am_i+0x36>
        *device_id = id; // Okunan değeri döndür
 80004e8:	7bba      	ldrb	r2, [r7, #14]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <icm20948_device_reset>:
* @note Writes 0x80 to the PWR_MGMT_1 register to reset and configure the device.
* @param hi2c: Pointer to the I2C handle used for communication.
* @retval HAL_StatusTypeDef: HAL status indicating the result of the operation.
*/
HAL_StatusTypeDef icm20948_device_reset(I2C_HandleTypeDef *hi2c)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af04      	add	r7, sp, #16
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	//uint8_t reg_value = DEVICE_RESET_BIT;

	status = HAL_I2C_Mem_Write(hi2c, (ICM20948_I2C_ADDR << 1), B0_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t*)DEVICE_RESET_BIT, 1, HAL_MAX_DELAY);
 8000500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000504:	9302      	str	r3, [sp, #8]
 8000506:	2301      	movs	r3, #1
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2206      	movs	r2, #6
 8000512:	21d0      	movs	r1, #208	@ 0xd0
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f003 fa8f 	bl	8003a38 <HAL_I2C_Mem_Write>
 800051a:	4603      	mov	r3, r0
 800051c:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK) {
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <icm20948_device_reset+0x32>
		HAL_Delay(100); // Reset işlemi sonrası cihazın yeniden başlatılması için kısa bir gecikme
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f000 fd23 	bl	8000f70 <HAL_Delay>
	}

	return status;
 800052a:	7bfb      	ldrb	r3, [r7, #15]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <check_System_Status_Action>:

// TODO: System Init Fonksiyonu oluştur...
// TODO: System adımlarını oluştur...

void check_System_Status_Action(sysController_t *this)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	switch(this->sys_Status){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d02c      	beq.n	800059e <check_System_Status_Action+0x6a>
 8000544:	2b02      	cmp	r3, #2
 8000546:	dc3d      	bgt.n	80005c4 <check_System_Status_Action+0x90>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <check_System_Status_Action+0x1e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d013      	beq.n	8000578 <check_System_Status_Action+0x44>
 8000550:	e038      	b.n	80005c4 <check_System_Status_Action+0x90>
	case SYS_SUCCESS:
		LED_OFF(LD3_GPIO_Port, LD3_Pin);	// Turn off for Orange Led (PD13)
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000558:	4826      	ldr	r0, [pc, #152]	@ (80005f4 <check_System_Status_Action+0xc0>)
 800055a:	f000 ffdb 	bl	8001514 <HAL_GPIO_WritePin>
		LED_OFF(LD5_GPIO_Port, LD5_Pin);	// Turn off for Red Led (PD14)
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000564:	4823      	ldr	r0, [pc, #140]	@ (80005f4 <check_System_Status_Action+0xc0>)
 8000566:	f000 ffd5 	bl	8001514 <HAL_GPIO_WritePin>
		LED_ON(LD4_GPIO_Port, LD4_Pin);		// Turn On for Green Led (PD12)
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000570:	4820      	ldr	r0, [pc, #128]	@ (80005f4 <check_System_Status_Action+0xc0>)
 8000572:	f000 ffcf 	bl	8001514 <HAL_GPIO_WritePin>
		break;
 8000576:	e038      	b.n	80005ea <check_System_Status_Action+0xb6>

	case SYS_FAULT:
		LED_ON(LD3_GPIO_Port, LD3_Pin);		// Turn on for Orange Led (PD13)
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057e:	481d      	ldr	r0, [pc, #116]	@ (80005f4 <check_System_Status_Action+0xc0>)
 8000580:	f000 ffc8 	bl	8001514 <HAL_GPIO_WritePin>
		LED_OFF(LD5_GPIO_Port, LD5_Pin);	// Turn off for Red Led (PD14)
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058a:	481a      	ldr	r0, [pc, #104]	@ (80005f4 <check_System_Status_Action+0xc0>)
 800058c:	f000 ffc2 	bl	8001514 <HAL_GPIO_WritePin>
		LED_OFF(LD4_GPIO_Port, LD4_Pin);	// Turn off for Green Led (PD12)
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000596:	4817      	ldr	r0, [pc, #92]	@ (80005f4 <check_System_Status_Action+0xc0>)
 8000598:	f000 ffbc 	bl	8001514 <HAL_GPIO_WritePin>
		break;
 800059c:	e025      	b.n	80005ea <check_System_Status_Action+0xb6>

	case SYS_ERROR:
		LED_OFF(LD3_GPIO_Port, LD3_Pin);		// Turn off for Orange Led (PD13)
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a4:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <check_System_Status_Action+0xc0>)
 80005a6:	f000 ffb5 	bl	8001514 <HAL_GPIO_WritePin>
		LED_ON(LD5_GPIO_Port, LD5_Pin);			// Turn on for Red Led (PD14)
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b0:	4810      	ldr	r0, [pc, #64]	@ (80005f4 <check_System_Status_Action+0xc0>)
 80005b2:	f000 ffaf 	bl	8001514 <HAL_GPIO_WritePin>
		LED_OFF(LD4_GPIO_Port, LD4_Pin);		// Turn off for Green Led (PD12)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <check_System_Status_Action+0xc0>)
 80005be:	f000 ffa9 	bl	8001514 <HAL_GPIO_WritePin>
		// TODO: Kırmızı led blinkleyebilir...
		break;
 80005c2:	e012      	b.n	80005ea <check_System_Status_Action+0xb6>

	default:
		LED_OFF(LD3_GPIO_Port, LD3_Pin);		// Turn off for Orange Led (PD13)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <check_System_Status_Action+0xc0>)
 80005cc:	f000 ffa2 	bl	8001514 <HAL_GPIO_WritePin>
		LED_OFF(LD5_GPIO_Port, LD5_Pin);		// Turn off for Red Led (PD14)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d6:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <check_System_Status_Action+0xc0>)
 80005d8:	f000 ff9c 	bl	8001514 <HAL_GPIO_WritePin>
		LED_OFF(LD4_GPIO_Port, LD4_Pin);		// Turn off for Green Led (PD12)
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e2:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <check_System_Status_Action+0xc0>)
 80005e4:	f000 ff96 	bl	8001514 <HAL_GPIO_WritePin>
		break;
 80005e8:	bf00      	nop
	}
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020c00 	.word	0x40020c00

080005f8 <check_icm20948>:
*         - SYS_ERROR: If there is an error in I2C communication.
* @param  this: Pointer to the sysController_t structure containing the system status.
* @retval None
*/
void check_icm20948(sysController_t *this)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    uint8_t device_id = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef result;

    result = icm20948_who_am_i(ICM20948_I2C_CH, &device_id);
 8000604:	f107 030e 	add.w	r3, r7, #14
 8000608:	4619      	mov	r1, r3
 800060a:	480d      	ldr	r0, [pc, #52]	@ (8000640 <check_icm20948+0x48>)
 800060c:	f7ff ff54 	bl	80004b8 <icm20948_who_am_i>
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

    if (result == HAL_OK) {
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10a      	bne.n	8000630 <check_icm20948+0x38>
        if (device_id == ICM20948_ID) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	2bea      	cmp	r3, #234	@ 0xea
 800061e:	d103      	bne.n	8000628 <check_icm20948+0x30>
        	this->sys_Status = SYS_SUCCESS;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
        }
    }
    else {
    	this->sys_Status = SYS_ERROR;
    }
}
 8000626:	e006      	b.n	8000636 <check_icm20948+0x3e>
        	this->sys_Status = SYS_FAULT;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
}
 800062e:	e002      	b.n	8000636 <check_icm20948+0x3e>
    	this->sys_Status = SYS_ERROR;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2202      	movs	r2, #2
 8000634:	701a      	strb	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000098 	.word	0x20000098

08000644 <reset_icm20948>:
*         - SYS_FAULT: If the reset operation fails.
* @param  this: Pointer to the sysController_t structure containing the system status.
* @retval None
*/
void reset_icm20948(sysController_t *this)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;

	result = icm20948_device_reset(ICM20948_I2C_CH);
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <reset_icm20948+0x30>)
 800064e:	f7ff ff53 	bl	80004f8 <icm20948_device_reset>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]
	if (result == HAL_OK) {
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <reset_icm20948+0x20>
		this->sys_Status = SYS_SUCCESS;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	}
	else {
		this->sys_Status = SYS_FAULT;
	}
}
 8000662:	e002      	b.n	800066a <reset_icm20948+0x26>
		this->sys_Status = SYS_FAULT;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000098 	.word	0x20000098

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fc06 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f81e 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f91a 	bl	80008bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000688:	f000 f884 	bl	8000794 <MX_I2C1_Init>
  MX_I2S3_Init();
 800068c:	f000 f8b0 	bl	80007f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000690:	f000 f8de 	bl	8000850 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000694:	f008 fd8c 	bl	80091b0 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000698:	f008 fdb0 	bl	80091fc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    check_System_Status_Action(&controller);	// TODO: Yeni bir task oluşturup eş zamanlı sürekli kontrol etmesi lazım örn RTOS
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <main+0x44>)
 800069e:	f7ff ff49 	bl	8000534 <check_System_Status_Action>

    check_icm20948(&controller);		// Bu sonktionu başka bir fonskiyonda case içinde adım adım çağıracak şekilde yapabilirsin...
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <main+0x44>)
 80006a4:	f7ff ffa8 	bl	80005f8 <check_icm20948>
    //check_ak09916(&controller);
    reset_icm20948(&controller);
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <main+0x44>)
 80006aa:	f7ff ffcb 	bl	8000644 <reset_icm20948>
    HAL_Delay(1000);
 80006ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b2:	f000 fc5d 	bl	8000f70 <HAL_Delay>
    MX_USB_HOST_Process();
 80006b6:	bf00      	nop
 80006b8:	e7ee      	b.n	8000698 <main+0x20>
 80006ba:	bf00      	nop
 80006bc:	2000018c 	.word	0x2000018c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 f936 	bl	8009940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	@ (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000734:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000738:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073e:	2307      	movs	r3, #7
 8000740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fcf6 	bl	8005138 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000752:	f000 f9b1 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2105      	movs	r1, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f004 ff57 	bl	8005628 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000780:	f000 f99a 	bl	8000ab8 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	@ 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 ffed 	bl	80037b0 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f96c 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000098 	.word	0x20000098
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_I2S3_Init+0x54>)
 80007f6:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <MX_I2S3_Init+0x58>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2S3_Init+0x54>)
 80007fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000800:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_I2S3_Init+0x54>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_I2S3_Init+0x54>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_I2S3_Init+0x54>)
 8000818:	4a0c      	ldr	r2, [pc, #48]	@ (800084c <MX_I2S3_Init+0x5c>)
 800081a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_I2S3_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_I2S3_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_I2S3_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_I2S3_Init+0x54>)
 8000830:	f003 ffe2 	bl	80047f8 <HAL_I2S_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800083a:	f000 f93d 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000ec 	.word	0x200000ec
 8000848:	40003c00 	.word	0x40003c00
 800084c:	00017700 	.word	0x00017700

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	@ (80008b8 <MX_SPI1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_SPI1_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_SPI1_Init+0x64>)
 80008a2:	f005 fa0f 	bl	8005cc4 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 f904 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000134 	.word	0x20000134
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b72      	ldr	r3, [pc, #456]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a71      	ldr	r2, [pc, #452]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b6b      	ldr	r3, [pc, #428]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a6a      	ldr	r2, [pc, #424]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b68      	ldr	r3, [pc, #416]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b64      	ldr	r3, [pc, #400]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a63      	ldr	r2, [pc, #396]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b61      	ldr	r3, [pc, #388]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a5c      	ldr	r2, [pc, #368]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b56      	ldr	r3, [pc, #344]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a55      	ldr	r2, [pc, #340]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b53      	ldr	r3, [pc, #332]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a4e      	ldr	r2, [pc, #312]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	4849      	ldr	r0, [pc, #292]	@ (8000aa4 <MX_GPIO_Init+0x1e8>)
 8000980:	f000 fdc8 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2101      	movs	r1, #1
 8000988:	4847      	ldr	r0, [pc, #284]	@ (8000aa8 <MX_GPIO_Init+0x1ec>)
 800098a:	f000 fdc3 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000994:	4845      	ldr	r0, [pc, #276]	@ (8000aac <MX_GPIO_Init+0x1f0>)
 8000996:	f000 fdbd 	bl	8001514 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	483c      	ldr	r0, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x1e8>)
 80009b2:	f000 fc13 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4836      	ldr	r0, [pc, #216]	@ (8000aa8 <MX_GPIO_Init+0x1ec>)
 80009ce:	f000 fc05 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	482e      	ldr	r0, [pc, #184]	@ (8000aa8 <MX_GPIO_Init+0x1ec>)
 80009ee:	f000 fbf5 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	482a      	ldr	r0, [pc, #168]	@ (8000ab0 <MX_GPIO_Init+0x1f4>)
 8000a08:	f000 fbe8 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	@ (8000ab4 <MX_GPIO_Init+0x1f8>)
 8000a20:	f000 fbdc 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a36:	2305      	movs	r3, #5
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	@ (8000ab4 <MX_GPIO_Init+0x1f8>)
 8000a42:	f000 fbcb 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a46:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a4a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4813      	ldr	r0, [pc, #76]	@ (8000aac <MX_GPIO_Init+0x1f0>)
 8000a60:	f000 fbbc 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	@ (8000aac <MX_GPIO_Init+0x1f0>)
 8000a78:	f000 fbb0 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a80:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_GPIO_Init+0x1e8>)
 8000a92:	f000 fba3 	bl	80011dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	@ 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <Error_Handler+0x8>

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 fb28 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_I2C_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12c      	bne.n	8000b90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a17      	ldr	r2, [pc, #92]	@ (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b52:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b64:	2304      	movs	r3, #4
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <HAL_I2C_MspInit+0x8c>)
 8000b70:	f000 fb34 	bl	80011dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_I2C_MspInit+0x88>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	@ 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	@ 0x38
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a31      	ldr	r2, [pc, #196]	@ (8000c94 <HAL_I2S_MspInit+0xf0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d15a      	bne.n	8000c8a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 ff2b 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bf0:	f7ff ff62 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	4a26      	ldr	r2, [pc, #152]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c58:	2306      	movs	r3, #6
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	480e      	ldr	r0, [pc, #56]	@ (8000c9c <HAL_I2S_MspInit+0xf8>)
 8000c64:	f000 faba 	bl	80011dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c68:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <HAL_I2S_MspInit+0xfc>)
 8000c86:	f000 faa9 	bl	80011dc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	@ 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40003c00 	.word	0x40003c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <HAL_SPI_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	4a17      	ldr	r2, [pc, #92]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cfe:	23e0      	movs	r3, #224	@ 0xe0
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000d1a:	f000 fa5f 	bl	80011dc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013000 	.word	0x40013000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f8d1 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <OTG_FS_IRQHandler+0x10>)
 8000d9a:	f000 feb5 	bl	8001b08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000574 	.word	0x20000574

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f008 fdca 	bl	8009970 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000190 	.word	0x20000190
 8000e10:	20000aa0 	.word	0x20000aa0

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f008 fd89 	bl	800997c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fc05 	bl	8000678 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e7c:	08009aa0 	.word	0x08009aa0
  ldr r2, =_sbss
 8000e80:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e84:	20000a9c 	.word	0x20000a9c

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f94f 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe00 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f967 	bl	80011c2 <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f0c:	f000 f92f 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000194 	.word	0x20000194

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000194 	.word	0x20000194

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	@ (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff3e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e16b      	b.n	80014d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 815a 	bne.w	80014ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80b4 	beq.w	80014ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a5f      	ldr	r2, [pc, #380]	@ (80014e8 <HAL_GPIO_Init+0x30c>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <HAL_GPIO_Init+0x30c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a5b      	ldr	r2, [pc, #364]	@ (80014ec <HAL_GPIO_Init+0x310>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a52      	ldr	r2, [pc, #328]	@ (80014f0 <HAL_GPIO_Init+0x314>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d02b      	beq.n	8001402 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a51      	ldr	r2, [pc, #324]	@ (80014f4 <HAL_GPIO_Init+0x318>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a50      	ldr	r2, [pc, #320]	@ (80014f8 <HAL_GPIO_Init+0x31c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <HAL_GPIO_Init+0x320>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001500 <HAL_GPIO_Init+0x324>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001504 <HAL_GPIO_Init+0x328>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001508 <HAL_GPIO_Init+0x32c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x20e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <HAL_GPIO_Init+0x330>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x20a>
 80013e2:	2307      	movs	r3, #7
 80013e4:	e00e      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013e6:	2308      	movs	r3, #8
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x228>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x228>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	@ (80014ec <HAL_GPIO_Init+0x310>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a32      	ldr	r2, [pc, #200]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <HAL_GPIO_Init+0x334>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a27      	ldr	r2, [pc, #156]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <HAL_GPIO_Init+0x334>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_GPIO_Init+0x334>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_GPIO_Init+0x334>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_GPIO_Init+0x334>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae90 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40021c00 	.word	0x40021c00
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001530:	e003      	b.n	800153a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af02      	add	r7, sp, #8
 800154c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e059      	b.n	800160c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f007 fe7a 	bl	800926c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001586:	d102      	bne.n	800158e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fc94 	bl	8005ec0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7c1a      	ldrb	r2, [r3, #16]
 80015a0:	f88d 2000 	strb.w	r2, [sp]
 80015a4:	3304      	adds	r3, #4
 80015a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a8:	f004 fc15 	bl	8005dd6 <USB_CoreInit>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e026      	b.n	800160c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2101      	movs	r1, #1
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fc8c 	bl	8005ee2 <USB_SetCurrentMode>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e017      	b.n	800160c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7c1a      	ldrb	r2, [r3, #16]
 80015e4:	f88d 2000 	strb.w	r2, [sp]
 80015e8:	3304      	adds	r3, #4
 80015ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ec:	f004 fe2e 	bl	800624c <USB_HostInit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e004      	b.n	800160c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b08b      	sub	sp, #44	@ 0x2c
 8001618:	af04      	add	r7, sp, #16
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	70fb      	strb	r3, [r7, #3]
 8001626:	460b      	mov	r3, r1
 8001628:	70bb      	strb	r3, [r7, #2]
 800162a:	4613      	mov	r3, r2
 800162c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800162e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001630:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_HCD_HC_Init+0x2c>
 800163c:	2302      	movs	r3, #2
 800163e:	e09d      	b.n	800177c <HAL_HCD_HC_Init+0x168>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3319      	adds	r3, #25
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3314      	adds	r3, #20
 800166c:	787a      	ldrb	r2, [r7, #1]
 800166e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3315      	adds	r3, #21
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3326      	adds	r3, #38	@ 0x26
 8001694:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001698:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016a2:	b2d8      	uxtb	r0, r3
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3316      	adds	r3, #22
 80016b2:	4602      	mov	r2, r0
 80016b4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fbc8 	bl	8001e50 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da0a      	bge.n	80016de <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	3317      	adds	r3, #23
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
 80016dc:	e009      	b.n	80016f2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3317      	adds	r3, #23
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 ff0c 	bl	8006514 <USB_GetHostSpeed>
 80016fc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10b      	bne.n	800171e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001706:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_HCD_HC_Init+0x10a>
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2bbc      	cmp	r3, #188	@ 0xbc
 8001718:	d901      	bls.n	800171e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800171a:	23bc      	movs	r3, #188	@ 0xbc
 800171c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3318      	adds	r3, #24
 800172e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001732:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b298      	uxth	r0, r3
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	3328      	adds	r3, #40	@ 0x28
 8001748:	4602      	mov	r2, r0
 800174a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	b29b      	uxth	r3, r3
 8001754:	787c      	ldrb	r4, [r7, #1]
 8001756:	78ba      	ldrb	r2, [r7, #2]
 8001758:	78f9      	ldrb	r1, [r7, #3]
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4623      	mov	r3, r4
 800176a:	f004 fefb 	bl	8006564 <USB_HC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}

08001784 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_HCD_HC_Halt+0x1e>
 800179e:	2302      	movs	r3, #2
 80017a0:	e00f      	b.n	80017c2 <HAL_HCD_HC_Halt+0x3e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 fa8d 	bl	8006cd2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	70fb      	strb	r3, [r7, #3]
 80017de:	460b      	mov	r3, r1
 80017e0:	70bb      	strb	r3, [r7, #2]
 80017e2:	4613      	mov	r3, r2
 80017e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3317      	adds	r3, #23
 80017f6:	78ba      	ldrb	r2, [r7, #2]
 80017f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3326      	adds	r3, #38	@ 0x26
 800180a:	787a      	ldrb	r2, [r7, #1]
 800180c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800180e:	7c3b      	ldrb	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d114      	bne.n	800183e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	332a      	adds	r3, #42	@ 0x2a
 8001824:	2203      	movs	r2, #3
 8001826:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3319      	adds	r3, #25
 8001838:	7f3a      	ldrb	r2, [r7, #28]
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e009      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	332a      	adds	r3, #42	@ 0x2a
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001852:	787b      	ldrb	r3, [r7, #1]
 8001854:	2b03      	cmp	r3, #3
 8001856:	f200 8102 	bhi.w	8001a5e <HAL_HCD_HC_SubmitRequest+0x292>
 800185a:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <HAL_HCD_HC_SubmitRequest+0x94>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001871 	.word	0x08001871
 8001864:	08001a49 	.word	0x08001a49
 8001868:	08001935 	.word	0x08001935
 800186c:	080019bf 	.word	0x080019bf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001870:	7c3b      	ldrb	r3, [r7, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	f040 80f5 	bne.w	8001a62 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d12d      	bne.n	80018da <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800187e:	8b3b      	ldrh	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	333d      	adds	r3, #61	@ 0x3d
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	333d      	adds	r3, #61	@ 0x3d
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	332a      	adds	r3, #42	@ 0x2a
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018c2:	e0ce      	b.n	8001a62 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	332a      	adds	r3, #42	@ 0x2a
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
      break;
 80018d8:	e0c3      	b.n	8001a62 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	331a      	adds	r3, #26
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	f040 80b8 	bne.w	8001a62 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	333c      	adds	r3, #60	@ 0x3c
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10a      	bne.n	800191e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	332a      	adds	r3, #42	@ 0x2a
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      break;
 800191c:	e0a1      	b.n	8001a62 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	332a      	adds	r3, #42	@ 0x2a
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e096      	b.n	8001a62 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001934:	78bb      	ldrb	r3, [r7, #2]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d120      	bne.n	800197c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	333d      	adds	r3, #61	@ 0x3d
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10a      	bne.n	8001966 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	332a      	adds	r3, #42	@ 0x2a
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001964:	e07e      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	332a      	adds	r3, #42	@ 0x2a
 8001976:	2202      	movs	r2, #2
 8001978:	701a      	strb	r2, [r3, #0]
      break;
 800197a:	e073      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	333c      	adds	r3, #60	@ 0x3c
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	332a      	adds	r3, #42	@ 0x2a
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
      break;
 80019a6:	e05d      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	332a      	adds	r3, #42	@ 0x2a
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
      break;
 80019bc:	e052      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019be:	78bb      	ldrb	r3, [r7, #2]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d120      	bne.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	333d      	adds	r3, #61	@ 0x3d
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10a      	bne.n	80019f0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	332a      	adds	r3, #42	@ 0x2a
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ee:	e039      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	332a      	adds	r3, #42	@ 0x2a
 8001a00:	2202      	movs	r2, #2
 8001a02:	701a      	strb	r2, [r3, #0]
      break;
 8001a04:	e02e      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	333c      	adds	r3, #60	@ 0x3c
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10a      	bne.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	332a      	adds	r3, #42	@ 0x2a
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
      break;
 8001a30:	e018      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	332a      	adds	r3, #42	@ 0x2a
 8001a42:	2202      	movs	r2, #2
 8001a44:	701a      	strb	r2, [r3, #0]
      break;
 8001a46:	e00d      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	332a      	adds	r3, #42	@ 0x2a
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
      break;
 8001a5c:	e002      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a62:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	332c      	adds	r3, #44	@ 0x2c
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	8b39      	ldrh	r1, [r7, #24]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4403      	add	r3, r0
 8001a88:	3334      	adds	r3, #52	@ 0x34
 8001a8a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	334c      	adds	r3, #76	@ 0x4c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	3338      	adds	r3, #56	@ 0x38
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3315      	adds	r3, #21
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	334d      	adds	r3, #77	@ 0x4d
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	3310      	adds	r3, #16
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	1d19      	adds	r1, r3, #4
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	799b      	ldrb	r3, [r3, #6]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f004 fe60 	bl	80067bc <USB_HC_StartXfer>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop

08001b08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fb55 	bl	80061ce <USB_GetMode>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	f040 80fb 	bne.w	8001d22 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fb18 	bl	8006166 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80f1 	beq.w	8001d20 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fb0f 	bl	8006166 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b52:	d104      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 faff 	bl	8006166 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b72:	d104      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 faef 	bl	8006166 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b92:	d104      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fadf 	bl	8006166 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d103      	bne.n	8001bba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fad1 	bl	8006166 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bce:	d120      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bea:	2110      	movs	r1, #16
 8001bec:	6938      	ldr	r0, [r7, #16]
 8001bee:	f004 f9c4 	bl	8005f7a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bf2:	6938      	ldr	r0, [r7, #16]
 8001bf4:	f004 f9f3 	bl	8005fde <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7a5b      	ldrb	r3, [r3, #9]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d105      	bne.n	8001c0c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fbe4 	bl	80063d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f007 fbab 	bl	8009368 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 faa5 	bl	8006166 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c26:	d102      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f001 fd4d 	bl	80036c8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fa97 	bl	8006166 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d106      	bne.n	8001c50 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f007 fb74 	bl	8009330 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fa86 	bl	8006166 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c64:	d139      	bne.n	8001cda <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 f820 	bl	8006cb0 <USB_HC_ReadInterrupt>
 8001c70:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e025      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d018      	beq.n	8001cbe <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f905 	bl	8001eba <HCD_HC_IN_IRQHandler>
 8001cb0:	e005      	b.n	8001cbe <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 ff67 	bl	8002b8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	795b      	ldrb	r3, [r3, #5]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d3d3      	bcc.n	8001c78 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fa41 	bl	8006166 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d101      	bne.n	8001cf2 <HAL_HCD_IRQHandler+0x1ea>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_HCD_IRQHandler+0x1ec>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d014      	beq.n	8001d22 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0210 	bic.w	r2, r2, #16
 8001d06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 fbfe 	bl	800350a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0210 	orr.w	r2, r2, #16
 8001d1c:	619a      	str	r2, [r3, #24]
 8001d1e:	e000      	b.n	8001d22 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d20:	bf00      	nop
    }
  }
}
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_HCD_Start+0x16>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e013      	b.n	8001d66 <HAL_HCD_Start+0x3e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 fba8 	bl	80064a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 f8a1 	bl	8005e9e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_HCD_Stop+0x16>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e00d      	b.n	8001da0 <HAL_HCD_Stop+0x32>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f005 f8fb 	bl	8006f8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 fb4a 	bl	800644e <USB_ResetPort>
 8001dba:	4603      	mov	r3, r0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	334c      	adds	r3, #76	@ 0x4c
 8001de0:	781b      	ldrb	r3, [r3, #0]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3338      	adds	r3, #56	@ 0x38
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fb8c 	bl	8006542 <USB_GetCurrentFrame>
 8001e2a:	4603      	mov	r3, r0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 fb67 	bl	8006514 <USB_GetHostSpeed>
 8001e46:	4603      	mov	r3, r0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	331a      	adds	r3, #26
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	331b      	adds	r3, #27
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3325      	adds	r3, #37	@ 0x25
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3324      	adds	r3, #36	@ 0x24
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 f957 	bl	800618c <USB_ReadChInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d11a      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	334d      	adds	r3, #77	@ 0x4d
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fedb 	bl	8006cd2 <USB_HC_Halt>
 8001f1c:	e09e      	b.n	800205c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f930 	bl	800618c <USB_ReadChInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f36:	d11b      	bne.n	8001f70 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	334d      	adds	r3, #77	@ 0x4d
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 feb2 	bl	8006cd2 <USB_HC_Halt>
 8001f6e:	e075      	b.n	800205c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 f907 	bl	800618c <USB_ReadChInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d11a      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2308      	movs	r3, #8
 8001f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	334d      	adds	r3, #77	@ 0x4d
 8001faa:	2206      	movs	r2, #6
 8001fac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fe8b 	bl	8006cd2 <USB_HC_Halt>
 8001fbc:	e04e      	b.n	800205c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 f8e0 	bl	800618c <USB_ReadChInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d11b      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	334d      	adds	r3, #77	@ 0x4d
 8001ffc:	2209      	movs	r2, #9
 8001ffe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f004 fe62 	bl	8006cd2 <USB_HC_Halt>
 800200e:	e025      	b.n	800205c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f004 f8b7 	bl	800618c <USB_ReadChInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002024:	2b80      	cmp	r3, #128	@ 0x80
 8002026:	d119      	bne.n	800205c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	334d      	adds	r3, #77	@ 0x4d
 800204a:	2207      	movs	r2, #7
 800204c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fe3b 	bl	8006cd2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f004 f891 	bl	800618c <USB_ReadChInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002074:	d112      	bne.n	800209c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fe27 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002096:	6093      	str	r3, [r2, #8]
 8002098:	f000 bd75 	b.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 f871 	bl	800618c <USB_ReadChInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 8128 	bne.w	8002306 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c2:	461a      	mov	r2, r3
 80020c4:	2320      	movs	r3, #32
 80020c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	331b      	adds	r3, #27
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d119      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	331b      	adds	r3, #27
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	0151      	lsls	r1, r2, #5
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	440a      	add	r2, r1
 8002108:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800210c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002110:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	799b      	ldrb	r3, [r3, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01b      	beq.n	8002152 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3330      	adds	r3, #48	@ 0x30
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	1ac9      	subs	r1, r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4403      	add	r3, r0
 800214e:	3338      	adds	r3, #56	@ 0x38
 8002150:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	334d      	adds	r3, #77	@ 0x4d
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3344      	adds	r3, #68	@ 0x44
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002186:	461a      	mov	r2, r3
 8002188:	2301      	movs	r3, #1
 800218a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3326      	adds	r3, #38	@ 0x26
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3326      	adds	r3, #38	@ 0x26
 80021b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d110      	bne.n	80021da <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 fd86 	bl	8006cd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	2310      	movs	r3, #16
 80021d6:	6093      	str	r3, [r2, #8]
 80021d8:	e03d      	b.n	8002256 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3326      	adds	r3, #38	@ 0x26
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d00a      	beq.n	8002206 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	3326      	adds	r3, #38	@ 0x26
 8002200:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002202:	2b01      	cmp	r3, #1
 8002204:	d127      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002224:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	334c      	adds	r3, #76	@ 0x4c
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	334c      	adds	r3, #76	@ 0x4c
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f007 f897 	bl	8009384 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	799b      	ldrb	r3, [r3, #6]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d13b      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3338      	adds	r3, #56	@ 0x38
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4403      	add	r3, r0
 800227e:	3328      	adds	r3, #40	@ 0x28
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	440b      	add	r3, r1
 8002284:	1e59      	subs	r1, r3, #1
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4403      	add	r3, r0
 8002294:	3328      	adds	r3, #40	@ 0x28
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	fbb1 f3f3 	udiv	r3, r1, r3
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8470 	beq.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	333c      	adds	r3, #60	@ 0x3c
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	b2d8      	uxtb	r0, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	333c      	adds	r3, #60	@ 0x3c
 80022ce:	4602      	mov	r2, r0
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	f000 bc58 	b.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	333c      	adds	r3, #60	@ 0x3c
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	333c      	adds	r3, #60	@ 0x3c
 80022fe:	4602      	mov	r2, r0
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	f000 bc40 	b.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f003 ff3c 	bl	800618c <USB_ReadChInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d131      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800232a:	461a      	mov	r2, r3
 800232c:	2320      	movs	r3, #32
 800232e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	331a      	adds	r3, #26
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	f040 841f 	bne.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	331b      	adds	r3, #27
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	334d      	adds	r3, #77	@ 0x4d
 800236c:	2203      	movs	r2, #3
 800236e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f004 fcaa 	bl	8006cd2 <USB_HC_Halt>
 800237e:	f000 bc02 	b.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fefe 	bl	800618c <USB_ReadChInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	f040 8305 	bne.w	80029a6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2302      	movs	r3, #2
 80023ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	334d      	adds	r3, #77	@ 0x4d
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d114      	bne.n	80023ee <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	334d      	adds	r3, #77	@ 0x4d
 80023d4:	2202      	movs	r2, #2
 80023d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334c      	adds	r3, #76	@ 0x4c
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e2cc      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	334d      	adds	r3, #77	@ 0x4d
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d114      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	334d      	adds	r3, #77	@ 0x4d
 8002414:	2202      	movs	r2, #2
 8002416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	334c      	adds	r3, #76	@ 0x4c
 8002428:	2205      	movs	r2, #5
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e2ac      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	334d      	adds	r3, #77	@ 0x4d
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d00b      	beq.n	800245c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	334d      	adds	r3, #77	@ 0x4d
 8002454:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002456:	2b09      	cmp	r3, #9
 8002458:	f040 80a6 	bne.w	80025a8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	334d      	adds	r3, #77	@ 0x4d
 800246c:	2202      	movs	r2, #2
 800246e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3344      	adds	r3, #68	@ 0x44
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4403      	add	r3, r0
 8002490:	3344      	adds	r3, #68	@ 0x44
 8002492:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3344      	adds	r3, #68	@ 0x44
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d943      	bls.n	8002532 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3344      	adds	r3, #68	@ 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	331a      	adds	r3, #26
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d123      	bne.n	800251c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	331b      	adds	r3, #27
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	331c      	adds	r3, #28
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	0151      	lsls	r1, r2, #5
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	440a      	add	r2, r1
 8002512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	334c      	adds	r3, #76	@ 0x4c
 800252c:	2204      	movs	r2, #4
 800252e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002530:	e229      	b.n	8002986 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	334c      	adds	r3, #76	@ 0x4c
 8002542:	2202      	movs	r2, #2
 8002544:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3326      	adds	r3, #38	@ 0x26
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3326      	adds	r3, #38	@ 0x26
 800256c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800256e:	2b02      	cmp	r3, #2
 8002570:	f040 8209 	bne.w	8002986 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800258a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002592:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025a6:	e1ee      	b.n	8002986 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334d      	adds	r3, #77	@ 0x4d
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	f040 80c8 	bne.w	8002750 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	334d      	adds	r3, #77	@ 0x4d
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	331b      	adds	r3, #27
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	f040 81ce 	bne.w	8002988 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3326      	adds	r3, #38	@ 0x26
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d16b      	bne.n	80026da <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3348      	adds	r3, #72	@ 0x48
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1c59      	adds	r1, r3, #1
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4403      	add	r3, r0
 8002622:	3348      	adds	r3, #72	@ 0x48
 8002624:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3348      	adds	r3, #72	@ 0x48
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d943      	bls.n	80026c4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3348      	adds	r3, #72	@ 0x48
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	331b      	adds	r3, #27
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3344      	adds	r3, #68	@ 0x44
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d809      	bhi.n	800268e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	331c      	adds	r3, #28
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ac:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	334c      	adds	r3, #76	@ 0x4c
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e014      	b.n	80026ee <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	334c      	adds	r3, #76	@ 0x4c
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e009      	b.n	80026ee <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	334c      	adds	r3, #76	@ 0x4c
 80026ea:	2202      	movs	r2, #2
 80026ec:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3326      	adds	r3, #38	@ 0x26
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3326      	adds	r3, #38	@ 0x26
 8002714:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002716:	2b02      	cmp	r3, #2
 8002718:	f040 8136 	bne.w	8002988 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002732:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800273a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e11b      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	334d      	adds	r3, #77	@ 0x4d
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b03      	cmp	r3, #3
 8002764:	f040 8081 	bne.w	800286a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	334d      	adds	r3, #77	@ 0x4d
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	331b      	adds	r3, #27
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	f040 80fa 	bne.w	8002988 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	334c      	adds	r3, #76	@ 0x4c
 80027a4:	2202      	movs	r2, #2
 80027a6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	0151      	lsls	r1, r2, #5
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	440a      	add	r2, r1
 80027de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	0151      	lsls	r1, r2, #5
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	440a      	add	r2, r1
 80027fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002802:	f023 0320 	bic.w	r3, r3, #32
 8002806:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3326      	adds	r3, #38	@ 0x26
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3326      	adds	r3, #38	@ 0x26
 800282e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002830:	2b02      	cmp	r3, #2
 8002832:	f040 80a9 	bne.w	8002988 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800284c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002854:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e08e      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	334d      	adds	r3, #77	@ 0x4d
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d143      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334d      	adds	r3, #77	@ 0x4d
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334c      	adds	r3, #76	@ 0x4c
 80028a4:	2202      	movs	r2, #2
 80028a6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3326      	adds	r3, #38	@ 0x26
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3326      	adds	r3, #38	@ 0x26
 80028ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d159      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e03f      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334d      	adds	r3, #77	@ 0x4d
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d126      	bne.n	800296c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	334d      	adds	r3, #77	@ 0x4d
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3344      	adds	r3, #68	@ 0x44
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4403      	add	r3, r0
 8002952:	3344      	adds	r3, #68	@ 0x44
 8002954:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334c      	adds	r3, #76	@ 0x4c
 8002966:	2204      	movs	r2, #4
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e00d      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b02      	cmp	r3, #2
 8002980:	f000 8100 	beq.w	8002b84 <HCD_HC_IN_IRQHandler+0xcca>
 8002984:	e000      	b.n	8002988 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002986:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334c      	adds	r3, #76	@ 0x4c
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f006 fcf0 	bl	8009384 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029a4:	e0ef      	b.n	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fbec 	bl	800618c <USB_ReadChInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d12f      	bne.n	8002a1e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	2340      	movs	r3, #64	@ 0x40
 80029ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	334d      	adds	r3, #77	@ 0x4d
 80029e0:	2205      	movs	r2, #5
 80029e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	331a      	adds	r3, #26
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3344      	adds	r3, #68	@ 0x44
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f95b 	bl	8006cd2 <USB_HC_Halt>
 8002a1c:	e0b3      	b.n	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fbb0 	bl	800618c <USB_ReadChInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	f040 80a7 	bne.w	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3326      	adds	r3, #38	@ 0x26
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d11b      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3344      	adds	r3, #68	@ 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	334d      	adds	r3, #77	@ 0x4d
 8002a72:	2204      	movs	r2, #4
 8002a74:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f927 	bl	8006cd2 <USB_HC_Halt>
 8002a84:	e03f      	b.n	8002b06 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3326      	adds	r3, #38	@ 0x26
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3326      	adds	r3, #38	@ 0x26
 8002aac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d129      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3344      	adds	r3, #68	@ 0x44
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	331b      	adds	r3, #27
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d110      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	@ 0x4d
 8002af4:	2204      	movs	r2, #4
 8002af6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 f8e6 	bl	8006cd2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	331b      	adds	r3, #27
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d129      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	331b      	adds	r3, #27
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	0151      	lsls	r1, r2, #5
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	440a      	add	r2, r1
 8002b46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b6a:	f043 0320 	orr.w	r3, r3, #32
 8002b6e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2310      	movs	r3, #16
 8002b80:	6093      	str	r3, [r2, #8]
 8002b82:	e000      	b.n	8002b86 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b84:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 faee 	bl	800618c <USB_ReadChInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d11b      	bne.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2304      	movs	r3, #4
 8002bca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	334d      	adds	r3, #77	@ 0x4d
 8002bdc:	2207      	movs	r2, #7
 8002bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 f872 	bl	8006cd2 <USB_HC_Halt>
 8002bee:	f000 bc89 	b.w	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fac6 	bl	800618c <USB_ReadChInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 8082 	bne.w	8002d10 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3319      	adds	r3, #25
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d124      	bne.n	8002c7e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3319      	adds	r3, #25
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334c      	adds	r3, #76	@ 0x4c
 8002c58:	2202      	movs	r2, #2
 8002c5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	334d      	adds	r3, #77	@ 0x4d
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f82a 	bl	8006cd2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	331a      	adds	r3, #26
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f040 8437 	bne.w	8003504 <HCD_HC_OUT_IRQHandler+0x978>
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	331b      	adds	r3, #27
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 842b 	bne.w	8003504 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3326      	adds	r3, #38	@ 0x26
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d009      	beq.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	331b      	adds	r3, #27
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	2203      	movs	r2, #3
 8002cea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 ffec 	bl	8006cd2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3344      	adds	r3, #68	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e3f9      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fa37 	bl	800618c <USB_ReadChInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d28:	d111      	bne.n	8002d4e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 ffc3 	bl	8006cd2 <USB_HC_Halt>
 8002d4c:	e3da      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fa18 	bl	800618c <USB_ReadChInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d168      	bne.n	8002e38 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3344      	adds	r3, #68	@ 0x44
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fa02 	bl	800618c <USB_ReadChInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d112      	bne.n	8002db8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3319      	adds	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	2340      	movs	r3, #64	@ 0x40
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	331b      	adds	r3, #27
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	331b      	adds	r3, #27
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e00:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2301      	movs	r3, #1
 8002e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	@ 0x4d
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 ff4e 	bl	8006cd2 <USB_HC_Halt>
 8002e36:	e365      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 f9a3 	bl	800618c <USB_ReadChInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4c:	2b40      	cmp	r3, #64	@ 0x40
 8002e4e:	d139      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334d      	adds	r3, #77	@ 0x4d
 8002e60:	2205      	movs	r2, #5
 8002e62:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	331a      	adds	r3, #26
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3319      	adds	r3, #25
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3344      	adds	r3, #68	@ 0x44
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 ff11 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2340      	movs	r3, #64	@ 0x40
 8002ec0:	6093      	str	r3, [r2, #8]
 8002ec2:	e31f      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f003 f95d 	bl	800618c <USB_ReadChInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d11a      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2308      	movs	r3, #8
 8002eec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	334d      	adds	r3, #77	@ 0x4d
 8002efe:	2206      	movs	r2, #6
 8002f00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fee1 	bl	8006cd2 <USB_HC_Halt>
 8002f10:	e2f8      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 f936 	bl	800618c <USB_ReadChInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d144      	bne.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3344      	adds	r3, #68	@ 0x44
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334d      	adds	r3, #77	@ 0x4d
 8002f4e:	2204      	movs	r2, #4
 8002f50:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3319      	adds	r3, #25
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d114      	bne.n	8002f92 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3318      	adds	r3, #24
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3319      	adds	r3, #25
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fe99 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	2310      	movs	r3, #16
 8002fb0:	6093      	str	r3, [r2, #8]
 8002fb2:	e2a7      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 f8e5 	bl	800618c <USB_ReadChInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc8:	2b80      	cmp	r3, #128	@ 0x80
 8002fca:	f040 8083 	bne.w	80030d4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	799b      	ldrb	r3, [r3, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d111      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334d      	adds	r3, #77	@ 0x4d
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fe6d 	bl	8006cd2 <USB_HC_Halt>
 8002ff8:	e062      	b.n	80030c0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3344      	adds	r3, #68	@ 0x44
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1c59      	adds	r1, r3, #1
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4403      	add	r3, r0
 800301a:	3344      	adds	r3, #68	@ 0x44
 800301c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3344      	adds	r3, #68	@ 0x44
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d922      	bls.n	800307a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3344      	adds	r3, #68	@ 0x44
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	334c      	adds	r3, #76	@ 0x4c
 8003058:	2204      	movs	r2, #4
 800305a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334c      	adds	r3, #76	@ 0x4c
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f006 f986 	bl	8009384 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003078:	e022      	b.n	80030c0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	334c      	adds	r3, #76	@ 0x4c
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030a4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030ac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030cc:	461a      	mov	r2, r3
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	e217      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 f855 	bl	800618c <USB_ReadChInterrupts>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ec:	d11b      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334d      	adds	r3, #77	@ 0x4d
 80030fe:	2209      	movs	r2, #9
 8003100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fde1 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003122:	6093      	str	r3, [r2, #8]
 8003124:	e1ee      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f82c 	bl	800618c <USB_ReadChInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 81df 	bne.w	80034fe <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	2302      	movs	r3, #2
 8003150:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	334d      	adds	r3, #77	@ 0x4d
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 8093 	bne.w	8003290 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	334d      	adds	r3, #77	@ 0x4d
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334c      	adds	r3, #76	@ 0x4c
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3326      	adds	r3, #38	@ 0x26
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d00b      	beq.n	80031c0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3326      	adds	r3, #38	@ 0x26
 80031b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	f040 8190 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	799b      	ldrb	r3, [r3, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d115      	bne.n	80031f4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	333d      	adds	r3, #61	@ 0x3d
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	f083 0301 	eor.w	r3, r3, #1
 80031e0:	b2d8      	uxtb	r0, r3
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	333d      	adds	r3, #61	@ 0x3d
 80031f0:	4602      	mov	r2, r0
 80031f2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	799b      	ldrb	r3, [r3, #6]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 8171 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3334      	adds	r3, #52	@ 0x34
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8165 	beq.w	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3334      	adds	r3, #52	@ 0x34
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4403      	add	r3, r0
 8003236:	3328      	adds	r3, #40	@ 0x28
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	440b      	add	r3, r1
 800323c:	1e59      	subs	r1, r3, #1
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4403      	add	r3, r0
 800324c:	3328      	adds	r3, #40	@ 0x28
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	fbb1 f3f3 	udiv	r3, r1, r3
 8003254:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 813f 	beq.w	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	333d      	adds	r3, #61	@ 0x3d
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2d8      	uxtb	r0, r3
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	333d      	adds	r3, #61	@ 0x3d
 800328a:	4602      	mov	r2, r0
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e127      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334d      	adds	r3, #77	@ 0x4d
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d120      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334d      	adds	r3, #77	@ 0x4d
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	331b      	adds	r3, #27
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 8107 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334c      	adds	r3, #76	@ 0x4c
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e0fb      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	334d      	adds	r3, #77	@ 0x4d
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d13a      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	334d      	adds	r3, #77	@ 0x4d
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334c      	adds	r3, #76	@ 0x4c
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	331b      	adds	r3, #27
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	f040 80d1 	bne.w	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	331b      	adds	r3, #27
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	0151      	lsls	r1, r2, #5
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	440a      	add	r2, r1
 8003368:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800336c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003370:	6053      	str	r3, [r2, #4]
 8003372:	e0b5      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334d      	adds	r3, #77	@ 0x4d
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d114      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334c      	adds	r3, #76	@ 0x4c
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e095      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334d      	adds	r3, #77	@ 0x4d
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d114      	bne.n	80033f4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334d      	adds	r3, #77	@ 0x4d
 80033da:	2202      	movs	r2, #2
 80033dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334c      	adds	r3, #76	@ 0x4c
 80033ee:	2205      	movs	r2, #5
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e075      	b.n	80034e0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334d      	adds	r3, #77	@ 0x4d
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b07      	cmp	r3, #7
 8003408:	d00a      	beq.n	8003420 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334d      	adds	r3, #77	@ 0x4d
 800341a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800341c:	2b09      	cmp	r3, #9
 800341e:	d170      	bne.n	8003502 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	334d      	adds	r3, #77	@ 0x4d
 8003430:	2202      	movs	r2, #2
 8003432:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3344      	adds	r3, #68	@ 0x44
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4403      	add	r3, r0
 8003454:	3344      	adds	r3, #68	@ 0x44
 8003456:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3344      	adds	r3, #68	@ 0x44
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d914      	bls.n	8003498 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3344      	adds	r3, #68	@ 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334c      	adds	r3, #76	@ 0x4c
 8003492:	2204      	movs	r2, #4
 8003494:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003496:	e022      	b.n	80034de <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	334c      	adds	r3, #76	@ 0x4c
 80034a8:	2202      	movs	r2, #2
 80034aa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	334c      	adds	r3, #76	@ 0x4c
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f005 ff44 	bl	8009384 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034fc:	e002      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003502:	bf00      	nop
  }
}
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08a      	sub	sp, #40	@ 0x28
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	0c5b      	lsrs	r3, r3, #17
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d004      	beq.n	8003550 <HCD_RXQLVL_IRQHandler+0x46>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b05      	cmp	r3, #5
 800354a:	f000 80b6 	beq.w	80036ba <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800354e:	e0b7      	b.n	80036c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80b3 	beq.w	80036be <HCD_RXQLVL_IRQHandler+0x1b4>
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	332c      	adds	r3, #44	@ 0x2c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80a7 	beq.w	80036be <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3338      	adds	r3, #56	@ 0x38
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	18d1      	adds	r1, r2, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4403      	add	r3, r0
 8003594:	3334      	adds	r3, #52	@ 0x34
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4299      	cmp	r1, r3
 800359a:	f200 8083 	bhi.w	80036a4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	332c      	adds	r3, #44	@ 0x2c
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	b292      	uxth	r2, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f002 fd7c 	bl	80060b6 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	332c      	adds	r3, #44	@ 0x2c
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	18d1      	adds	r1, r2, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	332c      	adds	r3, #44	@ 0x2c
 80035e4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3338      	adds	r3, #56	@ 0x38
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	18d1      	adds	r1, r2, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4403      	add	r3, r0
 800360a:	3338      	adds	r3, #56	@ 0x38
 800360c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	0cdb      	lsrs	r3, r3, #19
 800361e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003622:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3328      	adds	r3, #40	@ 0x28
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4293      	cmp	r3, r2
 800363c:	d13f      	bne.n	80036be <HCD_RXQLVL_IRQHandler+0x1b4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03c      	beq.n	80036be <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800365a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003662:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	333c      	adds	r3, #60	@ 0x3c
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2d8      	uxtb	r0, r3
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	333c      	adds	r3, #60	@ 0x3c
 800369e:	4602      	mov	r2, r0
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e00c      	b.n	80036be <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334c      	adds	r3, #76	@ 0x4c
 80036b4:	2204      	movs	r2, #4
 80036b6:	701a      	strb	r2, [r3, #0]
      break;
 80036b8:	e001      	b.n	80036be <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036be:	bf00      	nop
  }
}
 80036c0:	bf00      	nop
 80036c2:	3728      	adds	r7, #40	@ 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036f4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d10b      	bne.n	8003718 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f005 fe1e 	bl	800934c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d132      	bne.n	8003788 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d126      	bne.n	8003782 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7a5b      	ldrb	r3, [r3, #9]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d113      	bne.n	8003764 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003746:	d106      	bne.n	8003756 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fe40 	bl	80063d4 <USB_InitFSLSPClkSel>
 8003754:	e011      	b.n	800377a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	4618      	mov	r0, r3
 800375e:	f002 fe39 	bl	80063d4 <USB_InitFSLSPClkSel>
 8003762:	e00a      	b.n	800377a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	79db      	ldrb	r3, [r3, #7]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003772:	461a      	mov	r2, r3
 8003774:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003778:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f005 fe10 	bl	80093a0 <HAL_HCD_PortEnabled_Callback>
 8003780:	e002      	b.n	8003788 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f005 fe1a 	bl	80093bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b20      	cmp	r3, #32
 8003790:	d103      	bne.n	800379a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6013      	str	r3, [r2, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e12b      	b.n	8003a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd f99c 	bl	8000b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003814:	f002 f900 	bl	8005a18 <HAL_RCC_GetPCLK1Freq>
 8003818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4a81      	ldr	r2, [pc, #516]	@ (8003a24 <HAL_I2C_Init+0x274>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d807      	bhi.n	8003834 <HAL_I2C_Init+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a80      	ldr	r2, [pc, #512]	@ (8003a28 <HAL_I2C_Init+0x278>)
 8003828:	4293      	cmp	r3, r2
 800382a:	bf94      	ite	ls
 800382c:	2301      	movls	r3, #1
 800382e:	2300      	movhi	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e006      	b.n	8003842 <HAL_I2C_Init+0x92>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a7d      	ldr	r2, [pc, #500]	@ (8003a2c <HAL_I2C_Init+0x27c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0e7      	b.n	8003a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a78      	ldr	r2, [pc, #480]	@ (8003a30 <HAL_I2C_Init+0x280>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a6a      	ldr	r2, [pc, #424]	@ (8003a24 <HAL_I2C_Init+0x274>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d802      	bhi.n	8003884 <HAL_I2C_Init+0xd4>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3301      	adds	r3, #1
 8003882:	e009      	b.n	8003898 <HAL_I2C_Init+0xe8>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a69      	ldr	r2, [pc, #420]	@ (8003a34 <HAL_I2C_Init+0x284>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	099b      	lsrs	r3, r3, #6
 8003896:	3301      	adds	r3, #1
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	495c      	ldr	r1, [pc, #368]	@ (8003a24 <HAL_I2C_Init+0x274>)
 80038b4:	428b      	cmp	r3, r1
 80038b6:	d819      	bhi.n	80038ec <HAL_I2C_Init+0x13c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e59      	subs	r1, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038cc:	400b      	ands	r3, r1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_I2C_Init+0x138>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	e051      	b.n	800398c <HAL_I2C_Init+0x1dc>
 80038e8:	2304      	movs	r3, #4
 80038ea:	e04f      	b.n	800398c <HAL_I2C_Init+0x1dc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <HAL_I2C_Init+0x168>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e012      	b.n	800393e <HAL_I2C_Init+0x18e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	0099      	lsls	r1, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x196>
 8003942:	2301      	movs	r3, #1
 8003944:	e022      	b.n	800398c <HAL_I2C_Init+0x1dc>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <HAL_I2C_Init+0x1bc>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e58      	subs	r0, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	440b      	add	r3, r1
 800395c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396a:	e00f      	b.n	800398c <HAL_I2C_Init+0x1dc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	6809      	ldr	r1, [r1, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6911      	ldr	r1, [r2, #16]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	000186a0 	.word	0x000186a0
 8003a28:	001e847f 	.word	0x001e847f
 8003a2c:	003d08ff 	.word	0x003d08ff
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	10624dd3 	.word	0x10624dd3

08003a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	4608      	mov	r0, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	817b      	strh	r3, [r7, #10]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	813b      	strh	r3, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a52:	f7fd fa81 	bl	8000f58 <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	f040 80d9 	bne.w	8003c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2319      	movs	r3, #25
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	496d      	ldr	r1, [pc, #436]	@ (8003c24 <HAL_I2C_Mem_Write+0x1ec>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fc8b 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0cc      	b.n	8003c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Mem_Write+0x56>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e0c5      	b.n	8003c1a <HAL_I2C_Mem_Write+0x1e2>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d007      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2221      	movs	r2, #33	@ 0x21
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2240      	movs	r2, #64	@ 0x40
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a4d      	ldr	r2, [pc, #308]	@ (8003c28 <HAL_I2C_Mem_Write+0x1f0>)
 8003af4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af6:	88f8      	ldrh	r0, [r7, #6]
 8003af8:	893a      	ldrh	r2, [r7, #8]
 8003afa:	8979      	ldrh	r1, [r7, #10]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4603      	mov	r3, r0
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fac2 	bl	8004090 <I2C_RequestMemoryWrite>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d052      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e081      	b.n	8003c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fd50 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d107      	bne.n	8003b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06b      	b.n	8003c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_I2C_Mem_Write+0x180>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d017      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1aa      	bne.n	8003b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fd43 	bl	8004650 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d107      	bne.n	8003be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e016      	b.n	8003c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	00100002 	.word	0x00100002
 8003c28:	ffff0000 	.word	0xffff0000

08003c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	@ 0x30
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c46:	f7fd f987 	bl	8000f58 <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	f040 8214 	bne.w	8004082 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2319      	movs	r3, #25
 8003c60:	2201      	movs	r2, #1
 8003c62:	497b      	ldr	r1, [pc, #492]	@ (8003e50 <HAL_I2C_Mem_Read+0x224>)
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fb91 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	e207      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x56>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e200      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d007      	beq.n	8003ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2222      	movs	r2, #34	@ 0x22
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e54 <HAL_I2C_Mem_Read+0x228>)
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cea:	88f8      	ldrh	r0, [r7, #6]
 8003cec:	893a      	ldrh	r2, [r7, #8]
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa5e 	bl	80041bc <I2C_RequestMemoryRead>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1bc      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d113      	bne.n	8003d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e190      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d11b      	bne.n	8003d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e170      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d11b      	bne.n	8003dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	e150      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003dd0:	e144      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	f200 80f1 	bhi.w	8003fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d123      	bne.n	8003e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fc79 	bl	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e145      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e2a:	e117      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d14e      	bne.n	8003ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	4906      	ldr	r1, [pc, #24]	@ (8003e58 <HAL_I2C_Mem_Read+0x22c>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 faa4 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e11a      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
 8003e4e:	bf00      	nop
 8003e50:	00100002 	.word	0x00100002
 8003e54:	ffff0000 	.word	0xffff0000
 8003e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ed0:	e0c4      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed8:	2200      	movs	r2, #0
 8003eda:	496c      	ldr	r1, [pc, #432]	@ (800408c <HAL_I2C_Mem_Read+0x460>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fa55 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0cb      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f34:	2200      	movs	r2, #0
 8003f36:	4955      	ldr	r1, [pc, #340]	@ (800408c <HAL_I2C_Mem_Read+0x460>)
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa27 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e09d      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fbc:	e04e      	b.n	800405c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fb8c 	bl	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e058      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b04      	cmp	r3, #4
 8004010:	d124      	bne.n	800405c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	2b03      	cmp	r3, #3
 8004018:	d107      	bne.n	800402a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004028:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f aeb6 	bne.w	8003dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004082:	2302      	movs	r3, #2
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3728      	adds	r7, #40	@ 0x28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	00010004 	.word	0x00010004

08004090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f960 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e0:	d103      	bne.n	80040ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e05f      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	492d      	ldr	r1, [pc, #180]	@ (80041b8 <I2C_RequestMemoryWrite+0x128>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f9bb 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04c      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6a39      	ldr	r1, [r7, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa46 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e02b      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415c:	893b      	ldrh	r3, [r7, #8]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e021      	b.n	80041ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa20 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e005      	b.n	80041ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	00010002 	.word	0x00010002

080041bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f8c2 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421c:	d103      	bne.n	8004226 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0aa      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	4952      	ldr	r1, [pc, #328]	@ (8004388 <I2C_RequestMemoryRead+0x1cc>)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f91d 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e097      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004268:	6a39      	ldr	r1, [r7, #32]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f9a8 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	2b04      	cmp	r3, #4
 800427c:	d107      	bne.n	800428e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e076      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004298:	893b      	ldrh	r3, [r7, #8]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e021      	b.n	80042e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f982 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d107      	bne.n	80042da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e050      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f967 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d107      	bne.n	8004310 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800430e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e035      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004322:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2200      	movs	r2, #0
 800432c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f82b 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800434a:	d103      	bne.n	8004354 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e013      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	4906      	ldr	r1, [pc, #24]	@ (8004388 <I2C_RequestMemoryRead+0x1cc>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f886 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010002 	.word	0x00010002

0800438c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	e048      	b.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043a4:	d044      	beq.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fc fdd7 	bl	8000f58 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d139      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	e00c      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d116      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e023      	b.n	8004478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10d      	bne.n	8004456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	e00c      	b.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d093      	beq.n	800439e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800448e:	e071      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d123      	bne.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e067      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ee:	d041      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fc fd32 	bl	8000f58 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d136      	bne.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e00b      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e021      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10c      	bne.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e00b      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af6d 	bne.w	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045cc:	e034      	b.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f8e3 	bl	800479a <I2C_IsAcknowledgeFailed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e4:	d028      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fc fcb7 	bl	8000f58 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d016      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d1c3      	bne.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465c:	e034      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f89b 	bl	800479a <I2C_IsAcknowledgeFailed>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004674:	d028      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fc fc6f 	bl	8000f58 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11d      	bne.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d016      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d1c3      	bne.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ec:	e049      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d119      	bne.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e030      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004730:	f7fc fc12 	bl	8000f58 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d302      	bcc.n	8004746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d11d      	bne.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d016      	beq.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e007      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d1ae      	bne.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d11b      	bne.n	80047ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e128      	b.n	8004a5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a90      	ldr	r2, [pc, #576]	@ (8004a64 <HAL_I2S_Init+0x26c>)
 8004822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc f9bd 	bl	8000ba4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004840:	f023 030f 	bic.w	r3, r3, #15
 8004844:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2202      	movs	r2, #2
 800484c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d060      	beq.n	8004918 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800485e:	2310      	movs	r3, #16
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e001      	b.n	8004868 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004864:	2320      	movs	r3, #32
 8004866:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b20      	cmp	r3, #32
 800486e:	d802      	bhi.n	8004876 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004876:	2001      	movs	r0, #1
 8004878:	f001 f9c4 	bl	8005c04 <HAL_RCCEx_GetPeriphCLKFreq>
 800487c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004886:	d125      	bne.n	80048d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d010      	beq.n	80048b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	fbb2 f2f3 	udiv	r2, r2, r3
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	3305      	adds	r3, #5
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e01f      	b.n	80048f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	3305      	adds	r3, #5
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e00e      	b.n	80048f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	3305      	adds	r3, #5
 80048f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004a68 <HAL_I2S_Init+0x270>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e003      	b.n	8004920 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004918:	2302      	movs	r3, #2
 800491a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d902      	bls.n	800492c <HAL_I2S_Init+0x134>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2bff      	cmp	r3, #255	@ 0xff
 800492a:	d907      	bls.n	800493c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004930:	f043 0210 	orr.w	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e08f      	b.n	8004a5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	ea42 0103 	orr.w	r1, r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	430a      	orrs	r2, r1
 800494e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800495a:	f023 030f 	bic.w	r3, r3, #15
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6851      	ldr	r1, [r2, #4]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68d2      	ldr	r2, [r2, #12]
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6992      	ldr	r2, [r2, #24]
 8004972:	430a      	orrs	r2, r1
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800497e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d161      	bne.n	8004a4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a38      	ldr	r2, [pc, #224]	@ (8004a6c <HAL_I2S_Init+0x274>)
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a37      	ldr	r2, [pc, #220]	@ (8004a70 <HAL_I2S_Init+0x278>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d101      	bne.n	800499c <HAL_I2S_Init+0x1a4>
 8004998:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <HAL_I2S_Init+0x27c>)
 800499a:	e001      	b.n	80049a0 <HAL_I2S_Init+0x1a8>
 800499c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	4932      	ldr	r1, [pc, #200]	@ (8004a70 <HAL_I2S_Init+0x278>)
 80049a8:	428a      	cmp	r2, r1
 80049aa:	d101      	bne.n	80049b0 <HAL_I2S_Init+0x1b8>
 80049ac:	4a31      	ldr	r2, [pc, #196]	@ (8004a74 <HAL_I2S_Init+0x27c>)
 80049ae:	e001      	b.n	80049b4 <HAL_I2S_Init+0x1bc>
 80049b0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80049b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80049b8:	f023 030f 	bic.w	r3, r3, #15
 80049bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <HAL_I2S_Init+0x278>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_I2S_Init+0x1d4>
 80049c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a74 <HAL_I2S_Init+0x27c>)
 80049ca:	e001      	b.n	80049d0 <HAL_I2S_Init+0x1d8>
 80049cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049d0:	2202      	movs	r2, #2
 80049d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a25      	ldr	r2, [pc, #148]	@ (8004a70 <HAL_I2S_Init+0x278>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <HAL_I2S_Init+0x1ea>
 80049de:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <HAL_I2S_Init+0x27c>)
 80049e0:	e001      	b.n	80049e6 <HAL_I2S_Init+0x1ee>
 80049e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f2:	d003      	beq.n	80049fc <HAL_I2S_Init+0x204>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80049fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	e001      	b.n	8004a08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a04:	2300      	movs	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a70 <HAL_I2S_Init+0x278>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_I2S_Init+0x24c>
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <HAL_I2S_Init+0x27c>)
 8004a42:	e001      	b.n	8004a48 <HAL_I2S_Init+0x250>
 8004a44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a48:	897a      	ldrh	r2, [r7, #10]
 8004a4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	08004b6f 	.word	0x08004b6f
 8004a68:	cccccccd 	.word	0xcccccccd
 8004a6c:	08004c85 	.word	0x08004c85
 8004a70:	40003800 	.word	0x40003800
 8004a74:	40003400 	.word	0x40003400

08004a78 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004af8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ffb8 	bl	8004a78 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	b292      	uxth	r2, r2
 8004b24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	1c9a      	adds	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10e      	bne.n	8004b66 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff93 	bl	8004a8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d13a      	bne.n	8004c00 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d109      	bne.n	8004ba8 <I2S_IRQHandler+0x3a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d102      	bne.n	8004ba8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ffb4 	bl	8004b10 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bae:	2b40      	cmp	r3, #64	@ 0x40
 8004bb0:	d126      	bne.n	8004c00 <I2S_IRQHandler+0x92>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d11f      	bne.n	8004c00 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f043 0202 	orr.w	r2, r3, #2
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff50 	bl	8004aa0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d136      	bne.n	8004c7a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d109      	bne.n	8004c2a <I2S_IRQHandler+0xbc>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b80      	cmp	r3, #128	@ 0x80
 8004c22:	d102      	bne.n	8004c2a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff ff45 	bl	8004ab4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d122      	bne.n	8004c7a <I2S_IRQHandler+0x10c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d11b      	bne.n	8004c7a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c50:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff13 	bl	8004aa0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a92      	ldr	r2, [pc, #584]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c9e:	4b92      	ldr	r3, [pc, #584]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ca0:	e001      	b.n	8004ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004ca2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a8b      	ldr	r2, [pc, #556]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004cbc:	4b8a      	ldr	r3, [pc, #552]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cbe:	e001      	b.n	8004cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd0:	d004      	beq.n	8004cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 8099 	bne.w	8004e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d107      	bne.n	8004cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f925 	bl	8004f40 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9c8 	bl	80050a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d16:	2b40      	cmp	r3, #64	@ 0x40
 8004d18:	d13a      	bne.n	8004d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d035      	beq.n	8004d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d30:	e001      	b.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004d32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4969      	ldr	r1, [pc, #420]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d3e:	428b      	cmp	r3, r1
 8004d40:	d101      	bne.n	8004d46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004d42:	4b69      	ldr	r3, [pc, #420]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d44:	e001      	b.n	8004d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004d46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	f043 0202 	orr.w	r2, r3, #2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fe88 	bl	8004aa0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	f040 80c3 	bne.w	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80bd 	beq.w	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004db6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a49      	ldr	r2, [pc, #292]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004dc2:	4b49      	ldr	r3, [pc, #292]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dc4:	e001      	b.n	8004dca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004dc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4944      	ldr	r1, [pc, #272]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dd2:	428b      	cmp	r3, r1
 8004dd4:	d101      	bne.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dd8:	e001      	b.n	8004dde <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004dda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004de2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	f043 0204 	orr.w	r2, r3, #4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fe4a 	bl	8004aa0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e0c:	e089      	b.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d107      	bne.n	8004e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8be 	bl	8004fa4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8fd 	bl	800503c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d12f      	bne.n	8004eac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d02a      	beq.n	8004eac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e64:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e72:	e001      	b.n	8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4919      	ldr	r1, [pc, #100]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e80:	428b      	cmp	r3, r1
 8004e82:	d101      	bne.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e84:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e86:	e001      	b.n	8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f043 0202 	orr.w	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fdfa 	bl	8004aa0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d136      	bne.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d031      	beq.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a07      	ldr	r2, [pc, #28]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ecc:	e001      	b.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4902      	ldr	r1, [pc, #8]	@ (8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eda:	428b      	cmp	r3, r1
 8004edc:	d106      	bne.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004ede:	4b02      	ldr	r3, [pc, #8]	@ (8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ee0:	e006      	b.n	8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004ee2:	bf00      	nop
 8004ee4:	40003800 	.word	0x40003800
 8004ee8:	40003400 	.word	0x40003400
 8004eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ef0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ef4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fdc0 	bl	8004aa0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f20:	e000      	b.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f22:	bf00      	nop
}
 8004f24:	bf00      	nop
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	1c99      	adds	r1, r3, #2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6251      	str	r1, [r2, #36]	@ 0x24
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ffc9 	bl	8004f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	1c99      	adds	r1, r3, #2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8004fb6:	8819      	ldrh	r1, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <I2SEx_TxISR_I2SExt+0x90>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <I2SEx_TxISR_I2SExt+0x22>
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <I2SEx_TxISR_I2SExt+0x94>)
 8004fc4:	e001      	b.n	8004fca <I2SEx_TxISR_I2SExt+0x26>
 8004fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fca:	460a      	mov	r2, r1
 8004fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d121      	bne.n	800502a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a12      	ldr	r2, [pc, #72]	@ (8005034 <I2SEx_TxISR_I2SExt+0x90>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <I2SEx_TxISR_I2SExt+0x50>
 8004ff0:	4b11      	ldr	r3, [pc, #68]	@ (8005038 <I2SEx_TxISR_I2SExt+0x94>)
 8004ff2:	e001      	b.n	8004ff8 <I2SEx_TxISR_I2SExt+0x54>
 8004ff4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	490d      	ldr	r1, [pc, #52]	@ (8005034 <I2SEx_TxISR_I2SExt+0x90>)
 8005000:	428b      	cmp	r3, r1
 8005002:	d101      	bne.n	8005008 <I2SEx_TxISR_I2SExt+0x64>
 8005004:	4b0c      	ldr	r3, [pc, #48]	@ (8005038 <I2SEx_TxISR_I2SExt+0x94>)
 8005006:	e001      	b.n	800500c <I2SEx_TxISR_I2SExt+0x68>
 8005008:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800500c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff81 	bl	8004f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40003800 	.word	0x40003800
 8005038:	40003400 	.word	0x40003400

0800503c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68d8      	ldr	r0, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	1c99      	adds	r1, r3, #2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005054:	b282      	uxth	r2, r0
 8005056:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d113      	bne.n	8005098 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800507e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ff4a 	bl	8004f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a20      	ldr	r2, [pc, #128]	@ (8005130 <I2SEx_RxISR_I2SExt+0x90>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <I2SEx_RxISR_I2SExt+0x16>
 80050b2:	4b20      	ldr	r3, [pc, #128]	@ (8005134 <I2SEx_RxISR_I2SExt+0x94>)
 80050b4:	e001      	b.n	80050ba <I2SEx_RxISR_I2SExt+0x1a>
 80050b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ba:	68d8      	ldr	r0, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	1c99      	adds	r1, r3, #2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80050c6:	b282      	uxth	r2, r0
 80050c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d121      	bne.n	8005126 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a12      	ldr	r2, [pc, #72]	@ (8005130 <I2SEx_RxISR_I2SExt+0x90>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <I2SEx_RxISR_I2SExt+0x50>
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <I2SEx_RxISR_I2SExt+0x94>)
 80050ee:	e001      	b.n	80050f4 <I2SEx_RxISR_I2SExt+0x54>
 80050f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	490d      	ldr	r1, [pc, #52]	@ (8005130 <I2SEx_RxISR_I2SExt+0x90>)
 80050fc:	428b      	cmp	r3, r1
 80050fe:	d101      	bne.n	8005104 <I2SEx_RxISR_I2SExt+0x64>
 8005100:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <I2SEx_RxISR_I2SExt+0x94>)
 8005102:	e001      	b.n	8005108 <I2SEx_RxISR_I2SExt+0x68>
 8005104:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005108:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800510c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff03 	bl	8004f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40003800 	.word	0x40003800
 8005134:	40003400 	.word	0x40003400

08005138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e267      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d075      	beq.n	8005242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005156:	4b88      	ldr	r3, [pc, #544]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b04      	cmp	r3, #4
 8005160:	d00c      	beq.n	800517c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005162:	4b85      	ldr	r3, [pc, #532]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800516a:	2b08      	cmp	r3, #8
 800516c:	d112      	bne.n	8005194 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516e:	4b82      	ldr	r3, [pc, #520]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800517a:	d10b      	bne.n	8005194 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	4b7e      	ldr	r3, [pc, #504]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d05b      	beq.n	8005240 <HAL_RCC_OscConfig+0x108>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d157      	bne.n	8005240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e242      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d106      	bne.n	80051ac <HAL_RCC_OscConfig+0x74>
 800519e:	4b76      	ldr	r3, [pc, #472]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a75      	ldr	r2, [pc, #468]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e01d      	b.n	80051e8 <HAL_RCC_OscConfig+0xb0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x98>
 80051b6:	4b70      	ldr	r3, [pc, #448]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0xb0>
 80051d0:	4b69      	ldr	r3, [pc, #420]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a68      	ldr	r2, [pc, #416]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b66      	ldr	r3, [pc, #408]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a65      	ldr	r2, [pc, #404]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80051e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d013      	beq.n	8005218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fb feb2 	bl	8000f58 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fb feae 	bl	8000f58 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	@ 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e207      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520a:	4b5b      	ldr	r3, [pc, #364]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0xc0>
 8005216:	e014      	b.n	8005242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fb fe9e 	bl	8000f58 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005220:	f7fb fe9a 	bl	8000f58 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	@ 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1f3      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005232:	4b51      	ldr	r3, [pc, #324]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0xe8>
 800523e:	e000      	b.n	8005242 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d063      	beq.n	8005316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800524e:	4b4a      	ldr	r3, [pc, #296]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800525a:	4b47      	ldr	r3, [pc, #284]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005262:	2b08      	cmp	r3, #8
 8005264:	d11c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005266:	4b44      	ldr	r3, [pc, #272]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d116      	bne.n	80052a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005272:	4b41      	ldr	r3, [pc, #260]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_RCC_OscConfig+0x152>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e1c7      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528a:	4b3b      	ldr	r3, [pc, #236]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4937      	ldr	r1, [pc, #220]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529e:	e03a      	b.n	8005316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a8:	4b34      	ldr	r3, [pc, #208]	@ (800537c <HAL_RCC_OscConfig+0x244>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fb fe53 	bl	8000f58 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fb fe4f 	bl	8000f58 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e1a8      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d4:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4925      	ldr	r1, [pc, #148]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	600b      	str	r3, [r1, #0]
 80052e8:	e015      	b.n	8005316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ea:	4b24      	ldr	r3, [pc, #144]	@ (800537c <HAL_RCC_OscConfig+0x244>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fb fe32 	bl	8000f58 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f8:	f7fb fe2e 	bl	8000f58 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e187      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800530a:	4b1b      	ldr	r3, [pc, #108]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d036      	beq.n	8005390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d016      	beq.n	8005358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800532a:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <HAL_RCC_OscConfig+0x248>)
 800532c:	2201      	movs	r2, #1
 800532e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005330:	f7fb fe12 	bl	8000f58 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005338:	f7fb fe0e 	bl	8000f58 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e167      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800534a:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <HAL_RCC_OscConfig+0x240>)
 800534c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x200>
 8005356:	e01b      	b.n	8005390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <HAL_RCC_OscConfig+0x248>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535e:	f7fb fdfb 	bl	8000f58 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005364:	e00e      	b.n	8005384 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005366:	f7fb fdf7 	bl	8000f58 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d907      	bls.n	8005384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e150      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
 8005378:	40023800 	.word	0x40023800
 800537c:	42470000 	.word	0x42470000
 8005380:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005384:	4b88      	ldr	r3, [pc, #544]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ea      	bne.n	8005366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8097 	beq.w	80054cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053a2:	4b81      	ldr	r3, [pc, #516]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	4b7d      	ldr	r3, [pc, #500]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	4a7c      	ldr	r2, [pc, #496]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80053be:	4b7a      	ldr	r3, [pc, #488]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ce:	4b77      	ldr	r3, [pc, #476]	@ (80055ac <HAL_RCC_OscConfig+0x474>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d118      	bne.n	800540c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053da:	4b74      	ldr	r3, [pc, #464]	@ (80055ac <HAL_RCC_OscConfig+0x474>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a73      	ldr	r2, [pc, #460]	@ (80055ac <HAL_RCC_OscConfig+0x474>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e6:	f7fb fdb7 	bl	8000f58 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fb fdb3 	bl	8000f58 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e10c      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005400:	4b6a      	ldr	r3, [pc, #424]	@ (80055ac <HAL_RCC_OscConfig+0x474>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d106      	bne.n	8005422 <HAL_RCC_OscConfig+0x2ea>
 8005414:	4b64      	ldr	r3, [pc, #400]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	4a63      	ldr	r2, [pc, #396]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005420:	e01c      	b.n	800545c <HAL_RCC_OscConfig+0x324>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d10c      	bne.n	8005444 <HAL_RCC_OscConfig+0x30c>
 800542a:	4b5f      	ldr	r3, [pc, #380]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542e:	4a5e      	ldr	r2, [pc, #376]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005430:	f043 0304 	orr.w	r3, r3, #4
 8005434:	6713      	str	r3, [r2, #112]	@ 0x70
 8005436:	4b5c      	ldr	r3, [pc, #368]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543a:	4a5b      	ldr	r2, [pc, #364]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6713      	str	r3, [r2, #112]	@ 0x70
 8005442:	e00b      	b.n	800545c <HAL_RCC_OscConfig+0x324>
 8005444:	4b58      	ldr	r3, [pc, #352]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005448:	4a57      	ldr	r2, [pc, #348]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005450:	4b55      	ldr	r3, [pc, #340]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005454:	4a54      	ldr	r2, [pc, #336]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005456:	f023 0304 	bic.w	r3, r3, #4
 800545a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d015      	beq.n	8005490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fb fd78 	bl	8000f58 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546a:	e00a      	b.n	8005482 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546c:	f7fb fd74 	bl	8000f58 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0cb      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005482:	4b49      	ldr	r3, [pc, #292]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0ee      	beq.n	800546c <HAL_RCC_OscConfig+0x334>
 800548e:	e014      	b.n	80054ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005490:	f7fb fd62 	bl	8000f58 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005496:	e00a      	b.n	80054ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005498:	f7fb fd5e 	bl	8000f58 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0b5      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ae:	4b3e      	ldr	r3, [pc, #248]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1ee      	bne.n	8005498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d105      	bne.n	80054cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c0:	4b39      	ldr	r3, [pc, #228]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	4a38      	ldr	r2, [pc, #224]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80054c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80a1 	beq.w	8005618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054d6:	4b34      	ldr	r3, [pc, #208]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d05c      	beq.n	800559c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d141      	bne.n	800556e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <HAL_RCC_OscConfig+0x478>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7fb fd32 	bl	8000f58 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fb fd2e 	bl	8000f58 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e087      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550a:	4b27      	ldr	r3, [pc, #156]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69da      	ldr	r2, [r3, #28]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	019b      	lsls	r3, r3, #6
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	3b01      	subs	r3, #1
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	491b      	ldr	r1, [pc, #108]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <HAL_RCC_OscConfig+0x478>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fb fd07 	bl	8000f58 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554e:	f7fb fd03 	bl	8000f58 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e05c      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x416>
 800556c:	e054      	b.n	8005618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <HAL_RCC_OscConfig+0x478>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fb fcf0 	bl	8000f58 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fb fcec 	bl	8000f58 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e045      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558e:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <HAL_RCC_OscConfig+0x470>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x444>
 800559a:	e03d      	b.n	8005618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e038      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40007000 	.word	0x40007000
 80055b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005624 <HAL_RCC_OscConfig+0x4ec>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d028      	beq.n	8005614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d121      	bne.n	8005614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d11a      	bne.n	8005614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055e4:	4013      	ands	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d111      	bne.n	8005614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	085b      	lsrs	r3, r3, #1
 80055fc:	3b01      	subs	r3, #1
 80055fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005600:	429a      	cmp	r2, r3
 8005602:	d107      	bne.n	8005614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800

08005628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0cc      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	4b68      	ldr	r3, [pc, #416]	@ (80057e0 <HAL_RCC_ClockConfig+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d90c      	bls.n	8005664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b65      	ldr	r3, [pc, #404]	@ (80057e0 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b63      	ldr	r3, [pc, #396]	@ (80057e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0b8      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d020      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800567c:	4b59      	ldr	r3, [pc, #356]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4a58      	ldr	r2, [pc, #352]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005694:	4b53      	ldr	r3, [pc, #332]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4a52      	ldr	r2, [pc, #328]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800569e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a0:	4b50      	ldr	r3, [pc, #320]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	494d      	ldr	r1, [pc, #308]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d044      	beq.n	8005748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d107      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	4b47      	ldr	r3, [pc, #284]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d119      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e07f      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d003      	beq.n	80056e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e6:	4b3f      	ldr	r3, [pc, #252]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e06f      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f6:	4b3b      	ldr	r3, [pc, #236]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e067      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005706:	4b37      	ldr	r3, [pc, #220]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f023 0203 	bic.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4934      	ldr	r1, [pc, #208]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005718:	f7fb fc1e 	bl	8000f58 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	e00a      	b.n	8005736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005720:	f7fb fc1a 	bl	8000f58 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e04f      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	4b2b      	ldr	r3, [pc, #172]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 020c 	and.w	r2, r3, #12
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	429a      	cmp	r2, r3
 8005746:	d1eb      	bne.n	8005720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005748:	4b25      	ldr	r3, [pc, #148]	@ (80057e0 <HAL_RCC_ClockConfig+0x1b8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d20c      	bcs.n	8005770 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b22      	ldr	r3, [pc, #136]	@ (80057e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b20      	ldr	r3, [pc, #128]	@ (80057e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e032      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800577c:	4b19      	ldr	r3, [pc, #100]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4916      	ldr	r1, [pc, #88]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	4313      	orrs	r3, r2
 800578c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800579a:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	490e      	ldr	r1, [pc, #56]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ae:	f000 f821 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 80057b2:	4602      	mov	r2, r0
 80057b4:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	490a      	ldr	r1, [pc, #40]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 80057c0:	5ccb      	ldrb	r3, [r1, r3]
 80057c2:	fa22 f303 	lsr.w	r3, r2, r3
 80057c6:	4a09      	ldr	r2, [pc, #36]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057ca:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <HAL_RCC_ClockConfig+0x1c8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fb fb7e 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40023c00 	.word	0x40023c00
 80057e4:	40023800 	.word	0x40023800
 80057e8:	08009a78 	.word	0x08009a78
 80057ec:	20000000 	.word	0x20000000
 80057f0:	20000004 	.word	0x20000004

080057f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f8:	b094      	sub	sp, #80	@ 0x50
 80057fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800580c:	4b79      	ldr	r3, [pc, #484]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b08      	cmp	r3, #8
 8005816:	d00d      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x40>
 8005818:	2b08      	cmp	r3, #8
 800581a:	f200 80e1 	bhi.w	80059e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x34>
 8005822:	2b04      	cmp	r3, #4
 8005824:	d003      	beq.n	800582e <HAL_RCC_GetSysClockFreq+0x3a>
 8005826:	e0db      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005828:	4b73      	ldr	r3, [pc, #460]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800582a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800582c:	e0db      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800582e:	4b73      	ldr	r3, [pc, #460]	@ (80059fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005830:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005832:	e0d8      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005834:	4b6f      	ldr	r3, [pc, #444]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800583c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800583e:	4b6d      	ldr	r3, [pc, #436]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d063      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800584a:	4b6a      	ldr	r3, [pc, #424]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	099b      	lsrs	r3, r3, #6
 8005850:	2200      	movs	r2, #0
 8005852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005854:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
 800585e:	2300      	movs	r3, #0
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
 8005862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	f04f 0000 	mov.w	r0, #0
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005878:	0150      	lsls	r0, r2, #5
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4621      	mov	r1, r4
 8005880:	1a51      	subs	r1, r2, r1
 8005882:	6139      	str	r1, [r7, #16]
 8005884:	4629      	mov	r1, r5
 8005886:	eb63 0301 	sbc.w	r3, r3, r1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005898:	4659      	mov	r1, fp
 800589a:	018b      	lsls	r3, r1, #6
 800589c:	4651      	mov	r1, sl
 800589e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058a2:	4651      	mov	r1, sl
 80058a4:	018a      	lsls	r2, r1, #6
 80058a6:	4651      	mov	r1, sl
 80058a8:	ebb2 0801 	subs.w	r8, r2, r1
 80058ac:	4659      	mov	r1, fp
 80058ae:	eb63 0901 	sbc.w	r9, r3, r1
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058c6:	4690      	mov	r8, r2
 80058c8:	4699      	mov	r9, r3
 80058ca:	4623      	mov	r3, r4
 80058cc:	eb18 0303 	adds.w	r3, r8, r3
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	462b      	mov	r3, r5
 80058d4:	eb49 0303 	adc.w	r3, r9, r3
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058e6:	4629      	mov	r1, r5
 80058e8:	024b      	lsls	r3, r1, #9
 80058ea:	4621      	mov	r1, r4
 80058ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058f0:	4621      	mov	r1, r4
 80058f2:	024a      	lsls	r2, r1, #9
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fa:	2200      	movs	r2, #0
 80058fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005904:	f7fa fc60 	bl	80001c8 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005910:	e058      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005912:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	2200      	movs	r2, #0
 800591a:	4618      	mov	r0, r3
 800591c:	4611      	mov	r1, r2
 800591e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	2300      	movs	r3, #0
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
 8005928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	f04f 0000 	mov.w	r0, #0
 8005934:	f04f 0100 	mov.w	r1, #0
 8005938:	0159      	lsls	r1, r3, #5
 800593a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800593e:	0150      	lsls	r0, r2, #5
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4641      	mov	r1, r8
 8005946:	ebb2 0a01 	subs.w	sl, r2, r1
 800594a:	4649      	mov	r1, r9
 800594c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800595c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005964:	ebb2 040a 	subs.w	r4, r2, sl
 8005968:	eb63 050b 	sbc.w	r5, r3, fp
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	00eb      	lsls	r3, r5, #3
 8005976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800597a:	00e2      	lsls	r2, r4, #3
 800597c:	4614      	mov	r4, r2
 800597e:	461d      	mov	r5, r3
 8005980:	4643      	mov	r3, r8
 8005982:	18e3      	adds	r3, r4, r3
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	464b      	mov	r3, r9
 8005988:	eb45 0303 	adc.w	r3, r5, r3
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800599a:	4629      	mov	r1, r5
 800599c:	028b      	lsls	r3, r1, #10
 800599e:	4621      	mov	r1, r4
 80059a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059a4:	4621      	mov	r1, r4
 80059a6:	028a      	lsls	r2, r1, #10
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ae:	2200      	movs	r2, #0
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	61fa      	str	r2, [r7, #28]
 80059b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059b8:	f7fa fc06 	bl	80001c8 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4613      	mov	r3, r2
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059c4:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	3301      	adds	r3, #1
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059de:	e002      	b.n	80059e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059e0:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80059e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3750      	adds	r7, #80	@ 0x50
 80059ec:	46bd      	mov	sp, r7
 80059ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	007a1200 	.word	0x007a1200

08005a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a04:	4b03      	ldr	r3, [pc, #12]	@ (8005a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a06:	681b      	ldr	r3, [r3, #0]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000000 	.word	0x20000000

08005a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a1c:	f7ff fff0 	bl	8005a00 <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	0a9b      	lsrs	r3, r3, #10
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4903      	ldr	r1, [pc, #12]	@ (8005a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	08009a88 	.word	0x08009a88

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d035      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a68:	4b62      	ldr	r3, [pc, #392]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a6e:	f7fb fa73 	bl	8000f58 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a76:	f7fb fa6f 	bl	8000f58 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e0b0      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a88:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f0      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	019a      	lsls	r2, r3, #6
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	071b      	lsls	r3, r3, #28
 8005aa0:	4955      	ldr	r1, [pc, #340]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005aa8:	4b52      	ldr	r3, [pc, #328]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aae:	f7fb fa53 	bl	8000f58 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ab6:	f7fb fa4f 	bl	8000f58 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e090      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8083 	beq.w	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	4b44      	ldr	r3, [pc, #272]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	4a43      	ldr	r2, [pc, #268]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af2:	4b41      	ldr	r3, [pc, #260]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005afe:	4b3f      	ldr	r3, [pc, #252]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3e      	ldr	r2, [pc, #248]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0a:	f7fb fa25 	bl	8000f58 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fb fa21 	bl	8000f58 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e062      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b24:	4b35      	ldr	r3, [pc, #212]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b30:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02f      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d028      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b58:	4b29      	ldr	r3, [pc, #164]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b5e:	4b28      	ldr	r3, [pc, #160]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b64:	4a24      	ldr	r2, [pc, #144]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b6a:	4b23      	ldr	r3, [pc, #140]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d114      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b76:	f7fb f9ef 	bl	8000f58 <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fb f9eb 	bl	8000f58 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e02a      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b94:	4b18      	ldr	r3, [pc, #96]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ee      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bac:	d10d      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc2:	490d      	ldr	r1, [pc, #52]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]
 8005bc8:	e005      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bca:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bd4:	6093      	str	r3, [r2, #8]
 8005bd6:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	4905      	ldr	r1, [pc, #20]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	42470068 	.word	0x42470068
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	40007000 	.word	0x40007000
 8005c00:	42470e40 	.word	0x42470e40

08005c04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d13f      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005c22:	4b24      	ldr	r3, [pc, #144]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c38:	d12f      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c3c:	617b      	str	r3, [r7, #20]
          break;
 8005c3e:	e02f      	b.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c40:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c4c:	d108      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c56:	4a19      	ldr	r2, [pc, #100]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	e007      	b.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c60:	4b14      	ldr	r3, [pc, #80]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c68:	4a15      	ldr	r2, [pc, #84]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c70:	4b10      	ldr	r3, [pc, #64]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8a:	0f1b      	lsrs	r3, r3, #28
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
          break;
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
          break;
 8005c9e:	bf00      	nop
        }
      }
      break;
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005ca2:	bf00      	nop
    }
  }
  return frequency;
 8005ca4:	697b      	ldr	r3, [r7, #20]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	00bb8000 	.word	0x00bb8000
 8005cbc:	007a1200 	.word	0x007a1200
 8005cc0:	00f42400 	.word	0x00f42400

08005cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07b      	b.n	8005dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d108      	bne.n	8005cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce6:	d009      	beq.n	8005cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	61da      	str	r2, [r3, #28]
 8005cee:	e005      	b.n	8005cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fa ffc4 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	ea42 0103 	orr.w	r1, r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	f003 0104 	and.w	r1, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	f003 0210 	and.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	f107 001c 	add.w	r0, r7, #28
 8005de4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005de8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d123      	bne.n	8005e38 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d105      	bne.n	8005e2c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f9dc 	bl	80061ea <USB_CoreReset>
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]
 8005e36:	e01b      	b.n	8005e70 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9d0 	bl	80061ea <USB_CoreReset>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e62:	e005      	b.n	8005e70 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e70:	7fbb      	ldrb	r3, [r7, #30]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10b      	bne.n	8005e8e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f043 0206 	orr.w	r2, r3, #6
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	4770      	bx	lr

08005e9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f023 0201 	bic.w	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d115      	bne.n	8005f30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f10:	200a      	movs	r0, #10
 8005f12:	f7fb f82d 	bl	8000f70 <HAL_Delay>
      ms += 10U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	330a      	adds	r3, #10
 8005f1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f956 	bl	80061ce <USB_GetMode>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d01e      	beq.n	8005f66 <USB_SetCurrentMode+0x84>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f2c:	d9f0      	bls.n	8005f10 <USB_SetCurrentMode+0x2e>
 8005f2e:	e01a      	b.n	8005f66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d115      	bne.n	8005f62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f42:	200a      	movs	r0, #10
 8005f44:	f7fb f814 	bl	8000f70 <HAL_Delay>
      ms += 10U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	330a      	adds	r3, #10
 8005f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f93d 	bl	80061ce <USB_GetMode>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <USB_SetCurrentMode+0x84>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f5e:	d9f0      	bls.n	8005f42 <USB_SetCurrentMode+0x60>
 8005f60:	e001      	b.n	8005f66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e005      	b.n	8005f72 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f6a:	d101      	bne.n	8005f70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f94:	d901      	bls.n	8005f9a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e01b      	b.n	8005fd2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	daf2      	bge.n	8005f88 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fbe:	d901      	bls.n	8005fc4 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e006      	b.n	8005fd2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d0f0      	beq.n	8005fb2 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ff6:	d901      	bls.n	8005ffc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e018      	b.n	800602e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	daf2      	bge.n	8005fea <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2210      	movs	r2, #16
 800600c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800601a:	d901      	bls.n	8006020 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e006      	b.n	800602e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d0f0      	beq.n	800600e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800603a:	b480      	push	{r7}
 800603c:	b089      	sub	sp, #36	@ 0x24
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	4611      	mov	r1, r2
 8006046:	461a      	mov	r2, r3
 8006048:	460b      	mov	r3, r1
 800604a:	71fb      	strb	r3, [r7, #7]
 800604c:	4613      	mov	r3, r2
 800604e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006058:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800605c:	2b00      	cmp	r3, #0
 800605e:	d123      	bne.n	80060a8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006060:	88bb      	ldrh	r3, [r7, #4]
 8006062:	3303      	adds	r3, #3
 8006064:	089b      	lsrs	r3, r3, #2
 8006066:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e018      	b.n	80060a0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	031a      	lsls	r2, r3, #12
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800607a:	461a      	mov	r2, r3
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3301      	adds	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3301      	adds	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3301      	adds	r3, #1
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3e2      	bcc.n	800606e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3724      	adds	r7, #36	@ 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b08b      	sub	sp, #44	@ 0x2c
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060dc:	2300      	movs	r3, #0
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	e014      	b.n	800610c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	3301      	adds	r3, #1
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	3301      	adds	r3, #1
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	3301      	adds	r3, #1
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	3301      	adds	r3, #1
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	3301      	adds	r3, #1
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	429a      	cmp	r2, r3
 8006112:	d3e6      	bcc.n	80060e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006114:	8bfb      	ldrh	r3, [r7, #30]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01e      	beq.n	8006158 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006124:	461a      	mov	r2, r3
 8006126:	f107 0310 	add.w	r3, r7, #16
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	701a      	strb	r2, [r3, #0]
      i++;
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	3301      	adds	r3, #1
 8006144:	623b      	str	r3, [r7, #32]
      pDest++;
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	3301      	adds	r3, #1
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800614c:	8bfb      	ldrh	r3, [r7, #30]
 800614e:	3b01      	subs	r3, #1
 8006150:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006152:	8bfb      	ldrh	r3, [r7, #30]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800615a:	4618      	mov	r0, r3
 800615c:	372c      	adds	r7, #44	@ 0x2c
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006166:	b480      	push	{r7}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4013      	ands	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800617e:	68fb      	ldr	r3, [r7, #12]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4013      	ands	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061c0:	68bb      	ldr	r3, [r7, #8]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0301 	and.w	r3, r3, #1
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006202:	d901      	bls.n	8006208 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e01b      	b.n	8006240 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	daf2      	bge.n	80061f6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f043 0201 	orr.w	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800622c:	d901      	bls.n	8006232 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e006      	b.n	8006240 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	d0f0      	beq.n	8006220 <USB_CoreReset+0x36>

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800624c:	b084      	sub	sp, #16
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800625a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800626c:	461a      	mov	r2, r3
 800626e:	2300      	movs	r3, #0
 8006270:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80062a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10a      	bne.n	80062c0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e014      	b.n	80062ea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062ce:	f023 0304 	bic.w	r3, r3, #4
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e009      	b.n	80062ea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062e4:	f023 0304 	bic.w	r3, r3, #4
 80062e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ea:	2110      	movs	r1, #16
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fe44 	bl	8005f7a <USB_FlushTxFifo>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fe6e 	bl	8005fde <USB_FlushRxFifo>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	e015      	b.n	800633e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006324:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3301      	adds	r3, #1
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006342:	461a      	mov	r2, r3
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4293      	cmp	r3, r2
 8006348:	d3e3      	bcc.n	8006312 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006356:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <USB_HostInit+0x170>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10b      	bne.n	8006378 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a15      	ldr	r2, [pc, #84]	@ (80063c0 <USB_HostInit+0x174>)
 800636c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a14      	ldr	r2, [pc, #80]	@ (80063c4 <USB_HostInit+0x178>)
 8006372:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006376:	e009      	b.n	800638c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2280      	movs	r2, #128	@ 0x80
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a11      	ldr	r2, [pc, #68]	@ (80063c8 <USB_HostInit+0x17c>)
 8006382:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a11      	ldr	r2, [pc, #68]	@ (80063cc <USB_HostInit+0x180>)
 8006388:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800638c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f043 0210 	orr.w	r2, r3, #16
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <USB_HostInit+0x184>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b8:	b004      	add	sp, #16
 80063ba:	4770      	bx	lr
 80063bc:	40040000 	.word	0x40040000
 80063c0:	01000200 	.word	0x01000200
 80063c4:	00e00300 	.word	0x00e00300
 80063c8:	00600080 	.word	0x00600080
 80063cc:	004000e0 	.word	0x004000e0
 80063d0:	a3200008 	.word	0xa3200008

080063d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	68f9      	ldr	r1, [r7, #12]
 8006408:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800640c:	4313      	orrs	r3, r2
 800640e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800641c:	461a      	mov	r2, r3
 800641e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006422:	6053      	str	r3, [r2, #4]
 8006424:	e00c      	b.n	8006440 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d107      	bne.n	800643c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006432:	461a      	mov	r2, r3
 8006434:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006438:	6053      	str	r3, [r2, #4]
 800643a:	e001      	b.n	8006440 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800646e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800647c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800647e:	2064      	movs	r0, #100	@ 0x64
 8006480:	f7fa fd76 	bl	8000f70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800648c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006490:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006492:	200a      	movs	r0, #10
 8006494:	f7fa fd6c 	bl	8000f70 <HAL_Delay>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80064c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <USB_DriveVbus+0x44>
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d106      	bne.n	80064e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80064e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f0:	d109      	bne.n	8006506 <USB_DriveVbus+0x64>
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006504:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	0c5b      	lsrs	r3, r3, #17
 8006532:	f003 0303 	and.w	r3, r3, #3
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	b29b      	uxth	r3, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4603      	mov	r3, r0
 8006574:	70fb      	strb	r3, [r7, #3]
 8006576:	460b      	mov	r3, r1
 8006578:	70bb      	strb	r3, [r7, #2]
 800657a:	4613      	mov	r3, r2
 800657c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006592:	461a      	mov	r2, r3
 8006594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006598:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800659a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d87c      	bhi.n	800669c <USB_HC_Init+0x138>
 80065a2:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <USB_HC_Init+0x44>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	0800665f 	.word	0x0800665f
 80065b0:	080065b9 	.word	0x080065b9
 80065b4:	08006621 	.word	0x08006621
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c4:	461a      	mov	r2, r3
 80065c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80065ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80065cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	da10      	bge.n	80065f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80065f4:	e055      	b.n	80066a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a6f      	ldr	r2, [pc, #444]	@ (80067b8 <USB_HC_Init+0x254>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d151      	bne.n	80066a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	440a      	add	r2, r1
 8006614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006618:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800661c:	60d3      	str	r3, [r2, #12]
      break;
 800661e:	e040      	b.n	80066a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662c:	461a      	mov	r2, r3
 800662e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006632:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006634:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006638:	2b00      	cmp	r3, #0
 800663a:	da34      	bge.n	80066a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	440a      	add	r2, r1
 8006652:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800665a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800665c:	e023      	b.n	80066a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666a:	461a      	mov	r2, r3
 800666c:	f240 2325 	movw	r3, #549	@ 0x225
 8006670:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006672:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da17      	bge.n	80066aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	78fa      	ldrb	r2, [r7, #3]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	440a      	add	r2, r1
 8006690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006694:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006698:	60d3      	str	r3, [r2, #12]
      }
      break;
 800669a:	e006      	b.n	80066aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	77fb      	strb	r3, [r7, #31]
      break;
 80066a0:	e004      	b.n	80066ac <USB_HC_Init+0x148>
      break;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <USB_HC_Init+0x148>
      break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <USB_HC_Init+0x148>
      break;
 80066aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066d8:	f043 0302 	orr.w	r3, r3, #2
 80066dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f303 	lsl.w	r3, r1, r3
 80066f2:	6939      	ldr	r1, [r7, #16]
 80066f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80066f8:	4313      	orrs	r3, r2
 80066fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	da03      	bge.n	8006718 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e001      	b.n	800671c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fef9 	bl	8006514 <USB_GetHostSpeed>
 8006722:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006724:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006728:	2b02      	cmp	r3, #2
 800672a:	d106      	bne.n	800673a <USB_HC_Init+0x1d6>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d003      	beq.n	800673a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006732:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e001      	b.n	800673e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800673e:	787b      	ldrb	r3, [r7, #1]
 8006740:	059b      	lsls	r3, r3, #22
 8006742:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006746:	78bb      	ldrb	r3, [r7, #2]
 8006748:	02db      	lsls	r3, r3, #11
 800674a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800674e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006750:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006754:	049b      	lsls	r3, r3, #18
 8006756:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800675a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800675c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800675e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006762:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	431a      	orrs	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	440a      	add	r2, r1
 8006774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800677c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800677e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006782:	2b03      	cmp	r3, #3
 8006784:	d003      	beq.n	800678e <USB_HC_Init+0x22a>
 8006786:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d10f      	bne.n	80067ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	78fa      	ldrb	r2, [r7, #3]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80067ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40040000 	.word	0x40040000

080067bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	@ 0x30
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	4613      	mov	r3, r2
 80067c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80067d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006954 <USB_HC_StartXfer+0x198>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d12f      	bne.n	8006842 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d11c      	bne.n	8006822 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	7c9b      	ldrb	r3, [r3, #18]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <USB_HC_StartXfer+0x3c>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	7c9b      	ldrb	r3, [r3, #18]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d124      	bne.n	8006842 <USB_HC_StartXfer+0x86>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	799b      	ldrb	r3, [r3, #6]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d120      	bne.n	8006842 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	440a      	add	r2, r1
 8006816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800681a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681e:	60d3      	str	r3, [r2, #12]
 8006820:	e00f      	b.n	8006842 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	791b      	ldrb	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <USB_HC_StartXfer+0x86>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	795b      	ldrb	r3, [r3, #5]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d107      	bne.n	8006842 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	785b      	ldrb	r3, [r3, #1]
 8006836:	4619      	mov	r1, r3
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fb6b 	bl	8006f14 <USB_DoPing>
        return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e232      	b.n	8006ca8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	799b      	ldrb	r3, [r3, #6]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d158      	bne.n	80068fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800684a:	2301      	movs	r3, #1
 800684c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006856:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	8a92      	ldrh	r2, [r2, #20]
 800685c:	fb03 f202 	mul.w	r2, r3, r2
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	61da      	str	r2, [r3, #28]
 8006864:	e07c      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	7c9b      	ldrb	r3, [r3, #18]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d130      	bne.n	80068d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	2bbc      	cmp	r3, #188	@ 0xbc
 8006874:	d918      	bls.n	80068a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	8a9b      	ldrh	r3, [r3, #20]
 800687a:	461a      	mov	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d003      	beq.n	8006898 <USB_HC_StartXfer+0xdc>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d103      	bne.n	80068a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2202      	movs	r2, #2
 800689c:	60da      	str	r2, [r3, #12]
 800689e:	e05f      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2201      	movs	r2, #1
 80068a4:	60da      	str	r2, [r3, #12]
 80068a6:	e05b      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d007      	beq.n	80068c8 <USB_HC_StartXfer+0x10c>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d003      	beq.n	80068c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2204      	movs	r2, #4
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	e04b      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2203      	movs	r2, #3
 80068cc:	60da      	str	r2, [r3, #12]
 80068ce:	e047      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10d      	bne.n	80068f2 <USB_HC_StartXfer+0x136>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	8a92      	ldrh	r2, [r2, #20]
 80068de:	4293      	cmp	r3, r2
 80068e0:	d907      	bls.n	80068f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	8a92      	ldrh	r2, [r2, #20]
 80068e8:	fb03 f202 	mul.w	r2, r3, r2
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61da      	str	r2, [r3, #28]
 80068f0:	e036      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	61da      	str	r2, [r3, #28]
 80068fa:	e031      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	8a92      	ldrh	r2, [r2, #20]
 800690c:	4413      	add	r3, r2
 800690e:	3b01      	subs	r3, #1
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	8a92      	ldrh	r2, [r2, #20]
 8006914:	fbb3 f3f2 	udiv	r3, r3, r2
 8006918:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800691a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800691c:	8b7b      	ldrh	r3, [r7, #26]
 800691e:	429a      	cmp	r2, r3
 8006920:	d90b      	bls.n	800693a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	8a92      	ldrh	r2, [r2, #20]
 800692c:	fb03 f202 	mul.w	r2, r3, r2
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	61da      	str	r2, [r3, #28]
 8006934:	e001      	b.n	800693a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006936:	2301      	movs	r3, #1
 8006938:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006942:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	8a92      	ldrh	r2, [r2, #20]
 8006948:	fb03 f202 	mul.w	r2, r3, r2
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	61da      	str	r2, [r3, #28]
 8006950:	e006      	b.n	8006960 <USB_HC_StartXfer+0x1a4>
 8006952:	bf00      	nop
 8006954:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6a1a      	ldr	r2, [r3, #32]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006968:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800696a:	04d9      	lsls	r1, r3, #19
 800696c:	4ba3      	ldr	r3, [pc, #652]	@ (8006bfc <USB_HC_StartXfer+0x440>)
 800696e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006970:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7d9b      	ldrb	r3, [r3, #22]
 8006976:	075b      	lsls	r3, r3, #29
 8006978:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800697c:	69f9      	ldr	r1, [r7, #28]
 800697e:	0148      	lsls	r0, r1, #5
 8006980:	6a39      	ldr	r1, [r7, #32]
 8006982:	4401      	add	r1, r0
 8006984:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006988:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800698a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	6999      	ldr	r1, [r3, #24]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a2:	460a      	mov	r2, r1
 80069a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bf0c      	ite	eq
 80069b6:	2301      	moveq	r3, #1
 80069b8:	2300      	movne	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	6a3a      	ldr	r2, [r7, #32]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80069dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	7e7b      	ldrb	r3, [r7, #25]
 80069ee:	075b      	lsls	r3, r3, #29
 80069f0:	69f9      	ldr	r1, [r7, #28]
 80069f2:	0148      	lsls	r0, r1, #5
 80069f4:	6a39      	ldr	r1, [r7, #32]
 80069f6:	4401      	add	r1, r0
 80069f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80069fc:	4313      	orrs	r3, r2
 80069fe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	799b      	ldrb	r3, [r3, #6]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	f040 80c3 	bne.w	8006b90 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	7c5b      	ldrb	r3, [r3, #17]
 8006a0e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006a14:	4313      	orrs	r3, r2
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006a26:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	79db      	ldrb	r3, [r3, #7]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d123      	bne.n	8006a98 <USB_HC_StartXfer+0x2dc>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	78db      	ldrb	r3, [r3, #3]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11f      	bne.n	8006a98 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a76:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	6a3a      	ldr	r2, [r7, #32]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a96:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	7c9b      	ldrb	r3, [r3, #18]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d003      	beq.n	8006aa8 <USB_HC_StartXfer+0x2ec>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	7c9b      	ldrb	r3, [r3, #18]
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d117      	bne.n	8006ad8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d113      	bne.n	8006ad8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	78db      	ldrb	r3, [r3, #3]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10f      	bne.n	8006ad8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	7c9b      	ldrb	r3, [r3, #18]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d162      	bne.n	8006ba6 <USB_HC_StartXfer+0x3ea>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	78db      	ldrb	r3, [r3, #3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d15e      	bne.n	8006ba6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d858      	bhi.n	8006ba4 <USB_HC_StartXfer+0x3e8>
 8006af2:	a201      	add	r2, pc, #4	@ (adr r2, 8006af8 <USB_HC_StartXfer+0x33c>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b6f 	.word	0x08006b6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	6a3a      	ldr	r2, [r7, #32]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b26:	6053      	str	r3, [r2, #4]
          break;
 8006b28:	e03d      	b.n	8006ba6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b44:	f043 030e 	orr.w	r3, r3, #14
 8006b48:	6053      	str	r3, [r2, #4]
          break;
 8006b4a:	e02c      	b.n	8006ba6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b6a:	6053      	str	r3, [r2, #4]
          break;
 8006b6c:	e01b      	b.n	8006ba6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	0151      	lsls	r1, r2, #5
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	440a      	add	r2, r1
 8006b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b8c:	6053      	str	r3, [r2, #4]
          break;
 8006b8e:	e00a      	b.n	8006ba6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6053      	str	r3, [r2, #4]
 8006ba2:	e000      	b.n	8006ba6 <USB_HC_StartXfer+0x3ea>
          break;
 8006ba4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bbc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	e003      	b.n	8006bd8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bd6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bde:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bec:	461a      	mov	r2, r3
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e055      	b.n	8006ca8 <USB_HC_StartXfer+0x4ec>
 8006bfc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d14e      	bne.n	8006ca6 <USB_HC_StartXfer+0x4ea>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d04a      	beq.n	8006ca6 <USB_HC_StartXfer+0x4ea>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	79db      	ldrb	r3, [r3, #7]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d146      	bne.n	8006ca6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	7c9b      	ldrb	r3, [r3, #18]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d831      	bhi.n	8006c84 <USB_HC_StartXfer+0x4c8>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <USB_HC_StartXfer+0x46c>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c5d 	.word	0x08006c5d
 8006c30:	08006c39 	.word	0x08006c39
 8006c34:	08006c5d 	.word	0x08006c5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	3303      	adds	r3, #3
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c42:	8afa      	ldrh	r2, [r7, #22]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d91c      	bls.n	8006c88 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f043 0220 	orr.w	r2, r3, #32
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c5a:	e015      	b.n	8006c88 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	3303      	adds	r3, #3
 8006c62:	089b      	lsrs	r3, r3, #2
 8006c64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c66:	8afa      	ldrh	r2, [r7, #22]
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d90a      	bls.n	8006c8c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c82:	e003      	b.n	8006c8c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006c84:	bf00      	nop
 8006c86:	e002      	b.n	8006c8e <USB_HC_StartXfer+0x4d2>
        break;
 8006c88:	bf00      	nop
 8006c8a:	e000      	b.n	8006c8e <USB_HC_StartXfer+0x4d2>
        break;
 8006c8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6999      	ldr	r1, [r3, #24]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	785a      	ldrb	r2, [r3, #1]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	9000      	str	r0, [sp, #0]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff f9ca 	bl	800603a <USB_WritePacket>
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3728      	adds	r7, #40	@ 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	b29b      	uxth	r3, r3
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b089      	sub	sp, #36	@ 0x24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	0c9b      	lsrs	r3, r3, #18
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	0fdb      	lsrs	r3, r3, #31
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	0fdb      	lsrs	r3, r3, #31
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d10d      	bne.n	8006d54 <USB_HC_Halt+0x82>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <USB_HC_Halt+0x82>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d002      	beq.n	8006d50 <USB_HC_Halt+0x7e>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d101      	bne.n	8006d54 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e0d8      	b.n	8006f06 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <USB_HC_Halt+0x8e>
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d173      	bne.n	8006e48 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d14a      	bne.n	8006e22 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d133      	bne.n	8006e00 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006db2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006db6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dd6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006de4:	d82e      	bhi.n	8006e44 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dfc:	d0ec      	beq.n	8006dd8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dfe:	e081      	b.n	8006f04 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e20:	e070      	b.n	8006f04 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e42:	e05f      	b.n	8006f04 <USB_HC_Halt+0x232>
            break;
 8006e44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e46:	e05d      	b.n	8006f04 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d133      	bne.n	8006ee0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006eb6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ec4:	d81d      	bhi.n	8006f02 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006edc:	d0ec      	beq.n	8006eb8 <USB_HC_Halt+0x1e6>
 8006ede:	e011      	b.n	8006f04 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	e000      	b.n	8006f04 <USB_HC_Halt+0x232>
          break;
 8006f02:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3724      	adds	r7, #36	@ 0x24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	04da      	lsls	r2, r3, #19
 8006f30:	4b15      	ldr	r3, [pc, #84]	@ (8006f88 <USB_DoPing+0x74>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	1ff80000 	.word	0x1ff80000

08006f8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fe ff8d 	bl	8005ec0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fa6:	2110      	movs	r1, #16
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fe ffe6 	bl	8005f7a <USB_FlushTxFifo>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff f810 	bl	8005fde <USB_FlushRxFifo>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	e01f      	b.n	800700e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ff4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007002:	461a      	mov	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	3301      	adds	r3, #1
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b0f      	cmp	r3, #15
 8007012:	d9dc      	bls.n	8006fce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	e034      	b.n	8007084 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007030:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007040:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	461a      	mov	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007060:	d80c      	bhi.n	800707c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007078:	d0ec      	beq.n	8007054 <USB_StopHost+0xc8>
 800707a:	e000      	b.n	800707e <USB_StopHost+0xf2>
        break;
 800707c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	3301      	adds	r3, #1
 8007082:	61bb      	str	r3, [r7, #24]
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d9c7      	bls.n	800701a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007090:	461a      	mov	r2, r3
 8007092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007096:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800709e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7fe fefc 	bl	8005e9e <USB_EnableGlobalInt>

  return ret;
 80070a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3720      	adds	r7, #32
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b089      	sub	sp, #36	@ 0x24
 80070b4:	af04      	add	r7, sp, #16
 80070b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070b8:	2301      	movs	r3, #1
 80070ba:	2202      	movs	r2, #2
 80070bc:	2102      	movs	r1, #2
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fc85 	bl	80079ce <USBH_FindInterface>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2bff      	cmp	r3, #255	@ 0xff
 80070cc:	d002      	beq.n	80070d4 <USBH_CDC_InterfaceInit+0x24>
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d901      	bls.n	80070d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070d4:	2302      	movs	r3, #2
 80070d6:	e13d      	b.n	8007354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fc5a 	bl	8007996 <USBH_SelectInterface>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80070ec:	2302      	movs	r3, #2
 80070ee:	e131      	b.n	8007354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80070f6:	2050      	movs	r0, #80	@ 0x50
 80070f8:	f002 fb64 	bl	80097c4 <malloc>
 80070fc:	4603      	mov	r3, r0
 80070fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007110:	2302      	movs	r3, #2
 8007112:	e11f      	b.n	8007354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007114:	2250      	movs	r2, #80	@ 0x50
 8007116:	2100      	movs	r1, #0
 8007118:	68b8      	ldr	r0, [r7, #8]
 800711a:	f002 fc11 	bl	8009940 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	211a      	movs	r1, #26
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	4413      	add	r3, r2
 800712a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b25b      	sxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	da15      	bge.n	8007162 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	211a      	movs	r1, #26
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	4413      	add	r3, r2
 8007142:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	211a      	movs	r1, #26
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	4413      	add	r3, r2
 8007158:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800715c:	881a      	ldrh	r2, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	785b      	ldrb	r3, [r3, #1]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 ffbe 	bl	80090ea <USBH_AllocPipe>
 800716e:	4603      	mov	r3, r0
 8007170:	461a      	mov	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	7819      	ldrb	r1, [r3, #0]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	7858      	ldrb	r0, [r3, #1]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	8952      	ldrh	r2, [r2, #10]
 800718e:	9202      	str	r2, [sp, #8]
 8007190:	2203      	movs	r2, #3
 8007192:	9201      	str	r2, [sp, #4]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	4623      	mov	r3, r4
 8007198:	4602      	mov	r2, r0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 ff76 	bl	800908c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2200      	movs	r2, #0
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 fa85 	bl	80096b8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071ae:	2300      	movs	r3, #0
 80071b0:	2200      	movs	r2, #0
 80071b2:	210a      	movs	r1, #10
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc0a 	bl	80079ce <USBH_FindInterface>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	2bff      	cmp	r3, #255	@ 0xff
 80071c2:	d002      	beq.n	80071ca <USBH_CDC_InterfaceInit+0x11a>
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d901      	bls.n	80071ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071ca:	2302      	movs	r3, #2
 80071cc:	e0c2      	b.n	8007354 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	211a      	movs	r1, #26
 80071d4:	fb01 f303 	mul.w	r3, r1, r3
 80071d8:	4413      	add	r3, r2
 80071da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da16      	bge.n	8007214 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	211a      	movs	r1, #26
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071f6:	781a      	ldrb	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	211a      	movs	r1, #26
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	4413      	add	r3, r2
 8007208:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800720c:	881a      	ldrh	r2, [r3, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	835a      	strh	r2, [r3, #26]
 8007212:	e015      	b.n	8007240 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	211a      	movs	r1, #26
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	211a      	movs	r1, #26
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	4413      	add	r3, r2
 8007236:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800723a:	881a      	ldrh	r2, [r3, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	211a      	movs	r1, #26
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	4413      	add	r3, r2
 800724c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b25b      	sxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	da16      	bge.n	8007286 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	211a      	movs	r1, #26
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	211a      	movs	r1, #26
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	835a      	strh	r2, [r3, #26]
 8007284:	e015      	b.n	80072b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	211a      	movs	r1, #26
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007296:	781a      	ldrb	r2, [r3, #0]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	211a      	movs	r1, #26
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80072ac:	881a      	ldrh	r2, [r3, #0]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	7b9b      	ldrb	r3, [r3, #14]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 ff16 	bl	80090ea <USBH_AllocPipe>
 80072be:	4603      	mov	r3, r0
 80072c0:	461a      	mov	r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	7bdb      	ldrb	r3, [r3, #15]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 ff0c 	bl	80090ea <USBH_AllocPipe>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	7b59      	ldrb	r1, [r3, #13]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7b98      	ldrb	r0, [r3, #14]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	8b12      	ldrh	r2, [r2, #24]
 80072f2:	9202      	str	r2, [sp, #8]
 80072f4:	2202      	movs	r2, #2
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	4623      	mov	r3, r4
 80072fc:	4602      	mov	r2, r0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 fec4 	bl	800908c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	7b19      	ldrb	r1, [r3, #12]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	7bd8      	ldrb	r0, [r3, #15]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	8b52      	ldrh	r2, [r2, #26]
 800731c:	9202      	str	r2, [sp, #8]
 800731e:	2202      	movs	r2, #2
 8007320:	9201      	str	r2, [sp, #4]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4623      	mov	r3, r4
 8007326:	4602      	mov	r2, r0
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 feaf 	bl	800908c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	7b5b      	ldrb	r3, [r3, #13]
 800733a:	2200      	movs	r2, #0
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 f9ba 	bl	80096b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	7b1b      	ldrb	r3, [r3, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f002 f9b3 	bl	80096b8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	bd90      	pop	{r4, r7, pc}

0800735c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fea4 	bl	80090ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 fecf 	bl	800912c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	7b1b      	ldrb	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00e      	beq.n	80073ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7b1b      	ldrb	r3, [r3, #12]
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fe91 	bl	80090ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	7b1b      	ldrb	r3, [r3, #12]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 febc 	bl	800912c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	7b5b      	ldrb	r3, [r3, #13]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00e      	beq.n	80073e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	7b5b      	ldrb	r3, [r3, #13]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fe7e 	bl	80090ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	7b5b      	ldrb	r3, [r3, #13]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 fea9 	bl	800912c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f002 f9ed 	bl	80097d4 <free>
    phost->pActiveClass->pData = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007400:	2200      	movs	r2, #0
 8007402:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3340      	adds	r3, #64	@ 0x40
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8b1 	bl	800758e <GetLineCoding>
 800742c:	4603      	mov	r3, r0
 800742e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800743c:	2102      	movs	r1, #2
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007442:	7afb      	ldrb	r3, [r7, #11]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800746c:	2b04      	cmp	r3, #4
 800746e:	d877      	bhi.n	8007560 <USBH_CDC_Process+0x114>
 8007470:	a201      	add	r2, pc, #4	@ (adr r2, 8007478 <USBH_CDC_Process+0x2c>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	0800748d 	.word	0x0800748d
 800747c:	08007493 	.word	0x08007493
 8007480:	080074c3 	.word	0x080074c3
 8007484:	08007537 	.word	0x08007537
 8007488:	08007545 	.word	0x08007545
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
      break;
 8007490:	e06d      	b.n	800756e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f897 	bl	80075cc <SetLineCoding>
 800749e:	4603      	mov	r3, r0
 80074a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074b0:	e058      	b.n	8007564 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d055      	beq.n	8007564 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2204      	movs	r2, #4
 80074bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80074c0:	e050      	b.n	8007564 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	3340      	adds	r3, #64	@ 0x40
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f860 	bl	800758e <GetLineCoding>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d126      	bne.n	8007526 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d13b      	bne.n	8007568 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d133      	bne.n	8007568 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800750c:	429a      	cmp	r2, r3
 800750e:	d12b      	bne.n	8007568 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007518:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800751a:	429a      	cmp	r2, r3
 800751c:	d124      	bne.n	8007568 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f958 	bl	80077d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007524:	e020      	b.n	8007568 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d01d      	beq.n	8007568 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2204      	movs	r2, #4
 8007530:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007534:	e018      	b.n	8007568 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f867 	bl	800760a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f8da 	bl	80076f6 <CDC_ProcessReception>
      break;
 8007542:	e014      	b.n	800756e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007544:	2100      	movs	r1, #0
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 f81a 	bl	8008580 <USBH_ClrFeature>
 800754c:	4603      	mov	r3, r0
 800754e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800755e:	e005      	b.n	800756c <USBH_CDC_Process+0x120>

    default:
      break;
 8007560:	bf00      	nop
 8007562:	e004      	b.n	800756e <USBH_CDC_Process+0x122>
      break;
 8007564:	bf00      	nop
 8007566:	e002      	b.n	800756e <USBH_CDC_Process+0x122>
      break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <USBH_CDC_Process+0x122>
      break;
 800756c:	bf00      	nop

  }

  return status;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	22a1      	movs	r2, #161	@ 0xa1
 800759c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2221      	movs	r2, #33	@ 0x21
 80075a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2207      	movs	r2, #7
 80075b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2207      	movs	r2, #7
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fb14 	bl	8008bea <USBH_CtlReq>
 80075c2:	4603      	mov	r3, r0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2221      	movs	r2, #33	@ 0x21
 80075da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2207      	movs	r2, #7
 80075f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2207      	movs	r2, #7
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 faf5 	bl	8008bea <USBH_CtlReq>
 8007600:	4603      	mov	r3, r0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b086      	sub	sp, #24
 800760e:	af02      	add	r7, sp, #8
 8007610:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800761c:	2300      	movs	r3, #0
 800761e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007626:	2b01      	cmp	r3, #1
 8007628:	d002      	beq.n	8007630 <CDC_ProcessTransmission+0x26>
 800762a:	2b02      	cmp	r3, #2
 800762c:	d023      	beq.n	8007676 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800762e:	e05e      	b.n	80076ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	8b12      	ldrh	r2, [r2, #24]
 8007638:	4293      	cmp	r3, r2
 800763a:	d90b      	bls.n	8007654 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	69d9      	ldr	r1, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8b1a      	ldrh	r2, [r3, #24]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	7b5b      	ldrb	r3, [r3, #13]
 8007648:	2001      	movs	r0, #1
 800764a:	9000      	str	r0, [sp, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fcda 	bl	8009006 <USBH_BulkSendData>
 8007652:	e00b      	b.n	800766c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	7b5b      	ldrb	r3, [r3, #13]
 8007662:	2001      	movs	r0, #1
 8007664:	9000      	str	r0, [sp, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fccd 	bl	8009006 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007674:	e03b      	b.n	80076ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7b5b      	ldrb	r3, [r3, #13]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fff1 	bl	8009664 <USBH_LL_GetURBState>
 8007682:	4603      	mov	r3, r0
 8007684:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d128      	bne.n	80076de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	8b12      	ldrh	r2, [r2, #24]
 8007694:	4293      	cmp	r3, r2
 8007696:	d90e      	bls.n	80076b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	8b12      	ldrh	r2, [r2, #24]
 80076a0:	1a9a      	subs	r2, r3, r2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	8b12      	ldrh	r2, [r2, #24]
 80076ae:	441a      	add	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	61da      	str	r2, [r3, #28]
 80076b4:	e002      	b.n	80076bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80076cc:	e00e      	b.n	80076ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f868 	bl	80077ac <USBH_CDC_TransmitCallback>
      break;
 80076dc:	e006      	b.n	80076ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d103      	bne.n	80076ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80076ec:	bf00      	nop
  }
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b086      	sub	sp, #24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007708:	2300      	movs	r3, #0
 800770a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007712:	2b03      	cmp	r3, #3
 8007714:	d002      	beq.n	800771c <CDC_ProcessReception+0x26>
 8007716:	2b04      	cmp	r3, #4
 8007718:	d00e      	beq.n	8007738 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800771a:	e043      	b.n	80077a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	6a19      	ldr	r1, [r3, #32]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	8b5a      	ldrh	r2, [r3, #26]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fc91 	bl	8009050 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2204      	movs	r2, #4
 8007732:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007736:	e035      	b.n	80077a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	7b1b      	ldrb	r3, [r3, #12]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 ff90 	bl	8009664 <USBH_LL_GetURBState>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d129      	bne.n	80077a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	7b1b      	ldrb	r3, [r3, #12]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fef3 	bl	8009540 <USBH_LL_GetLastXferSize>
 800775a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	429a      	cmp	r2, r3
 8007764:	d016      	beq.n	8007794 <CDC_ProcessReception+0x9e>
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	8b5b      	ldrh	r3, [r3, #26]
 800776a:	461a      	mov	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4293      	cmp	r3, r2
 8007770:	d110      	bne.n	8007794 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1ad2      	subs	r2, r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	6a1a      	ldr	r2, [r3, #32]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	441a      	add	r2, r3
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2203      	movs	r2, #3
 800778e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007792:	e006      	b.n	80077a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f80f 	bl	80077c0 <USBH_CDC_ReceiveCallback>
      break;
 80077a2:	bf00      	nop
  }
}
 80077a4:	bf00      	nop
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80077fc:	2302      	movs	r3, #2
 80077fe:	e029      	b.n	8007854 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	79fa      	ldrb	r2, [r7, #7]
 8007804:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f81f 	bl	800785c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f001 fdc3 	bl	80093d8 <USBH_LL_Init>

  return USBH_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e009      	b.n	8007882 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	33e0      	adds	r3, #224	@ 0xe0
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b0f      	cmp	r3, #15
 8007886:	d9f2      	bls.n	800786e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	e009      	b.n	80078a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a8:	d3f1      	bcc.n	800788e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2240      	movs	r2, #64	@ 0x40
 80078ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	331c      	adds	r3, #28
 80078fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f002 f81d 	bl	8009940 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800790c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f002 f814 	bl	8009940 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800791e:	2212      	movs	r2, #18
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f002 f80c 	bl	8009940 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800792e:	223e      	movs	r2, #62	@ 0x3e
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f002 f804 	bl	8009940 <memset>

  return USBH_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10e      	bne.n	800797e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007966:	1c59      	adds	r1, r3, #1
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	33de      	adds	r3, #222	@ 0xde
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
 800797c:	e004      	b.n	8007988 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800797e:	2302      	movs	r3, #2
 8007980:	73fb      	strb	r3, [r7, #15]
 8007982:	e001      	b.n	8007988 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007984:	2302      	movs	r3, #2
 8007986:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d204      	bcs.n	80079bc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80079ba:	e001      	b.n	80079c0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80079bc:	2302      	movs	r3, #2
 80079be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b087      	sub	sp, #28
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	461a      	mov	r2, r3
 80079dc:	4603      	mov	r3, r0
 80079de:	70fb      	strb	r3, [r7, #3]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70bb      	strb	r3, [r7, #2]
 80079e4:	4613      	mov	r3, r2
 80079e6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80079f6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079f8:	e025      	b.n	8007a46 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	221a      	movs	r2, #26
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	3308      	adds	r3, #8
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	3302      	adds	r3, #2
 8007a0a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	795b      	ldrb	r3, [r3, #5]
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d002      	beq.n	8007a1c <USBH_FindInterface+0x4e>
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	2bff      	cmp	r3, #255	@ 0xff
 8007a1a:	d111      	bne.n	8007a40 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a20:	78ba      	ldrb	r2, [r7, #2]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d002      	beq.n	8007a2c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a26:	78bb      	ldrb	r3, [r7, #2]
 8007a28:	2bff      	cmp	r3, #255	@ 0xff
 8007a2a:	d109      	bne.n	8007a40 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a30:	787a      	ldrb	r2, [r7, #1]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d002      	beq.n	8007a3c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a36:	787b      	ldrb	r3, [r7, #1]
 8007a38:	2bff      	cmp	r3, #255	@ 0xff
 8007a3a:	d101      	bne.n	8007a40 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	e006      	b.n	8007a4e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	3301      	adds	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d9d6      	bls.n	80079fa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a4c:	23ff      	movs	r3, #255	@ 0xff
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fcf4 	bl	8009450 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a68:	2101      	movs	r1, #1
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 fe0d 	bl	800968a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af04      	add	r7, sp, #16
 8007a82:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a84:	2302      	movs	r3, #2
 8007a86:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d102      	bne.n	8007a9e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	f200 81bb 	bhi.w	8007e20 <USBH_Process+0x3a4>
 8007aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <USBH_Process+0x34>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007b13 	.word	0x08007b13
 8007ab8:	08007b7b 	.word	0x08007b7b
 8007abc:	08007dbb 	.word	0x08007dbb
 8007ac0:	08007e21 	.word	0x08007e21
 8007ac4:	08007c1b 	.word	0x08007c1b
 8007ac8:	08007d61 	.word	0x08007d61
 8007acc:	08007c51 	.word	0x08007c51
 8007ad0:	08007c71 	.word	0x08007c71
 8007ad4:	08007c8f 	.word	0x08007c8f
 8007ad8:	08007cd3 	.word	0x08007cd3
 8007adc:	08007da3 	.word	0x08007da3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 819b 	beq.w	8007e24 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007af4:	20c8      	movs	r0, #200	@ 0xc8
 8007af6:	f001 fe12 	bl	800971e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fd05 	bl	800950a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b10:	e188      	b.n	8007e24 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d107      	bne.n	8007b2c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b2a:	e18a      	b.n	8007e42 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007b32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b36:	d914      	bls.n	8007b62 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d903      	bls.n	8007b5a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	220d      	movs	r2, #13
 8007b56:	701a      	strb	r2, [r3, #0]
      break;
 8007b58:	e173      	b.n	8007e42 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]
      break;
 8007b60:	e16f      	b.n	8007e42 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007b68:	f103 020a 	add.w	r2, r3, #10
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007b72:	200a      	movs	r0, #10
 8007b74:	f001 fdd3 	bl	800971e <USBH_Delay>
      break;
 8007b78:	e163      	b.n	8007e42 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b90:	2064      	movs	r0, #100	@ 0x64
 8007b92:	f001 fdc4 	bl	800971e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 fc90 	bl	80094bc <USBH_LL_GetSpeed>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2205      	movs	r2, #5
 8007baa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fa9b 	bl	80090ea <USBH_AllocPipe>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007bbc:	2180      	movs	r1, #128	@ 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fa93 	bl	80090ea <USBH_AllocPipe>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7919      	ldrb	r1, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007be0:	9202      	str	r2, [sp, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	9201      	str	r2, [sp, #4]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4603      	mov	r3, r0
 8007bea:	2280      	movs	r2, #128	@ 0x80
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 fa4d 	bl	800908c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7959      	ldrb	r1, [r3, #5]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c06:	9202      	str	r2, [sp, #8]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	9201      	str	r2, [sp, #4]
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2200      	movs	r2, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fa3a 	bl	800908c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c18:	e113      	b.n	8007e42 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f916 	bl	8007e4c <USBH_HandleEnum>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 80fd 	bne.w	8007e28 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d103      	bne.n	8007c48 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2208      	movs	r2, #8
 8007c44:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c46:	e0ef      	b.n	8007e28 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2207      	movs	r2, #7
 8007c4c:	701a      	strb	r2, [r3, #0]
      break;
 8007c4e:	e0eb      	b.n	8007e28 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80e8 	beq.w	8007e2c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c62:	2101      	movs	r1, #1
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c6e:	e0dd      	b.n	8007e2c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fc3a 	bl	80084f2 <USBH_SetCfg>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 80d5 	bne.w	8007e30 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2209      	movs	r2, #9
 8007c8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c8c:	e0d0      	b.n	8007e30 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d016      	beq.n	8007cca <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc4a 	bl	8008538 <USBH_SetFeature>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	220a      	movs	r2, #10
 8007cb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cb6:	e0bd      	b.n	8007e34 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	f040 80b9 	bne.w	8007e34 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	701a      	strb	r2, [r3, #0]
      break;
 8007cc8:	e0b4      	b.n	8007e34 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	220a      	movs	r2, #10
 8007cce:	701a      	strb	r2, [r3, #0]
      break;
 8007cd0:	e0b0      	b.n	8007e34 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80ad 	beq.w	8007e38 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
 8007cea:	e016      	b.n	8007d1a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	32de      	adds	r2, #222	@ 0xde
 8007cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf6:	791a      	ldrb	r2, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d108      	bne.n	8007d14 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d02:	7bfa      	ldrb	r2, [r7, #15]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32de      	adds	r2, #222	@ 0xde
 8007d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007d12:	e005      	b.n	8007d20 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	3301      	adds	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0e5      	beq.n	8007cec <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d016      	beq.n	8007d58 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2206      	movs	r2, #6
 8007d40:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d48:	2103      	movs	r1, #3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d4e:	e073      	b.n	8007e38 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	220d      	movs	r2, #13
 8007d54:	701a      	strb	r2, [r3, #0]
      break;
 8007d56:	e06f      	b.n	8007e38 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	220d      	movs	r2, #13
 8007d5c:	701a      	strb	r2, [r3, #0]
      break;
 8007d5e:	e06b      	b.n	8007e38 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d017      	beq.n	8007d9a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	220b      	movs	r2, #11
 8007d86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d88:	e058      	b.n	8007e3c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d154      	bne.n	8007e3c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	220d      	movs	r2, #13
 8007d96:	701a      	strb	r2, [r3, #0]
      break;
 8007d98:	e050      	b.n	8007e3c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	220d      	movs	r2, #13
 8007d9e:	701a      	strb	r2, [r3, #0]
      break;
 8007da0:	e04c      	b.n	8007e3c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d049      	beq.n	8007e40 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
      }
      break;
 8007db8:	e042      	b.n	8007e40 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff fd4a 	bl	800785c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007df6:	2105      	movs	r1, #5
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d107      	bne.n	8007e18 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fe22 	bl	8007a5a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e16:	e014      	b.n	8007e42 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 fb19 	bl	8009450 <USBH_LL_Start>
      break;
 8007e1e:	e010      	b.n	8007e42 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e20:	bf00      	nop
 8007e22:	e00e      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e24:	bf00      	nop
 8007e26:	e00c      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e00a      	b.n	8007e42 <USBH_Process+0x3c6>
    break;
 8007e2c:	bf00      	nop
 8007e2e:	e008      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e30:	bf00      	nop
 8007e32:	e006      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e34:	bf00      	nop
 8007e36:	e004      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e38:	bf00      	nop
 8007e3a:	e002      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e3c:	bf00      	nop
 8007e3e:	e000      	b.n	8007e42 <USBH_Process+0x3c6>
      break;
 8007e40:	bf00      	nop
  }
  return USBH_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af04      	add	r7, sp, #16
 8007e52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e54:	2301      	movs	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b07      	cmp	r3, #7
 8007e62:	f200 81bd 	bhi.w	80081e0 <USBH_HandleEnum+0x394>
 8007e66:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <USBH_HandleEnum+0x20>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007e8d 	.word	0x08007e8d
 8007e70:	08007f47 	.word	0x08007f47
 8007e74:	08007fb1 	.word	0x08007fb1
 8007e78:	0800803b 	.word	0x0800803b
 8007e7c:	080080a5 	.word	0x080080a5
 8007e80:	08008115 	.word	0x08008115
 8007e84:	0800815b 	.word	0x0800815b
 8007e88:	080081a1 	.word	0x080081a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e8c:	2108      	movs	r1, #8
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa4c 	bl	800832c <USBH_Get_DevDesc>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d12e      	bne.n	8007efc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7919      	ldrb	r1, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ec2:	9202      	str	r2, [sp, #8]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	9201      	str	r2, [sp, #4]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2280      	movs	r2, #128	@ 0x80
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 f8dc 	bl	800908c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7959      	ldrb	r1, [r3, #5]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ee8:	9202      	str	r2, [sp, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	9201      	str	r2, [sp, #4]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f8c9 	bl	800908c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007efa:	e173      	b.n	80081e4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	f040 8170 	bne.w	80081e4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d903      	bls.n	8007f26 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220d      	movs	r2, #13
 8007f22:	701a      	strb	r2, [r3, #0]
      break;
 8007f24:	e15e      	b.n	80081e4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	795b      	ldrb	r3, [r3, #5]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 f8fd 	bl	800912c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f8f7 	bl	800912c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
      break;
 8007f44:	e14e      	b.n	80081e4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f46:	2112      	movs	r1, #18
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f9ef 	bl	800832c <USBH_Get_DevDesc>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d103      	bne.n	8007f60 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f5e:	e143      	b.n	80081e8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	f040 8140 	bne.w	80081e8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f6e:	3301      	adds	r3, #1
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d903      	bls.n	8007f8a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220d      	movs	r2, #13
 8007f86:	701a      	strb	r2, [r3, #0]
      break;
 8007f88:	e12e      	b.n	80081e8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 f8cb 	bl	800912c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	791b      	ldrb	r3, [r3, #4]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f8c5 	bl	800912c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
      break;
 8007fae:	e11b      	b.n	80081e8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa79 	bl	80084aa <USBH_SetAddress>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d130      	bne.n	8008024 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007fc2:	2002      	movs	r0, #2
 8007fc4:	f001 fbab 	bl	800971e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	7919      	ldrb	r1, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fea:	9202      	str	r2, [sp, #8]
 8007fec:	2200      	movs	r2, #0
 8007fee:	9201      	str	r2, [sp, #4]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2280      	movs	r2, #128	@ 0x80
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f848 	bl	800908c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7959      	ldrb	r1, [r3, #5]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008010:	9202      	str	r2, [sp, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	9201      	str	r2, [sp, #4]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	4603      	mov	r3, r0
 800801a:	2200      	movs	r2, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 f835 	bl	800908c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008022:	e0e3      	b.n	80081ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b03      	cmp	r3, #3
 8008028:	f040 80e0 	bne.w	80081ec <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	220d      	movs	r2, #13
 8008030:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	705a      	strb	r2, [r3, #1]
      break;
 8008038:	e0d8      	b.n	80081ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800803a:	2109      	movs	r1, #9
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f9a1 	bl	8008384 <USBH_Get_CfgDesc>
 8008042:	4603      	mov	r3, r0
 8008044:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008052:	e0cd      	b.n	80081f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	2b03      	cmp	r3, #3
 8008058:	f040 80ca 	bne.w	80081f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008062:	3301      	adds	r3, #1
 8008064:	b2da      	uxtb	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008072:	2b03      	cmp	r3, #3
 8008074:	d903      	bls.n	800807e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	220d      	movs	r2, #13
 800807a:	701a      	strb	r2, [r3, #0]
      break;
 800807c:	e0b8      	b.n	80081f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	795b      	ldrb	r3, [r3, #5]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f851 	bl	800912c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f84b 	bl	800912c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
      break;
 80080a2:	e0a5      	b.n	80081f0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f969 	bl	8008384 <USBH_Get_CfgDesc>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2205      	movs	r2, #5
 80080c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080c2:	e097      	b.n	80081f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	f040 8094 	bne.w	80081f4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080d2:	3301      	adds	r3, #1
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d903      	bls.n	80080ee <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	220d      	movs	r2, #13
 80080ea:	701a      	strb	r2, [r3, #0]
      break;
 80080ec:	e082      	b.n	80081f4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	795b      	ldrb	r3, [r3, #5]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 f819 	bl	800912c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	791b      	ldrb	r3, [r3, #4]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 f813 	bl	800912c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
      break;
 8008112:	e06f      	b.n	80081f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800811a:	2b00      	cmp	r3, #0
 800811c:	d019      	beq.n	8008152 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800812a:	23ff      	movs	r3, #255	@ 0xff
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f953 	bl	80083d8 <USBH_Get_StringDesc>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2206      	movs	r2, #6
 8008140:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008142:	e059      	b.n	80081f8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b03      	cmp	r3, #3
 8008148:	d156      	bne.n	80081f8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2206      	movs	r2, #6
 800814e:	705a      	strb	r2, [r3, #1]
      break;
 8008150:	e052      	b.n	80081f8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2206      	movs	r2, #6
 8008156:	705a      	strb	r2, [r3, #1]
      break;
 8008158:	e04e      	b.n	80081f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008160:	2b00      	cmp	r3, #0
 8008162:	d019      	beq.n	8008198 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008170:	23ff      	movs	r3, #255	@ 0xff
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f930 	bl	80083d8 <USBH_Get_StringDesc>
 8008178:	4603      	mov	r3, r0
 800817a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d103      	bne.n	800818a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2207      	movs	r2, #7
 8008186:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008188:	e038      	b.n	80081fc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d135      	bne.n	80081fc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2207      	movs	r2, #7
 8008194:	705a      	strb	r2, [r3, #1]
      break;
 8008196:	e031      	b.n	80081fc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2207      	movs	r2, #7
 800819c:	705a      	strb	r2, [r3, #1]
      break;
 800819e:	e02d      	b.n	80081fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d017      	beq.n	80081da <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081b6:	23ff      	movs	r3, #255	@ 0xff
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f90d 	bl	80083d8 <USBH_Get_StringDesc>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80081cc:	e018      	b.n	8008200 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d115      	bne.n	8008200 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
      break;
 80081d8:	e012      	b.n	8008200 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
      break;
 80081de:	e00f      	b.n	8008200 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80081e0:	bf00      	nop
 80081e2:	e00e      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081e4:	bf00      	nop
 80081e6:	e00c      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081e8:	bf00      	nop
 80081ea:	e00a      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081ec:	bf00      	nop
 80081ee:	e008      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081f0:	bf00      	nop
 80081f2:	e006      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081f4:	bf00      	nop
 80081f6:	e004      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <USBH_HandleEnum+0x3b6>
      break;
 8008200:	bf00      	nop
  }
  return Status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f804 	bl	800824e <USBH_HandleSof>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b0b      	cmp	r3, #11
 800825e:	d10a      	bne.n	8008276 <USBH_HandleSof+0x28>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
  }
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800828e:	bf00      	nop
}
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80082aa:	bf00      	nop
}
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 f8be 	bl	8009486 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	791b      	ldrb	r3, [r3, #4]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 ff0b 	bl	800912c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	795b      	ldrb	r3, [r3, #5]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 ff05 	bl	800912c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af02      	add	r7, sp, #8
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008338:	887b      	ldrh	r3, [r7, #2]
 800833a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833e:	d901      	bls.n	8008344 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008340:	2303      	movs	r3, #3
 8008342:	e01b      	b.n	800837c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800834a:	887b      	ldrh	r3, [r7, #2]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4613      	mov	r3, r2
 8008350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f872 	bl	8008440 <USBH_GetDescriptor>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d109      	bne.n	800837a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800836c:	887a      	ldrh	r2, [r7, #2]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f929 	bl	80085c8 <USBH_ParseDevDesc>
 8008376:	4603      	mov	r3, r0
 8008378:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af02      	add	r7, sp, #8
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	331c      	adds	r3, #28
 8008394:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008396:	887b      	ldrh	r3, [r7, #2]
 8008398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800839c:	d901      	bls.n	80083a2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800839e:	2303      	movs	r3, #3
 80083a0:	e016      	b.n	80083d0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80083a2:	887b      	ldrh	r3, [r7, #2]
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083ac:	2100      	movs	r1, #0
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f846 	bl	8008440 <USBH_GetDescriptor>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d107      	bne.n	80083ce <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	461a      	mov	r2, r3
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9af 	bl	8008728 <USBH_ParseCfgDesc>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	461a      	mov	r2, r3
 80083e4:	460b      	mov	r3, r1
 80083e6:	72fb      	strb	r3, [r7, #11]
 80083e8:	4613      	mov	r3, r2
 80083ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80083ec:	893b      	ldrh	r3, [r7, #8]
 80083ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f2:	d802      	bhi.n	80083fa <USBH_Get_StringDesc+0x22>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e01c      	b.n	8008438 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008406:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800840e:	893b      	ldrh	r3, [r7, #8]
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	460b      	mov	r3, r1
 8008414:	2100      	movs	r1, #0
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 f812 	bl	8008440 <USBH_GetDescriptor>
 800841c:	4603      	mov	r3, r0
 800841e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800842c:	893a      	ldrh	r2, [r7, #8]
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fb8d 	bl	8008b50 <USBH_ParseStringDesc>
  }

  return status;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	72fb      	strb	r3, [r7, #11]
 800844e:	4613      	mov	r3, r2
 8008450:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	789b      	ldrb	r3, [r3, #2]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d11c      	bne.n	8008494 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800845a:	7afb      	ldrb	r3, [r7, #11]
 800845c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008460:	b2da      	uxtb	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2206      	movs	r2, #6
 800846a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	893a      	ldrh	r2, [r7, #8]
 8008470:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008472:	893b      	ldrh	r3, [r7, #8]
 8008474:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008478:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800847c:	d104      	bne.n	8008488 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f240 4209 	movw	r2, #1033	@ 0x409
 8008484:	829a      	strh	r2, [r3, #20]
 8008486:	e002      	b.n	800848e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8b3a      	ldrh	r2, [r7, #24]
 8008492:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008494:	8b3b      	ldrh	r3, [r7, #24]
 8008496:	461a      	mov	r2, r3
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fba5 	bl	8008bea <USBH_CtlReq>
 80084a0:	4603      	mov	r3, r0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	789b      	ldrb	r3, [r3, #2]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d10f      	bne.n	80084de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2205      	movs	r2, #5
 80084c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb81 	bl	8008bea <USBH_CtlReq>
 80084e8:	4603      	mov	r3, r0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	789b      	ldrb	r3, [r3, #2]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10e      	bne.n	8008524 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2209      	movs	r2, #9
 8008510:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	887a      	ldrh	r2, [r7, #2]
 8008516:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008524:	2200      	movs	r2, #0
 8008526:	2100      	movs	r1, #0
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb5e 	bl	8008bea <USBH_CtlReq>
 800852e:	4603      	mov	r3, r0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	789b      	ldrb	r3, [r3, #2]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d10f      	bne.n	800856c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2203      	movs	r2, #3
 8008556:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	b29a      	uxth	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800856c:	2200      	movs	r2, #0
 800856e:	2100      	movs	r1, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fb3a 	bl	8008bea <USBH_CtlReq>
 8008576:	4603      	mov	r3, r0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	789b      	ldrb	r3, [r3, #2]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d10f      	bne.n	80085b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085b4:	2200      	movs	r2, #0
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb16 	bl	8008bea <USBH_CtlReq>
 80085be:	4603      	mov	r3, r0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80085dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80085e8:	2302      	movs	r3, #2
 80085ea:	e094      	b.n	8008716 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	781a      	ldrb	r2, [r3, #0]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	785a      	ldrb	r2, [r3, #1]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	3302      	adds	r3, #2
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	3303      	adds	r3, #3
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	b29b      	uxth	r3, r3
 800860e:	4313      	orrs	r3, r2
 8008610:	b29a      	uxth	r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	791a      	ldrb	r2, [r3, #4]
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	795a      	ldrb	r2, [r3, #5]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	799a      	ldrb	r2, [r3, #6]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	79da      	ldrb	r2, [r3, #7]
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008646:	2b01      	cmp	r3, #1
 8008648:	d11b      	bne.n	8008682 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	79db      	ldrb	r3, [r3, #7]
 800864e:	2b20      	cmp	r3, #32
 8008650:	dc0f      	bgt.n	8008672 <USBH_ParseDevDesc+0xaa>
 8008652:	2b08      	cmp	r3, #8
 8008654:	db0f      	blt.n	8008676 <USBH_ParseDevDesc+0xae>
 8008656:	3b08      	subs	r3, #8
 8008658:	4a32      	ldr	r2, [pc, #200]	@ (8008724 <USBH_ParseDevDesc+0x15c>)
 800865a:	fa22 f303 	lsr.w	r3, r2, r3
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	bf14      	ite	ne
 8008666:	2301      	movne	r3, #1
 8008668:	2300      	moveq	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d106      	bne.n	800867e <USBH_ParseDevDesc+0xb6>
 8008670:	e001      	b.n	8008676 <USBH_ParseDevDesc+0xae>
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	d003      	beq.n	800867e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2208      	movs	r2, #8
 800867a:	71da      	strb	r2, [r3, #7]
        break;
 800867c:	e000      	b.n	8008680 <USBH_ParseDevDesc+0xb8>
        break;
 800867e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008680:	e00e      	b.n	80086a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008688:	2b02      	cmp	r3, #2
 800868a:	d107      	bne.n	800869c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	79db      	ldrb	r3, [r3, #7]
 8008690:	2b08      	cmp	r3, #8
 8008692:	d005      	beq.n	80086a0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2208      	movs	r2, #8
 8008698:	71da      	strb	r2, [r3, #7]
 800869a:	e001      	b.n	80086a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800869c:	2303      	movs	r3, #3
 800869e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80086a0:	88fb      	ldrh	r3, [r7, #6]
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	d936      	bls.n	8008714 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	3308      	adds	r3, #8
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	3309      	adds	r3, #9
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	4313      	orrs	r3, r2
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	330a      	adds	r3, #10
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	330b      	adds	r3, #11
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	4313      	orrs	r3, r2
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	330c      	adds	r3, #12
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	330d      	adds	r3, #13
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4313      	orrs	r3, r2
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	7b9a      	ldrb	r2, [r3, #14]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	7bda      	ldrb	r2, [r3, #15]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	7c1a      	ldrb	r2, [r3, #16]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	7c5a      	ldrb	r2, [r3, #17]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	01000101 	.word	0x01000101

08008728 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08c      	sub	sp, #48	@ 0x30
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4613      	mov	r3, r2
 8008734:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800873c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	e0da      	b.n	8008910 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b09      	cmp	r3, #9
 8008764:	d002      	beq.n	800876c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008768:	2209      	movs	r2, #9
 800876a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	785a      	ldrb	r2, [r3, #1]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3302      	adds	r3, #2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	3303      	adds	r3, #3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	b29b      	uxth	r3, r3
 800878e:	4313      	orrs	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008796:	bf28      	it	cs
 8008798:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800879c:	b29a      	uxth	r2, r3
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	791a      	ldrb	r2, [r3, #4]
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	795a      	ldrb	r2, [r3, #5]
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	799a      	ldrb	r2, [r3, #6]
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	79da      	ldrb	r2, [r3, #7]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	7a1a      	ldrb	r2, [r3, #8]
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	f240 809d 	bls.w	800890c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80087d2:	2309      	movs	r3, #9
 80087d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80087da:	e081      	b.n	80088e0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087dc:	f107 0316 	add.w	r3, r7, #22
 80087e0:	4619      	mov	r1, r3
 80087e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e4:	f000 f9e7 	bl	8008bb6 <USBH_GetNextDesc>
 80087e8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d176      	bne.n	80088e0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b09      	cmp	r3, #9
 80087f8:	d002      	beq.n	8008800 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	2209      	movs	r2, #9
 80087fe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008804:	221a      	movs	r2, #26
 8008806:	fb02 f303 	mul.w	r3, r2, r3
 800880a:	3308      	adds	r3, #8
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	4413      	add	r3, r2
 8008810:	3302      	adds	r3, #2
 8008812:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008816:	69f8      	ldr	r0, [r7, #28]
 8008818:	f000 f87e 	bl	8008918 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008826:	e043      	b.n	80088b0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008828:	f107 0316 	add.w	r3, r7, #22
 800882c:	4619      	mov	r1, r3
 800882e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008830:	f000 f9c1 	bl	8008bb6 <USBH_GetNextDesc>
 8008834:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b05      	cmp	r3, #5
 800883c:	d138      	bne.n	80088b0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	795b      	ldrb	r3, [r3, #5]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d113      	bne.n	800886e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800884a:	2b02      	cmp	r3, #2
 800884c:	d003      	beq.n	8008856 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	799b      	ldrb	r3, [r3, #6]
 8008852:	2b03      	cmp	r3, #3
 8008854:	d10b      	bne.n	800886e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	79db      	ldrb	r3, [r3, #7]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <USBH_ParseCfgDesc+0x14e>
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b09      	cmp	r3, #9
 8008864:	d007      	beq.n	8008876 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	2209      	movs	r2, #9
 800886a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800886c:	e003      	b.n	8008876 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008870:	2207      	movs	r2, #7
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e000      	b.n	8008878 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008876:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800887c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008880:	3201      	adds	r2, #1
 8008882:	00d2      	lsls	r2, r2, #3
 8008884:	211a      	movs	r1, #26
 8008886:	fb01 f303 	mul.w	r3, r1, r3
 800888a:	4413      	add	r3, r2
 800888c:	3308      	adds	r3, #8
 800888e:	6a3a      	ldr	r2, [r7, #32]
 8008890:	4413      	add	r3, r2
 8008892:	3304      	adds	r3, #4
 8008894:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008898:	69b9      	ldr	r1, [r7, #24]
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 f870 	bl	8008980 <USBH_ParseEPDesc>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80088a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80088aa:	3301      	adds	r3, #1
 80088ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	791b      	ldrb	r3, [r3, #4]
 80088b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d204      	bcs.n	80088c6 <USBH_ParseCfgDesc+0x19e>
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	885a      	ldrh	r2, [r3, #2]
 80088c0:	8afb      	ldrh	r3, [r7, #22]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d8b0      	bhi.n	8008828 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	791b      	ldrb	r3, [r3, #4]
 80088ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d201      	bcs.n	80088d6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e01c      	b.n	8008910 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80088d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088da:	3301      	adds	r3, #1
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d805      	bhi.n	80088f4 <USBH_ParseCfgDesc+0x1cc>
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	885a      	ldrh	r2, [r3, #2]
 80088ec:	8afb      	ldrh	r3, [r7, #22]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	f63f af74 	bhi.w	80087dc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	791b      	ldrb	r3, [r3, #4]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	bf28      	it	cs
 80088fc:	2302      	movcs	r3, #2
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008904:	429a      	cmp	r2, r3
 8008906:	d201      	bcs.n	800890c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008908:	2303      	movs	r3, #3
 800890a:	e001      	b.n	8008910 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800890c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008910:	4618      	mov	r0, r3
 8008912:	3730      	adds	r7, #48	@ 0x30
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	785a      	ldrb	r2, [r3, #1]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	789a      	ldrb	r2, [r3, #2]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	78da      	ldrb	r2, [r3, #3]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	3304      	adds	r3, #4
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b02      	cmp	r3, #2
 800894a:	bf28      	it	cs
 800894c:	2302      	movcs	r3, #2
 800894e:	b2da      	uxtb	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	795a      	ldrb	r2, [r3, #5]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	799a      	ldrb	r2, [r3, #6]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	79da      	ldrb	r2, [r3, #7]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	7a1a      	ldrb	r2, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	721a      	strb	r2, [r3, #8]
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	785a      	ldrb	r2, [r3, #1]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	789a      	ldrb	r2, [r3, #2]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	78da      	ldrb	r2, [r3, #3]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3304      	adds	r3, #4
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3305      	adds	r3, #5
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	799a      	ldrb	r2, [r3, #6]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80089de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089e2:	d804      	bhi.n	80089ee <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ec:	d901      	bls.n	80089f2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80089ee:	2303      	movs	r3, #3
 80089f0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d136      	bne.n	8008a6a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	78db      	ldrb	r3, [r3, #3]
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d108      	bne.n	8008a1a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	889b      	ldrh	r3, [r3, #4]
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a10:	f240 8097 	bls.w	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a14:	2303      	movs	r3, #3
 8008a16:	75fb      	strb	r3, [r7, #23]
 8008a18:	e093      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	889b      	ldrh	r3, [r3, #4]
 8008a2a:	2b40      	cmp	r3, #64	@ 0x40
 8008a2c:	f240 8089 	bls.w	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a30:	2303      	movs	r3, #3
 8008a32:	75fb      	strb	r3, [r7, #23]
 8008a34:	e085      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	78db      	ldrb	r3, [r3, #3]
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d005      	beq.n	8008a4e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	78db      	ldrb	r3, [r3, #3]
 8008a46:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d10a      	bne.n	8008a64 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	799b      	ldrb	r3, [r3, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <USBH_ParseEPDesc+0xde>
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	799b      	ldrb	r3, [r3, #6]
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d970      	bls.n	8008b40 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a62:	e06d      	b.n	8008b40 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008a64:	2303      	movs	r3, #3
 8008a66:	75fb      	strb	r3, [r7, #23]
 8008a68:	e06b      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d13c      	bne.n	8008aee <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	78db      	ldrb	r3, [r3, #3]
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d005      	beq.n	8008a8c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	78db      	ldrb	r3, [r3, #3]
 8008a84:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d106      	bne.n	8008a9a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	889b      	ldrh	r3, [r3, #4]
 8008a90:	2b40      	cmp	r3, #64	@ 0x40
 8008a92:	d956      	bls.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a94:	2303      	movs	r3, #3
 8008a96:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a98:	e053      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	78db      	ldrb	r3, [r3, #3]
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10e      	bne.n	8008ac4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	799b      	ldrb	r3, [r3, #6]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d803      	bhi.n	8008abe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008aba:	2b40      	cmp	r3, #64	@ 0x40
 8008abc:	d941      	bls.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	75fb      	strb	r3, [r7, #23]
 8008ac2:	e03e      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	78db      	ldrb	r3, [r3, #3]
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d10b      	bne.n	8008ae8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	799b      	ldrb	r3, [r3, #6]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <USBH_ParseEPDesc+0x162>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	889b      	ldrh	r3, [r3, #4]
 8008adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ae0:	d32f      	bcc.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	75fb      	strb	r3, [r7, #23]
 8008ae6:	e02c      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	75fb      	strb	r3, [r7, #23]
 8008aec:	e029      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d120      	bne.n	8008b3a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	78db      	ldrb	r3, [r3, #3]
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d106      	bne.n	8008b12 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	889b      	ldrh	r3, [r3, #4]
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d01a      	beq.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	75fb      	strb	r3, [r7, #23]
 8008b10:	e017      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	78db      	ldrb	r3, [r3, #3]
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d10a      	bne.n	8008b34 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	799b      	ldrb	r3, [r3, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <USBH_ParseEPDesc+0x1ae>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	889b      	ldrh	r3, [r3, #4]
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d909      	bls.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	75fb      	strb	r3, [r7, #23]
 8008b32:	e006      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b34:	2303      	movs	r3, #3
 8008b36:	75fb      	strb	r3, [r7, #23]
 8008b38:	e003      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	75fb      	strb	r3, [r7, #23]
 8008b3e:	e000      	b.n	8008b42 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b40:	bf00      	nop
  }

  return status;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d120      	bne.n	8008baa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	1e9a      	subs	r2, r3, #2
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bf28      	it	cs
 8008b74:	4613      	movcs	r3, r2
 8008b76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	82fb      	strh	r3, [r7, #22]
 8008b82:	e00b      	b.n	8008b9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b84:	8afb      	ldrh	r3, [r7, #22]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b96:	8afb      	ldrh	r3, [r7, #22]
 8008b98:	3302      	adds	r3, #2
 8008b9a:	82fb      	strh	r3, [r7, #22]
 8008b9c:	8afa      	ldrh	r2, [r7, #22]
 8008b9e:	8abb      	ldrh	r3, [r7, #20]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d3ef      	bcc.n	8008b84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]
  }
}
 8008baa:	bf00      	nop
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	7812      	ldrb	r2, [r2, #0]
 8008bc8:	4413      	add	r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	789b      	ldrb	r3, [r3, #2]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d002      	beq.n	8008c0a <USBH_CtlReq+0x20>
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d00f      	beq.n	8008c28 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c08:	e027      	b.n	8008c5a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	88fa      	ldrh	r2, [r7, #6]
 8008c14:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
      break;
 8008c26:	e018      	b.n	8008c5a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 f81b 	bl	8008c64 <USBH_HandleControl>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <USBH_CtlReq+0x54>
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d106      	bne.n	8008c4c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	761a      	strb	r2, [r3, #24]
      break;
 8008c4a:	e005      	b.n	8008c58 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d102      	bne.n	8008c58 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	709a      	strb	r2, [r3, #2]
      break;
 8008c58:	bf00      	nop
  }
  return status;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7e1b      	ldrb	r3, [r3, #24]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	2b0a      	cmp	r3, #10
 8008c7c:	f200 8156 	bhi.w	8008f2c <USBH_HandleControl+0x2c8>
 8008c80:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <USBH_HandleControl+0x24>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008cb5 	.word	0x08008cb5
 8008c8c:	08008ccf 	.word	0x08008ccf
 8008c90:	08008d39 	.word	0x08008d39
 8008c94:	08008d5f 	.word	0x08008d5f
 8008c98:	08008d97 	.word	0x08008d97
 8008c9c:	08008dc1 	.word	0x08008dc1
 8008ca0:	08008e13 	.word	0x08008e13
 8008ca4:	08008e35 	.word	0x08008e35
 8008ca8:	08008e71 	.word	0x08008e71
 8008cac:	08008e97 	.word	0x08008e97
 8008cb0:	08008ed5 	.word	0x08008ed5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f103 0110 	add.w	r1, r3, #16
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	795b      	ldrb	r3, [r3, #5]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f943 	bl	8008f4c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	761a      	strb	r2, [r3, #24]
      break;
 8008ccc:	e139      	b.n	8008f42 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	795b      	ldrb	r3, [r3, #5]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fcc5 	bl	8009664 <USBH_LL_GetURBState>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d11e      	bne.n	8008d22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7c1b      	ldrb	r3, [r3, #16]
 8008ce8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008cec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	8adb      	ldrh	r3, [r3, #22]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008cf6:	7b7b      	ldrb	r3, [r7, #13]
 8008cf8:	2b80      	cmp	r3, #128	@ 0x80
 8008cfa:	d103      	bne.n	8008d04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2203      	movs	r2, #3
 8008d00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d02:	e115      	b.n	8008f30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2205      	movs	r2, #5
 8008d08:	761a      	strb	r2, [r3, #24]
      break;
 8008d0a:	e111      	b.n	8008f30 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d0c:	7b7b      	ldrb	r3, [r7, #13]
 8008d0e:	2b80      	cmp	r3, #128	@ 0x80
 8008d10:	d103      	bne.n	8008d1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2209      	movs	r2, #9
 8008d16:	761a      	strb	r2, [r3, #24]
      break;
 8008d18:	e10a      	b.n	8008f30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2207      	movs	r2, #7
 8008d1e:	761a      	strb	r2, [r3, #24]
      break;
 8008d20:	e106      	b.n	8008f30 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d003      	beq.n	8008d30 <USBH_HandleControl+0xcc>
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	f040 8100 	bne.w	8008f30 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	220b      	movs	r2, #11
 8008d34:	761a      	strb	r2, [r3, #24]
      break;
 8008d36:	e0fb      	b.n	8008f30 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6899      	ldr	r1, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	899a      	ldrh	r2, [r3, #12]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f93a 	bl	8008fca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2204      	movs	r2, #4
 8008d5a:	761a      	strb	r2, [r3, #24]
      break;
 8008d5c:	e0f1      	b.n	8008f42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	791b      	ldrb	r3, [r3, #4]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc7d 	bl	8009664 <USBH_LL_GetURBState>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d102      	bne.n	8008d7a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2209      	movs	r2, #9
 8008d78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d102      	bne.n	8008d86 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d80:	2303      	movs	r3, #3
 8008d82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d84:	e0d6      	b.n	8008f34 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	f040 80d3 	bne.w	8008f34 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	220b      	movs	r2, #11
 8008d92:	761a      	strb	r2, [r3, #24]
      break;
 8008d94:	e0ce      	b.n	8008f34 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6899      	ldr	r1, [r3, #8]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	899a      	ldrh	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	795b      	ldrb	r3, [r3, #5]
 8008da2:	2001      	movs	r0, #1
 8008da4:	9000      	str	r0, [sp, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f8ea 	bl	8008f80 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2206      	movs	r2, #6
 8008dbc:	761a      	strb	r2, [r3, #24]
      break;
 8008dbe:	e0c0      	b.n	8008f42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	795b      	ldrb	r3, [r3, #5]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fc4c 	bl	8009664 <USBH_LL_GetURBState>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d103      	bne.n	8008dde <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2207      	movs	r2, #7
 8008dda:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ddc:	e0ac      	b.n	8008f38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	d105      	bne.n	8008df0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	220c      	movs	r2, #12
 8008de8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008dea:	2303      	movs	r3, #3
 8008dec:	73fb      	strb	r3, [r7, #15]
      break;
 8008dee:	e0a3      	b.n	8008f38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d103      	bne.n	8008dfe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2205      	movs	r2, #5
 8008dfa:	761a      	strb	r2, [r3, #24]
      break;
 8008dfc:	e09c      	b.n	8008f38 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	f040 8099 	bne.w	8008f38 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	220b      	movs	r2, #11
 8008e0a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e10:	e092      	b.n	8008f38 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	791b      	ldrb	r3, [r3, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	2100      	movs	r1, #0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8d5 	bl	8008fca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2208      	movs	r2, #8
 8008e30:	761a      	strb	r2, [r3, #24]

      break;
 8008e32:	e086      	b.n	8008f42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	791b      	ldrb	r3, [r3, #4]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fc12 	bl	8009664 <USBH_LL_GetURBState>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d105      	bne.n	8008e56 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	220d      	movs	r2, #13
 8008e4e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e54:	e072      	b.n	8008f3c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d103      	bne.n	8008e64 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	220b      	movs	r2, #11
 8008e60:	761a      	strb	r2, [r3, #24]
      break;
 8008e62:	e06b      	b.n	8008f3c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b05      	cmp	r3, #5
 8008e68:	d168      	bne.n	8008f3c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6e:	e065      	b.n	8008f3c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	795b      	ldrb	r3, [r3, #5]
 8008e74:	2201      	movs	r2, #1
 8008e76:	9200      	str	r2, [sp, #0]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f87f 	bl	8008f80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	220a      	movs	r2, #10
 8008e92:	761a      	strb	r2, [r3, #24]
      break;
 8008e94:	e055      	b.n	8008f42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	795b      	ldrb	r3, [r3, #5]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fbe1 	bl	8009664 <USBH_LL_GetURBState>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d105      	bne.n	8008eb8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	220d      	movs	r2, #13
 8008eb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008eb6:	e043      	b.n	8008f40 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d103      	bne.n	8008ec6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2209      	movs	r2, #9
 8008ec2:	761a      	strb	r2, [r3, #24]
      break;
 8008ec4:	e03c      	b.n	8008f40 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d139      	bne.n	8008f40 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	220b      	movs	r2, #11
 8008ed0:	761a      	strb	r2, [r3, #24]
      break;
 8008ed2:	e035      	b.n	8008f40 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	7e5b      	ldrb	r3, [r3, #25]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	765a      	strb	r2, [r3, #25]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	7e5b      	ldrb	r3, [r3, #25]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d806      	bhi.n	8008ef6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ef4:	e025      	b.n	8008f42 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008efc:	2106      	movs	r1, #6
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	795b      	ldrb	r3, [r3, #5]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f90c 	bl	800912c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	791b      	ldrb	r3, [r3, #4]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f906 	bl	800912c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f26:	2302      	movs	r3, #2
 8008f28:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2a:	e00a      	b.n	8008f42 <USBH_HandleControl+0x2de>

    default:
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e008      	b.n	8008f42 <USBH_HandleControl+0x2de>
      break;
 8008f30:	bf00      	nop
 8008f32:	e006      	b.n	8008f42 <USBH_HandleControl+0x2de>
      break;
 8008f34:	bf00      	nop
 8008f36:	e004      	b.n	8008f42 <USBH_HandleControl+0x2de>
      break;
 8008f38:	bf00      	nop
 8008f3a:	e002      	b.n	8008f42 <USBH_HandleControl+0x2de>
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e000      	b.n	8008f42 <USBH_HandleControl+0x2de>
      break;
 8008f40:	bf00      	nop
  }

  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af04      	add	r7, sp, #16
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f5a:	79f9      	ldrb	r1, [r7, #7]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	2308      	movs	r3, #8
 8008f62:	9302      	str	r3, [sp, #8]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2200      	movs	r2, #0
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fb46 	bl	8009602 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	460b      	mov	r3, r1
 8008f90:	80fb      	strh	r3, [r7, #6]
 8008f92:	4613      	mov	r3, r2
 8008f94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fa4:	7979      	ldrb	r1, [r7, #5]
 8008fa6:	7e3b      	ldrb	r3, [r7, #24]
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2200      	movs	r2, #0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fb21 	bl	8009602 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af04      	add	r7, sp, #16
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	460b      	mov	r3, r1
 8008fda:	80fb      	strh	r3, [r7, #6]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fe0:	7979      	ldrb	r1, [r7, #5]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	9302      	str	r3, [sp, #8]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fb03 	bl	8009602 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ffc:	2300      	movs	r3, #0

}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b088      	sub	sp, #32
 800900a:	af04      	add	r7, sp, #16
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	460b      	mov	r3, r1
 8009016:	80fb      	strh	r3, [r7, #6]
 8009018:	4613      	mov	r3, r2
 800901a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800902a:	7979      	ldrb	r1, [r7, #5]
 800902c:	7e3b      	ldrb	r3, [r7, #24]
 800902e:	9303      	str	r3, [sp, #12]
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	9302      	str	r3, [sp, #8]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	2301      	movs	r3, #1
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	2302      	movs	r3, #2
 800903e:	2200      	movs	r2, #0
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fade 	bl	8009602 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af04      	add	r7, sp, #16
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4611      	mov	r1, r2
 800905c:	461a      	mov	r2, r3
 800905e:	460b      	mov	r3, r1
 8009060:	80fb      	strh	r3, [r7, #6]
 8009062:	4613      	mov	r3, r2
 8009064:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009066:	7979      	ldrb	r1, [r7, #5]
 8009068:	2300      	movs	r3, #0
 800906a:	9303      	str	r3, [sp, #12]
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	2301      	movs	r3, #1
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2302      	movs	r3, #2
 800907a:	2201      	movs	r2, #1
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 fac0 	bl	8009602 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af04      	add	r7, sp, #16
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	461a      	mov	r2, r3
 800909a:	4603      	mov	r3, r0
 800909c:	70fb      	strb	r3, [r7, #3]
 800909e:	460b      	mov	r3, r1
 80090a0:	70bb      	strb	r3, [r7, #2]
 80090a2:	4613      	mov	r3, r2
 80090a4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090a6:	7878      	ldrb	r0, [r7, #1]
 80090a8:	78ba      	ldrb	r2, [r7, #2]
 80090aa:	78f9      	ldrb	r1, [r7, #3]
 80090ac:	8b3b      	ldrh	r3, [r7, #24]
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	7d3b      	ldrb	r3, [r7, #20]
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	7c3b      	ldrb	r3, [r7, #16]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	4603      	mov	r3, r0
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa53 	bl	8009566 <USBH_LL_OpenPipe>

  return USBH_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa72 	bl	80095c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f836 	bl	8009168 <USBH_GetFreePipe>
 80090fc:	4603      	mov	r3, r0
 80090fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009106:	4293      	cmp	r3, r2
 8009108:	d00a      	beq.n	8009120 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	89fb      	ldrh	r3, [r7, #14]
 800910e:	f003 030f 	and.w	r3, r3, #15
 8009112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	33e0      	adds	r3, #224	@ 0xe0
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	b2db      	uxtb	r3, r3
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	2b0f      	cmp	r3, #15
 800913c:	d80d      	bhi.n	800915a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	33e0      	adds	r3, #224	@ 0xe0
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	33e0      	adds	r3, #224	@ 0xe0
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	440b      	add	r3, r1
 8009158:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
 8009178:	e00f      	b.n	800919a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	33e0      	adds	r3, #224	@ 0xe0
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	b29b      	uxth	r3, r3
 8009192:	e007      	b.n	80091a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	3301      	adds	r3, #1
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	2b0f      	cmp	r3, #15
 800919e:	d9ec      	bls.n	800917a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091b4:	2201      	movs	r2, #1
 80091b6:	490e      	ldr	r1, [pc, #56]	@ (80091f0 <MX_USB_HOST_Init+0x40>)
 80091b8:	480e      	ldr	r0, [pc, #56]	@ (80091f4 <MX_USB_HOST_Init+0x44>)
 80091ba:	f7fe fb15 	bl	80077e8 <USBH_Init>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091c4:	f7f7 fc78 	bl	8000ab8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091c8:	490b      	ldr	r1, [pc, #44]	@ (80091f8 <MX_USB_HOST_Init+0x48>)
 80091ca:	480a      	ldr	r0, [pc, #40]	@ (80091f4 <MX_USB_HOST_Init+0x44>)
 80091cc:	f7fe fbb9 	bl	8007942 <USBH_RegisterClass>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80091d6:	f7f7 fc6f 	bl	8000ab8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80091da:	4806      	ldr	r0, [pc, #24]	@ (80091f4 <MX_USB_HOST_Init+0x44>)
 80091dc:	f7fe fc3d 	bl	8007a5a <USBH_Start>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80091e6:	f7f7 fc67 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091ea:	bf00      	nop
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	08009211 	.word	0x08009211
 80091f4:	20000198 	.word	0x20000198
 80091f8:	2000000c 	.word	0x2000000c

080091fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009200:	4802      	ldr	r0, [pc, #8]	@ (800920c <MX_USB_HOST_Process+0x10>)
 8009202:	f7fe fc3b 	bl	8007a7c <USBH_Process>
}
 8009206:	bf00      	nop
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000198 	.word	0x20000198

08009210 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	3b01      	subs	r3, #1
 8009220:	2b04      	cmp	r3, #4
 8009222:	d819      	bhi.n	8009258 <USBH_UserProcess+0x48>
 8009224:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <USBH_UserProcess+0x1c>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	08009259 	.word	0x08009259
 8009230:	08009249 	.word	0x08009249
 8009234:	08009259 	.word	0x08009259
 8009238:	08009251 	.word	0x08009251
 800923c:	08009241 	.word	0x08009241
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009240:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <USBH_UserProcess+0x58>)
 8009242:	2203      	movs	r2, #3
 8009244:	701a      	strb	r2, [r3, #0]
  break;
 8009246:	e008      	b.n	800925a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009248:	4b07      	ldr	r3, [pc, #28]	@ (8009268 <USBH_UserProcess+0x58>)
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
  break;
 800924e:	e004      	b.n	800925a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009250:	4b05      	ldr	r3, [pc, #20]	@ (8009268 <USBH_UserProcess+0x58>)
 8009252:	2201      	movs	r2, #1
 8009254:	701a      	strb	r2, [r3, #0]
  break;
 8009256:	e000      	b.n	800925a <USBH_UserProcess+0x4a>

  default:
  break;
 8009258:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20000570 	.word	0x20000570

0800926c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	@ 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009274:	f107 0314 	add.w	r3, r7, #20
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	605a      	str	r2, [r3, #4]
 800927e:	609a      	str	r2, [r3, #8]
 8009280:	60da      	str	r2, [r3, #12]
 8009282:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800928c:	d147      	bne.n	800931e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	4b25      	ldr	r3, [pc, #148]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009296:	4a24      	ldr	r2, [pc, #144]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 8009298:	f043 0301 	orr.w	r3, r3, #1
 800929c:	6313      	str	r3, [r2, #48]	@ 0x30
 800929e:	4b22      	ldr	r3, [pc, #136]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 80092a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092b0:	2300      	movs	r3, #0
 80092b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	4619      	mov	r1, r3
 80092be:	481b      	ldr	r0, [pc, #108]	@ (800932c <HAL_HCD_MspInit+0xc0>)
 80092c0:	f7f7 ff8c 	bl	80011dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092c4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80092c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ca:	2302      	movs	r3, #2
 80092cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092d2:	2300      	movs	r3, #0
 80092d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092d6:	230a      	movs	r3, #10
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	4619      	mov	r1, r3
 80092e0:	4812      	ldr	r0, [pc, #72]	@ (800932c <HAL_HCD_MspInit+0xc0>)
 80092e2:	f7f7 ff7b 	bl	80011dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092e6:	4b10      	ldr	r3, [pc, #64]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 80092e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ea:	4a0f      	ldr	r2, [pc, #60]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 80092ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 80092f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fa:	4a0b      	ldr	r2, [pc, #44]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 80092fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009300:	6453      	str	r3, [r2, #68]	@ 0x44
 8009302:	4b09      	ldr	r3, [pc, #36]	@ (8009328 <HAL_HCD_MspInit+0xbc>)
 8009304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800930e:	2200      	movs	r2, #0
 8009310:	2100      	movs	r1, #0
 8009312:	2043      	movs	r0, #67	@ 0x43
 8009314:	f7f7 ff2b 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009318:	2043      	movs	r0, #67	@ 0x43
 800931a:	f7f7 ff44 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800931e:	bf00      	nop
 8009320:	3728      	adds	r7, #40	@ 0x28
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	40023800 	.word	0x40023800
 800932c:	40020000 	.word	0x40020000

08009330 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe ff73 	bl	800822a <USBH_LL_IncTimer>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe ffab 	bl	80082b6 <USBH_LL_Connect>
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe ffb4 	bl	80082e4 <USBH_LL_Disconnect>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
 8009390:	4613      	mov	r3, r2
 8009392:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe ff65 	bl	800827e <USBH_LL_PortEnabled>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe ff65 	bl	800829a <USBH_LL_PortDisabled>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d12a      	bne.n	8009440 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093ea:	4a18      	ldr	r2, [pc, #96]	@ (800944c <USBH_LL_Init+0x74>)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a15      	ldr	r2, [pc, #84]	@ (800944c <USBH_LL_Init+0x74>)
 80093f6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093fa:	4b14      	ldr	r3, [pc, #80]	@ (800944c <USBH_LL_Init+0x74>)
 80093fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009400:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009402:	4b12      	ldr	r3, [pc, #72]	@ (800944c <USBH_LL_Init+0x74>)
 8009404:	2208      	movs	r2, #8
 8009406:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009408:	4b10      	ldr	r3, [pc, #64]	@ (800944c <USBH_LL_Init+0x74>)
 800940a:	2201      	movs	r2, #1
 800940c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800940e:	4b0f      	ldr	r3, [pc, #60]	@ (800944c <USBH_LL_Init+0x74>)
 8009410:	2200      	movs	r2, #0
 8009412:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009414:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <USBH_LL_Init+0x74>)
 8009416:	2202      	movs	r2, #2
 8009418:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800941a:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <USBH_LL_Init+0x74>)
 800941c:	2200      	movs	r2, #0
 800941e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009420:	480a      	ldr	r0, [pc, #40]	@ (800944c <USBH_LL_Init+0x74>)
 8009422:	f7f8 f890 	bl	8001546 <HAL_HCD_Init>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800942c:	f7f7 fb44 	bl	8000ab8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009430:	4806      	ldr	r0, [pc, #24]	@ (800944c <USBH_LL_Init+0x74>)
 8009432:	f7f8 fcf1 	bl	8001e18 <HAL_HCD_GetCurrentFrame>
 8009436:	4603      	mov	r3, r0
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fe fee6 	bl	800820c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000574 	.word	0x20000574

08009450 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009466:	4618      	mov	r0, r3
 8009468:	f7f8 fc5e 	bl	8001d28 <HAL_HCD_Start>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f95e 	bl	8009734 <USBH_Get_USB_Status>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800947c:	7bbb      	ldrb	r3, [r7, #14]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800949c:	4618      	mov	r0, r3
 800949e:	f7f8 fc66 	bl	8001d6e <HAL_HCD_Stop>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f943 	bl	8009734 <USBH_Get_USB_Status>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094c4:	2301      	movs	r3, #1
 80094c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f8 fcb0 	bl	8001e34 <HAL_HCD_GetCurrentSpeed>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d00c      	beq.n	80094f4 <USBH_LL_GetSpeed+0x38>
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d80d      	bhi.n	80094fa <USBH_LL_GetSpeed+0x3e>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <USBH_LL_GetSpeed+0x2c>
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d003      	beq.n	80094ee <USBH_LL_GetSpeed+0x32>
 80094e6:	e008      	b.n	80094fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	e008      	b.n	8009500 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80094ee:	2301      	movs	r3, #1
 80094f0:	73fb      	strb	r3, [r7, #15]
    break;
 80094f2:	e005      	b.n	8009500 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80094f4:	2302      	movs	r3, #2
 80094f6:	73fb      	strb	r3, [r7, #15]
    break;
 80094f8:	e002      	b.n	8009500 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094fa:	2301      	movs	r3, #1
 80094fc:	73fb      	strb	r3, [r7, #15]
    break;
 80094fe:	bf00      	nop
  }
  return  speed;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009520:	4618      	mov	r0, r3
 8009522:	f7f8 fc41 	bl	8001da8 <HAL_HCD_ResetPort>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	4618      	mov	r0, r3
 800952e:	f000 f901 	bl	8009734 <USBH_Get_USB_Status>
 8009532:	4603      	mov	r3, r0
 8009534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009536:	7bbb      	ldrb	r3, [r7, #14]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7f8 fc49 	bl	8001dee <HAL_HCD_HC_GetXferCount>
 800955c:	4603      	mov	r3, r0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009566:	b590      	push	{r4, r7, lr}
 8009568:	b089      	sub	sp, #36	@ 0x24
 800956a:	af04      	add	r7, sp, #16
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	4608      	mov	r0, r1
 8009570:	4611      	mov	r1, r2
 8009572:	461a      	mov	r2, r3
 8009574:	4603      	mov	r3, r0
 8009576:	70fb      	strb	r3, [r7, #3]
 8009578:	460b      	mov	r3, r1
 800957a:	70bb      	strb	r3, [r7, #2]
 800957c:	4613      	mov	r3, r2
 800957e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800958e:	787c      	ldrb	r4, [r7, #1]
 8009590:	78ba      	ldrb	r2, [r7, #2]
 8009592:	78f9      	ldrb	r1, [r7, #3]
 8009594:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	4623      	mov	r3, r4
 80095a6:	f7f8 f835 	bl	8001614 <HAL_HCD_HC_Init>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f8bf 	bl	8009734 <USBH_Get_USB_Status>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd90      	pop	{r4, r7, pc}

080095c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7f8 f8ce 	bl	8001784 <HAL_HCD_HC_Halt>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f8a0 	bl	8009734 <USBH_Get_USB_Status>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009602:	b590      	push	{r4, r7, lr}
 8009604:	b089      	sub	sp, #36	@ 0x24
 8009606:	af04      	add	r7, sp, #16
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	461a      	mov	r2, r3
 8009610:	4603      	mov	r3, r0
 8009612:	70fb      	strb	r3, [r7, #3]
 8009614:	460b      	mov	r3, r1
 8009616:	70bb      	strb	r3, [r7, #2]
 8009618:	4613      	mov	r3, r2
 800961a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800962a:	787c      	ldrb	r4, [r7, #1]
 800962c:	78ba      	ldrb	r2, [r7, #2]
 800962e:	78f9      	ldrb	r1, [r7, #3]
 8009630:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009634:	9303      	str	r3, [sp, #12]
 8009636:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009638:	9302      	str	r3, [sp, #8]
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	4623      	mov	r3, r4
 8009646:	f7f8 f8c1 	bl	80017cc <HAL_HCD_HC_SubmitRequest>
 800964a:	4603      	mov	r3, r0
 800964c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	4618      	mov	r0, r3
 8009652:	f000 f86f 	bl	8009734 <USBH_Get_USB_Status>
 8009656:	4603      	mov	r3, r0
 8009658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965a:	7bbb      	ldrb	r3, [r7, #14]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	bd90      	pop	{r4, r7, pc}

08009664 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7f8 fba2 	bl	8001dc4 <HAL_HCD_HC_GetURBState>
 8009680:	4603      	mov	r3, r0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800969c:	2b01      	cmp	r3, #1
 800969e:	d103      	bne.n	80096a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f872 	bl	800978c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80096a8:	20c8      	movs	r0, #200	@ 0xc8
 80096aa:	f7f7 fc61 	bl	8000f70 <HAL_Delay>
  return USBH_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
 80096c4:	4613      	mov	r3, r2
 80096c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	68f9      	ldr	r1, [r7, #12]
 80096d4:	4613      	mov	r3, r2
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	3317      	adds	r3, #23
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	68f9      	ldr	r1, [r7, #12]
 80096ea:	4613      	mov	r3, r2
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	333c      	adds	r3, #60	@ 0x3c
 80096f6:	78ba      	ldrb	r2, [r7, #2]
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	e009      	b.n	8009710 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	68f9      	ldr	r1, [r7, #12]
 8009700:	4613      	mov	r3, r2
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	333d      	adds	r3, #61	@ 0x3d
 800970c:	78ba      	ldrb	r2, [r7, #2]
 800970e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7f7 fc22 	bl	8000f70 <HAL_Delay>
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	2b03      	cmp	r3, #3
 8009746:	d817      	bhi.n	8009778 <USBH_Get_USB_Status+0x44>
 8009748:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <USBH_Get_USB_Status+0x1c>)
 800974a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974e:	bf00      	nop
 8009750:	08009761 	.word	0x08009761
 8009754:	08009767 	.word	0x08009767
 8009758:	0800976d 	.word	0x0800976d
 800975c:	08009773 	.word	0x08009773
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]
    break;
 8009764:	e00b      	b.n	800977e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009766:	2302      	movs	r3, #2
 8009768:	73fb      	strb	r3, [r7, #15]
    break;
 800976a:	e008      	b.n	800977e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800976c:	2301      	movs	r3, #1
 800976e:	73fb      	strb	r3, [r7, #15]
    break;
 8009770:	e005      	b.n	800977e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	73fb      	strb	r3, [r7, #15]
    break;
 8009776:	e002      	b.n	800977e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009778:	2302      	movs	r3, #2
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	bf00      	nop
  }
  return usb_status;
 800977e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
 80097a4:	e001      	b.n	80097aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80097a6:	2301      	movs	r3, #1
 80097a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	461a      	mov	r2, r3
 80097ae:	2101      	movs	r1, #1
 80097b0:	4803      	ldr	r0, [pc, #12]	@ (80097c0 <MX_DriverVbusFS+0x34>)
 80097b2:	f7f7 feaf 	bl	8001514 <HAL_GPIO_WritePin>
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	40020800 	.word	0x40020800

080097c4 <malloc>:
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <malloc+0xc>)
 80097c6:	4601      	mov	r1, r0
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f000 b82d 	b.w	8009828 <_malloc_r>
 80097ce:	bf00      	nop
 80097d0:	2000002c 	.word	0x2000002c

080097d4 <free>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	@ (80097e0 <free+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f000 b8f5 	b.w	80099c8 <_free_r>
 80097de:	bf00      	nop
 80097e0:	2000002c 	.word	0x2000002c

080097e4 <sbrk_aligned>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009824 <sbrk_aligned+0x40>)
 80097e8:	460c      	mov	r4, r1
 80097ea:	6831      	ldr	r1, [r6, #0]
 80097ec:	4605      	mov	r5, r0
 80097ee:	b911      	cbnz	r1, 80097f6 <sbrk_aligned+0x12>
 80097f0:	f000 f8ae 	bl	8009950 <_sbrk_r>
 80097f4:	6030      	str	r0, [r6, #0]
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f8a9 	bl	8009950 <_sbrk_r>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d103      	bne.n	800980a <sbrk_aligned+0x26>
 8009802:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009806:	4620      	mov	r0, r4
 8009808:	bd70      	pop	{r4, r5, r6, pc}
 800980a:	1cc4      	adds	r4, r0, #3
 800980c:	f024 0403 	bic.w	r4, r4, #3
 8009810:	42a0      	cmp	r0, r4
 8009812:	d0f8      	beq.n	8009806 <sbrk_aligned+0x22>
 8009814:	1a21      	subs	r1, r4, r0
 8009816:	4628      	mov	r0, r5
 8009818:	f000 f89a 	bl	8009950 <_sbrk_r>
 800981c:	3001      	adds	r0, #1
 800981e:	d1f2      	bne.n	8009806 <sbrk_aligned+0x22>
 8009820:	e7ef      	b.n	8009802 <sbrk_aligned+0x1e>
 8009822:	bf00      	nop
 8009824:	20000954 	.word	0x20000954

08009828 <_malloc_r>:
 8009828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800982c:	1ccd      	adds	r5, r1, #3
 800982e:	f025 0503 	bic.w	r5, r5, #3
 8009832:	3508      	adds	r5, #8
 8009834:	2d0c      	cmp	r5, #12
 8009836:	bf38      	it	cc
 8009838:	250c      	movcc	r5, #12
 800983a:	2d00      	cmp	r5, #0
 800983c:	4606      	mov	r6, r0
 800983e:	db01      	blt.n	8009844 <_malloc_r+0x1c>
 8009840:	42a9      	cmp	r1, r5
 8009842:	d904      	bls.n	800984e <_malloc_r+0x26>
 8009844:	230c      	movs	r3, #12
 8009846:	6033      	str	r3, [r6, #0]
 8009848:	2000      	movs	r0, #0
 800984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009924 <_malloc_r+0xfc>
 8009852:	f000 f869 	bl	8009928 <__malloc_lock>
 8009856:	f8d8 3000 	ldr.w	r3, [r8]
 800985a:	461c      	mov	r4, r3
 800985c:	bb44      	cbnz	r4, 80098b0 <_malloc_r+0x88>
 800985e:	4629      	mov	r1, r5
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff ffbf 	bl	80097e4 <sbrk_aligned>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	4604      	mov	r4, r0
 800986a:	d158      	bne.n	800991e <_malloc_r+0xf6>
 800986c:	f8d8 4000 	ldr.w	r4, [r8]
 8009870:	4627      	mov	r7, r4
 8009872:	2f00      	cmp	r7, #0
 8009874:	d143      	bne.n	80098fe <_malloc_r+0xd6>
 8009876:	2c00      	cmp	r4, #0
 8009878:	d04b      	beq.n	8009912 <_malloc_r+0xea>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	4639      	mov	r1, r7
 800987e:	4630      	mov	r0, r6
 8009880:	eb04 0903 	add.w	r9, r4, r3
 8009884:	f000 f864 	bl	8009950 <_sbrk_r>
 8009888:	4581      	cmp	r9, r0
 800988a:	d142      	bne.n	8009912 <_malloc_r+0xea>
 800988c:	6821      	ldr	r1, [r4, #0]
 800988e:	1a6d      	subs	r5, r5, r1
 8009890:	4629      	mov	r1, r5
 8009892:	4630      	mov	r0, r6
 8009894:	f7ff ffa6 	bl	80097e4 <sbrk_aligned>
 8009898:	3001      	adds	r0, #1
 800989a:	d03a      	beq.n	8009912 <_malloc_r+0xea>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	442b      	add	r3, r5
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	f8d8 3000 	ldr.w	r3, [r8]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	bb62      	cbnz	r2, 8009904 <_malloc_r+0xdc>
 80098aa:	f8c8 7000 	str.w	r7, [r8]
 80098ae:	e00f      	b.n	80098d0 <_malloc_r+0xa8>
 80098b0:	6822      	ldr	r2, [r4, #0]
 80098b2:	1b52      	subs	r2, r2, r5
 80098b4:	d420      	bmi.n	80098f8 <_malloc_r+0xd0>
 80098b6:	2a0b      	cmp	r2, #11
 80098b8:	d917      	bls.n	80098ea <_malloc_r+0xc2>
 80098ba:	1961      	adds	r1, r4, r5
 80098bc:	42a3      	cmp	r3, r4
 80098be:	6025      	str	r5, [r4, #0]
 80098c0:	bf18      	it	ne
 80098c2:	6059      	strne	r1, [r3, #4]
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	bf08      	it	eq
 80098c8:	f8c8 1000 	streq.w	r1, [r8]
 80098cc:	5162      	str	r2, [r4, r5]
 80098ce:	604b      	str	r3, [r1, #4]
 80098d0:	4630      	mov	r0, r6
 80098d2:	f000 f82f 	bl	8009934 <__malloc_unlock>
 80098d6:	f104 000b 	add.w	r0, r4, #11
 80098da:	1d23      	adds	r3, r4, #4
 80098dc:	f020 0007 	bic.w	r0, r0, #7
 80098e0:	1ac2      	subs	r2, r0, r3
 80098e2:	bf1c      	itt	ne
 80098e4:	1a1b      	subne	r3, r3, r0
 80098e6:	50a3      	strne	r3, [r4, r2]
 80098e8:	e7af      	b.n	800984a <_malloc_r+0x22>
 80098ea:	6862      	ldr	r2, [r4, #4]
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	bf0c      	ite	eq
 80098f0:	f8c8 2000 	streq.w	r2, [r8]
 80098f4:	605a      	strne	r2, [r3, #4]
 80098f6:	e7eb      	b.n	80098d0 <_malloc_r+0xa8>
 80098f8:	4623      	mov	r3, r4
 80098fa:	6864      	ldr	r4, [r4, #4]
 80098fc:	e7ae      	b.n	800985c <_malloc_r+0x34>
 80098fe:	463c      	mov	r4, r7
 8009900:	687f      	ldr	r7, [r7, #4]
 8009902:	e7b6      	b.n	8009872 <_malloc_r+0x4a>
 8009904:	461a      	mov	r2, r3
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	42a3      	cmp	r3, r4
 800990a:	d1fb      	bne.n	8009904 <_malloc_r+0xdc>
 800990c:	2300      	movs	r3, #0
 800990e:	6053      	str	r3, [r2, #4]
 8009910:	e7de      	b.n	80098d0 <_malloc_r+0xa8>
 8009912:	230c      	movs	r3, #12
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	4630      	mov	r0, r6
 8009918:	f000 f80c 	bl	8009934 <__malloc_unlock>
 800991c:	e794      	b.n	8009848 <_malloc_r+0x20>
 800991e:	6005      	str	r5, [r0, #0]
 8009920:	e7d6      	b.n	80098d0 <_malloc_r+0xa8>
 8009922:	bf00      	nop
 8009924:	20000958 	.word	0x20000958

08009928 <__malloc_lock>:
 8009928:	4801      	ldr	r0, [pc, #4]	@ (8009930 <__malloc_lock+0x8>)
 800992a:	f000 b84b 	b.w	80099c4 <__retarget_lock_acquire_recursive>
 800992e:	bf00      	nop
 8009930:	20000a94 	.word	0x20000a94

08009934 <__malloc_unlock>:
 8009934:	4801      	ldr	r0, [pc, #4]	@ (800993c <__malloc_unlock+0x8>)
 8009936:	f000 b846 	b.w	80099c6 <__retarget_lock_release_recursive>
 800993a:	bf00      	nop
 800993c:	20000a94 	.word	0x20000a94

08009940 <memset>:
 8009940:	4402      	add	r2, r0
 8009942:	4603      	mov	r3, r0
 8009944:	4293      	cmp	r3, r2
 8009946:	d100      	bne.n	800994a <memset+0xa>
 8009948:	4770      	bx	lr
 800994a:	f803 1b01 	strb.w	r1, [r3], #1
 800994e:	e7f9      	b.n	8009944 <memset+0x4>

08009950 <_sbrk_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d06      	ldr	r5, [pc, #24]	@ (800996c <_sbrk_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	f7f7 fa24 	bl	8000da8 <_sbrk>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_sbrk_r+0x1a>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_sbrk_r+0x1a>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20000a98 	.word	0x20000a98

08009970 <__errno>:
 8009970:	4b01      	ldr	r3, [pc, #4]	@ (8009978 <__errno+0x8>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	2000002c 	.word	0x2000002c

0800997c <__libc_init_array>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4d0d      	ldr	r5, [pc, #52]	@ (80099b4 <__libc_init_array+0x38>)
 8009980:	4c0d      	ldr	r4, [pc, #52]	@ (80099b8 <__libc_init_array+0x3c>)
 8009982:	1b64      	subs	r4, r4, r5
 8009984:	10a4      	asrs	r4, r4, #2
 8009986:	2600      	movs	r6, #0
 8009988:	42a6      	cmp	r6, r4
 800998a:	d109      	bne.n	80099a0 <__libc_init_array+0x24>
 800998c:	4d0b      	ldr	r5, [pc, #44]	@ (80099bc <__libc_init_array+0x40>)
 800998e:	4c0c      	ldr	r4, [pc, #48]	@ (80099c0 <__libc_init_array+0x44>)
 8009990:	f000 f864 	bl	8009a5c <_init>
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	2600      	movs	r6, #0
 800999a:	42a6      	cmp	r6, r4
 800999c:	d105      	bne.n	80099aa <__libc_init_array+0x2e>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a4:	4798      	blx	r3
 80099a6:	3601      	adds	r6, #1
 80099a8:	e7ee      	b.n	8009988 <__libc_init_array+0xc>
 80099aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ae:	4798      	blx	r3
 80099b0:	3601      	adds	r6, #1
 80099b2:	e7f2      	b.n	800999a <__libc_init_array+0x1e>
 80099b4:	08009a98 	.word	0x08009a98
 80099b8:	08009a98 	.word	0x08009a98
 80099bc:	08009a98 	.word	0x08009a98
 80099c0:	08009a9c 	.word	0x08009a9c

080099c4 <__retarget_lock_acquire_recursive>:
 80099c4:	4770      	bx	lr

080099c6 <__retarget_lock_release_recursive>:
 80099c6:	4770      	bx	lr

080099c8 <_free_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4605      	mov	r5, r0
 80099cc:	2900      	cmp	r1, #0
 80099ce:	d041      	beq.n	8009a54 <_free_r+0x8c>
 80099d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d4:	1f0c      	subs	r4, r1, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bfb8      	it	lt
 80099da:	18e4      	addlt	r4, r4, r3
 80099dc:	f7ff ffa4 	bl	8009928 <__malloc_lock>
 80099e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a58 <_free_r+0x90>)
 80099e2:	6813      	ldr	r3, [r2, #0]
 80099e4:	b933      	cbnz	r3, 80099f4 <_free_r+0x2c>
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	6014      	str	r4, [r2, #0]
 80099ea:	4628      	mov	r0, r5
 80099ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099f0:	f7ff bfa0 	b.w	8009934 <__malloc_unlock>
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d908      	bls.n	8009a0a <_free_r+0x42>
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	1821      	adds	r1, r4, r0
 80099fc:	428b      	cmp	r3, r1
 80099fe:	bf01      	itttt	eq
 8009a00:	6819      	ldreq	r1, [r3, #0]
 8009a02:	685b      	ldreq	r3, [r3, #4]
 8009a04:	1809      	addeq	r1, r1, r0
 8009a06:	6021      	streq	r1, [r4, #0]
 8009a08:	e7ed      	b.n	80099e6 <_free_r+0x1e>
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	b10b      	cbz	r3, 8009a14 <_free_r+0x4c>
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	d9fa      	bls.n	8009a0a <_free_r+0x42>
 8009a14:	6811      	ldr	r1, [r2, #0]
 8009a16:	1850      	adds	r0, r2, r1
 8009a18:	42a0      	cmp	r0, r4
 8009a1a:	d10b      	bne.n	8009a34 <_free_r+0x6c>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	4401      	add	r1, r0
 8009a20:	1850      	adds	r0, r2, r1
 8009a22:	4283      	cmp	r3, r0
 8009a24:	6011      	str	r1, [r2, #0]
 8009a26:	d1e0      	bne.n	80099ea <_free_r+0x22>
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	6053      	str	r3, [r2, #4]
 8009a2e:	4408      	add	r0, r1
 8009a30:	6010      	str	r0, [r2, #0]
 8009a32:	e7da      	b.n	80099ea <_free_r+0x22>
 8009a34:	d902      	bls.n	8009a3c <_free_r+0x74>
 8009a36:	230c      	movs	r3, #12
 8009a38:	602b      	str	r3, [r5, #0]
 8009a3a:	e7d6      	b.n	80099ea <_free_r+0x22>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	1821      	adds	r1, r4, r0
 8009a40:	428b      	cmp	r3, r1
 8009a42:	bf04      	itt	eq
 8009a44:	6819      	ldreq	r1, [r3, #0]
 8009a46:	685b      	ldreq	r3, [r3, #4]
 8009a48:	6063      	str	r3, [r4, #4]
 8009a4a:	bf04      	itt	eq
 8009a4c:	1809      	addeq	r1, r1, r0
 8009a4e:	6021      	streq	r1, [r4, #0]
 8009a50:	6054      	str	r4, [r2, #4]
 8009a52:	e7ca      	b.n	80099ea <_free_r+0x22>
 8009a54:	bd38      	pop	{r3, r4, r5, pc}
 8009a56:	bf00      	nop
 8009a58:	20000958 	.word	0x20000958

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
